/*
 * @author Mário Soares
 * @contributors Jefferson González
 * @contributors René Vögeli / Rangee GmbH
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @note
 * This file was auto-generated by the wxPHP source maker
*/

#include "php_wxwidgets.h"
#include "appmanagement.h"
#include "cfg.h"
#include "bookctrl.h"
#include "dnd.h"
#include "cmndlg.h"
#include "containers.h"
#include "ctrl.h"
#include "data.h"
#include "dc.h"
#include "docview.h"
#include "events.h"
#include "file.h"
#include "gdi.h"
#include "grid.h"
#include "html.h"
#include "help.h"
#include "logging.h"
#include "managedwnd.h"
#include "menus.h"
#include "misc.h"
#include "miscwnd.h"
#include "media.h"
#include "net.h"
#include "pickers.h"
#include "printing.h"
#include "ribbon.h"
#include "richtext.h"
#include "rtti.h"
#include "stc.h"
#include "streams.h"
#include "threading.h"
#include "validator.h"
#include "vfs.h"
#include "aui.h"
#include "winlayout.h"
#include "xml.h"
#include "xrc.h"
#include "dvc.h"
#include "others.h"


BEGIN_EXTERN_C()
void php_wxDC_free(zend_object *object)
{
    zo_wxDC* custom_object = php_wxDC_fetch_object(object);

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxDC_free on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    if(custom_object->native_object != NULL)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Pointer not null\n");
        php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
        #endif

        if(custom_object->is_user_initialized)
        {
            #ifdef USE_WXPHP_DEBUG
            php_printf("Deleting pointer with delete\n");
            #endif

            delete custom_object->native_object;
            custom_object->native_object = NULL;
        }

        #ifdef USE_WXPHP_DEBUG
        php_printf("Deletion of wxDC done\n");
        php_printf("===========================================\n\n");
        #endif
    }
    else
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Not user space initialized\n");
        #endif
    }

    zend_object_std_dtor(&custom_object->zo);
}

zend_object* php_wxDC_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxDC_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxDC* custom_object;

    custom_object = (zo_wxDC*) ecalloc(
        1,
        sizeof(zo_wxDC)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    memcpy(&wxphp_wxDC_object_handlers, zend_get_std_object_handlers(), sizeof wxphp_wxDC_object_handlers);
    wxphp_wxDC_object_handlers.offset = XtOffsetOf(zo_wxDC, zo);
    wxphp_wxDC_object_handlers.free_obj = php_wxDC_free;
    custom_object->zo.handlers = &wxphp_wxDC_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXDC_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto  wxDC::StartPage()
   Starts a document page (only relevant when outputting to a printer). */
PHP_METHOD(php_wxDC, StartPage)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::StartPage\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::StartPage call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::StartPage()\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->StartPage();
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->StartPage();
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->StartPage();
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->StartPage();
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->StartPage();
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->StartPage();
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->StartPage();
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->StartPage();
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->StartPage();
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->StartPage();
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->StartPage();
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->StartPage();
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::StartPage\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxDC::StartDoc(string message)
   Starts a document (only relevant when outputting to a printer). */
PHP_METHOD(php_wxDC, StartDoc)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::StartDoc\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::StartDoc call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* message0;
    size_t message_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&message0, &message_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &message0, &message_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDC::StartDoc(wxString(message0, wxConvUTF8)))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxWindowDC_php*)native_object)->StartDoc(wxString(message0, wxConvUTF8)));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxClientDC_php*)native_object)->StartDoc(wxString(message0, wxConvUTF8)));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPaintDC_php*)native_object)->StartDoc(wxString(message0, wxConvUTF8)));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxScreenDC_php*)native_object)->StartDoc(wxString(message0, wxConvUTF8)));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPostScriptDC_php*)native_object)->StartDoc(wxString(message0, wxConvUTF8)));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPrinterDC_php*)native_object)->StartDoc(wxString(message0, wxConvUTF8)));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMemoryDC_php*)native_object)->StartDoc(wxString(message0, wxConvUTF8)));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedDC_php*)native_object)->StartDoc(wxString(message0, wxConvUTF8)));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedPaintDC_php*)native_object)->StartDoc(wxString(message0, wxConvUTF8)));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxAutoBufferedPaintDC_php*)native_object)->StartDoc(wxString(message0, wxConvUTF8)));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMirrorDC_php*)native_object)->StartDoc(wxString(message0, wxConvUTF8)));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxDC_php*)native_object)->StartDoc(wxString(message0, wxConvUTF8)));
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::StartDoc\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::SetUserScale(float xScale, float yScale)
   Sets the user scaling factor, useful for applications which require 'zooming'. */
PHP_METHOD(php_wxDC, SetUserScale)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::SetUserScale\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::SetUserScale call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    double xScale0;
    double yScale0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'dd' (&xScale0, &yScale0)\n");
        #endif

        char parse_parameters_string[] = "dd";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &xScale0, &yScale0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::SetUserScale(xScale0, yScale0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->SetUserScale(xScale0, yScale0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->SetUserScale(xScale0, yScale0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->SetUserScale(xScale0, yScale0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->SetUserScale(xScale0, yScale0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->SetUserScale(xScale0, yScale0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->SetUserScale(xScale0, yScale0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->SetUserScale(xScale0, yScale0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->SetUserScale(xScale0, yScale0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->SetUserScale(xScale0, yScale0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->SetUserScale(xScale0, yScale0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->SetUserScale(xScale0, yScale0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->SetUserScale(xScale0, yScale0);
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::SetUserScale\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::SetTextForeground(wxColour colour)
   Sets the current text foreground colour for the DC. */
PHP_METHOD(php_wxDC, SetTextForeground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::SetTextForeground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::SetTextForeground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* colour0;
    wxColour* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&colour0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &colour0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(colour0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(colour0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(colour0)->native_object;
                    object_pointer0_0 = (wxColour*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'colour' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(colour0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'colour' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::SetTextForeground(*(wxColour*) object_pointer0_0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->SetTextForeground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->SetTextForeground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->SetTextForeground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->SetTextForeground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->SetTextForeground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->SetTextForeground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->SetTextForeground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->SetTextForeground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->SetTextForeground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->SetTextForeground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->SetTextForeground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->SetTextForeground(*(wxColour*) object_pointer0_0);
                }

                references->AddReference(colour0, "wxDC::SetTextForeground at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::SetTextForeground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::SetTextBackground(wxColour colour)
   Sets the current text background colour for the DC. */
PHP_METHOD(php_wxDC, SetTextBackground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::SetTextBackground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::SetTextBackground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* colour0;
    wxColour* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&colour0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &colour0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(colour0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(colour0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(colour0)->native_object;
                    object_pointer0_0 = (wxColour*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'colour' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(colour0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'colour' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::SetTextBackground(*(wxColour*) object_pointer0_0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->SetTextBackground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->SetTextBackground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->SetTextBackground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->SetTextBackground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->SetTextBackground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->SetTextBackground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->SetTextBackground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->SetTextBackground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->SetTextBackground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->SetTextBackground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->SetTextBackground(*(wxColour*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->SetTextBackground(*(wxColour*) object_pointer0_0);
                }

                references->AddReference(colour0, "wxDC::SetTextBackground at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::SetTextBackground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::CalcBoundingBox(int x, int y)
   Adds the specified point to the bounding box which can be retrieved with MinX(), MaxX() and MinY(), MaxY() functions. */
PHP_METHOD(php_wxDC, CalcBoundingBox)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::CalcBoundingBox\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::CalcBoundingBox call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&x0, &y0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::CalcBoundingBox((wxCoord) x0, (wxCoord) y0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::CalcBoundingBox\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxDC::CanUseTransformMatrix()
   Check if the use of transformation matrix is supported by the current system. */
PHP_METHOD(php_wxDC, CanUseTransformMatrix)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::CanUseTransformMatrix\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::CanUseTransformMatrix call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDC::CanUseTransformMatrix())\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxWindowDC_php*)native_object)->CanUseTransformMatrix());
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxClientDC_php*)native_object)->CanUseTransformMatrix());
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPaintDC_php*)native_object)->CanUseTransformMatrix());
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxScreenDC_php*)native_object)->CanUseTransformMatrix());
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPostScriptDC_php*)native_object)->CanUseTransformMatrix());
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPrinterDC_php*)native_object)->CanUseTransformMatrix());
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMemoryDC_php*)native_object)->CanUseTransformMatrix());
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedDC_php*)native_object)->CanUseTransformMatrix());
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedPaintDC_php*)native_object)->CanUseTransformMatrix());
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxAutoBufferedPaintDC_php*)native_object)->CanUseTransformMatrix());
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMirrorDC_php*)native_object)->CanUseTransformMatrix());
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxDC_php*)native_object)->CanUseTransformMatrix());
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::CanUseTransformMatrix\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::Clear()
   Clears the device context using the current background brush. */
PHP_METHOD(php_wxDC, Clear)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::Clear\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::Clear call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::Clear()\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->Clear();
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->Clear();
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->Clear();
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->Clear();
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->Clear();
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->Clear();
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->Clear();
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->Clear();
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->Clear();
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->Clear();
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->Clear();
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->Clear();
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::Clear\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::CopyAttributes(wxDC dc)
   Copy attributes from another DC. */
PHP_METHOD(php_wxDC, CopyAttributes)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::CopyAttributes\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::CopyAttributes call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* dc0;
    wxDC* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'o' (&dc0)\n");
        #endif

        char parse_parameters_string[] = "o";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dc0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(dc0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxDC_P(dc0)->object_type;
                    argument_native_object = (void*) Z_wxDC_P(dc0)->native_object;
                    object_pointer0_0 = (wxDC*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'dc' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(dc0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'dc' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::CopyAttributes(*(wxDC*) object_pointer0_0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->CopyAttributes(*(wxDC*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->CopyAttributes(*(wxDC*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->CopyAttributes(*(wxDC*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->CopyAttributes(*(wxDC*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->CopyAttributes(*(wxDC*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->CopyAttributes(*(wxDC*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->CopyAttributes(*(wxDC*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->CopyAttributes(*(wxDC*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->CopyAttributes(*(wxDC*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->CopyAttributes(*(wxDC*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->CopyAttributes(*(wxDC*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->CopyAttributes(*(wxDC*) object_pointer0_0);
                }

                references->AddReference(dc0, "wxDC::CopyAttributes at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::CopyAttributes\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::CrossHair(int x, int y)
   Displays a cross hair using the current pen. */
PHP_METHOD(php_wxDC, CrossHair)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::CrossHair\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::CrossHair call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* pt1;
    wxPoint* object_pointer1_0 = 0;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&x0, &y0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&pt1, php_wxPoint_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pt1, php_wxPoint_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(pt1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pt1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pt1)->native_object;
                    object_pointer1_0 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'pt' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pt1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pt' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::CrossHair((wxCoord) x0, (wxCoord) y0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->CrossHair((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->CrossHair((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->CrossHair((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->CrossHair((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->CrossHair((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->CrossHair((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->CrossHair((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->CrossHair((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->CrossHair((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->CrossHair((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->CrossHair((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->CrossHair((wxCoord) x0, (wxCoord) y0);
                }


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::CrossHair(*(wxPoint*) object_pointer1_0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->CrossHair(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->CrossHair(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->CrossHair(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->CrossHair(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->CrossHair(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->CrossHair(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->CrossHair(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->CrossHair(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->CrossHair(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->CrossHair(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->CrossHair(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->CrossHair(*(wxPoint*) object_pointer1_0);
                }

                references->AddReference(pt1, "wxDC::CrossHair at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::CrossHair\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::DestroyClippingRegion()
   Destroys the current clipping region so that none of the DC is clipped. */
PHP_METHOD(php_wxDC, DestroyClippingRegion)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::DestroyClippingRegion\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::DestroyClippingRegion call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DestroyClippingRegion()\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DestroyClippingRegion();
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DestroyClippingRegion();
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DestroyClippingRegion();
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DestroyClippingRegion();
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DestroyClippingRegion();
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DestroyClippingRegion();
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DestroyClippingRegion();
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DestroyClippingRegion();
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DestroyClippingRegion();
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DestroyClippingRegion();
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DestroyClippingRegion();
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DestroyClippingRegion();
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::DestroyClippingRegion\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxDC::DeviceToLogicalX(int x)
   Convert device X coordinate to logical coordinate, using the current mapping mode, user scale factor, device origin and axis orientation. */
PHP_METHOD(php_wxDC, DeviceToLogicalX)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::DeviceToLogicalX\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::DeviceToLogicalX call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&x0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxDC::DeviceToLogicalX((wxCoord) x0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxWindowDC_php*)native_object)->DeviceToLogicalX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxClientDC_php*)native_object)->DeviceToLogicalX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPaintDC_php*)native_object)->DeviceToLogicalX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxScreenDC_php*)native_object)->DeviceToLogicalX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPostScriptDC_php*)native_object)->DeviceToLogicalX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPrinterDC_php*)native_object)->DeviceToLogicalX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMemoryDC_php*)native_object)->DeviceToLogicalX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedDC_php*)native_object)->DeviceToLogicalX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedPaintDC_php*)native_object)->DeviceToLogicalX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxAutoBufferedPaintDC_php*)native_object)->DeviceToLogicalX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMirrorDC_php*)native_object)->DeviceToLogicalX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxDC_php*)native_object)->DeviceToLogicalX((wxCoord) x0));
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::DeviceToLogicalX\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxDC::DeviceToLogicalXRel(int x)
   Convert device X coordinate to relative logical coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation. */
PHP_METHOD(php_wxDC, DeviceToLogicalXRel)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::DeviceToLogicalXRel\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::DeviceToLogicalXRel call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&x0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxDC::DeviceToLogicalXRel((wxCoord) x0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxWindowDC_php*)native_object)->DeviceToLogicalXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxClientDC_php*)native_object)->DeviceToLogicalXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPaintDC_php*)native_object)->DeviceToLogicalXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxScreenDC_php*)native_object)->DeviceToLogicalXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPostScriptDC_php*)native_object)->DeviceToLogicalXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPrinterDC_php*)native_object)->DeviceToLogicalXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMemoryDC_php*)native_object)->DeviceToLogicalXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedDC_php*)native_object)->DeviceToLogicalXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedPaintDC_php*)native_object)->DeviceToLogicalXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxAutoBufferedPaintDC_php*)native_object)->DeviceToLogicalXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMirrorDC_php*)native_object)->DeviceToLogicalXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxDC_php*)native_object)->DeviceToLogicalXRel((wxCoord) x0));
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::DeviceToLogicalXRel\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxDC::DeviceToLogicalY(int y)
   Converts device Y coordinate to logical coordinate, using the current mapping mode, user scale factor, device origin and axis orientation. */
PHP_METHOD(php_wxDC, DeviceToLogicalY)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::DeviceToLogicalY\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::DeviceToLogicalY call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long y0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&y0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &y0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxDC::DeviceToLogicalY((wxCoord) y0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxWindowDC_php*)native_object)->DeviceToLogicalY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxClientDC_php*)native_object)->DeviceToLogicalY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPaintDC_php*)native_object)->DeviceToLogicalY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxScreenDC_php*)native_object)->DeviceToLogicalY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPostScriptDC_php*)native_object)->DeviceToLogicalY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPrinterDC_php*)native_object)->DeviceToLogicalY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMemoryDC_php*)native_object)->DeviceToLogicalY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedDC_php*)native_object)->DeviceToLogicalY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedPaintDC_php*)native_object)->DeviceToLogicalY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxAutoBufferedPaintDC_php*)native_object)->DeviceToLogicalY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMirrorDC_php*)native_object)->DeviceToLogicalY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxDC_php*)native_object)->DeviceToLogicalY((wxCoord) y0));
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::DeviceToLogicalY\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxDC::DeviceToLogicalYRel(int y)
   Convert device Y coordinate to relative logical coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation. */
PHP_METHOD(php_wxDC, DeviceToLogicalYRel)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::DeviceToLogicalYRel\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::DeviceToLogicalYRel call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long y0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&y0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &y0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxDC::DeviceToLogicalYRel((wxCoord) y0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxWindowDC_php*)native_object)->DeviceToLogicalYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxClientDC_php*)native_object)->DeviceToLogicalYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPaintDC_php*)native_object)->DeviceToLogicalYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxScreenDC_php*)native_object)->DeviceToLogicalYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPostScriptDC_php*)native_object)->DeviceToLogicalYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPrinterDC_php*)native_object)->DeviceToLogicalYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMemoryDC_php*)native_object)->DeviceToLogicalYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedDC_php*)native_object)->DeviceToLogicalYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedPaintDC_php*)native_object)->DeviceToLogicalYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxAutoBufferedPaintDC_php*)native_object)->DeviceToLogicalYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMirrorDC_php*)native_object)->DeviceToLogicalYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxDC_php*)native_object)->DeviceToLogicalYRel((wxCoord) y0));
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::DeviceToLogicalYRel\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::DrawArc(int xStart, int yStart, int xEnd, int yEnd, int xc, int yc)
   Draws an arc from the given start to the given end point. */
PHP_METHOD(php_wxDC, DrawArc)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::DrawArc\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::DrawArc call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long xStart0;
    long yStart0;
    long xEnd0;
    long yEnd0;
    long xc0;
    long yc0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* ptStart1;
    wxPoint* object_pointer1_0 = 0;
    zval* ptEnd1;
    wxPoint* object_pointer1_1 = 0;
    zval* centre1;
    wxPoint* object_pointer1_2 = 0;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 6)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'llllll' (&xStart0, &yStart0, &xEnd0, &yEnd0, &xc0, &yc0)\n");
        #endif

        char parse_parameters_string[] = "llllll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &xStart0, &yStart0, &xEnd0, &yEnd0, &xc0, &yc0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'OOO' (&ptStart1, php_wxPoint_entry, &ptEnd1, php_wxPoint_entry, &centre1, php_wxPoint_entry)\n");
        #endif

        char parse_parameters_string[] = "OOO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &ptStart1, php_wxPoint_entry, &ptEnd1, php_wxPoint_entry, &centre1, php_wxPoint_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(ptStart1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(ptStart1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(ptStart1)->native_object;
                    object_pointer1_0 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'ptStart' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(ptStart1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'ptStart' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(ptEnd1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(ptEnd1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(ptEnd1)->native_object;
                    object_pointer1_1 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'ptEnd' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(ptEnd1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'ptEnd' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(centre1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(centre1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(centre1)->native_object;
                    object_pointer1_2 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'centre' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(centre1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'centre' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
                }


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
                }

                references->AddReference(ptStart1, "wxDC::DrawArc at call 3 with 3 argument(s)");
                references->AddReference(ptEnd1, "wxDC::DrawArc at call 3 with 3 argument(s)");
                references->AddReference(centre1, "wxDC::DrawArc at call 3 with 3 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::DrawArc\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::DrawBitmap(wxBitmap bitmap, int x, int y, bool useMask)
   Draw a bitmap on the device context at the specified point. */
PHP_METHOD(php_wxDC, DrawBitmap)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::DrawBitmap\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::DrawBitmap call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* bitmap0;
    wxBitmap* object_pointer0_0 = 0;
    long x0;
    long y0;
    bool useMask0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* bmp1;
    wxBitmap* object_pointer1_0 = 0;
    zval* pt1;
    wxPoint* object_pointer1_1 = 0;
    bool useMask1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 3  && arguments_received <= 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'Oll|b' (&bitmap0, php_wxBitmap_entry, &x0, &y0, &useMask0)\n");
        #endif

        char parse_parameters_string[] = "Oll|b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &bitmap0, php_wxBitmap_entry, &x0, &y0, &useMask0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(bitmap0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap0)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap0)->native_object;
                    object_pointer0_0 = (wxBitmap*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(bitmap0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 2  && arguments_received <= 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'OO|b' (&bmp1, php_wxBitmap_entry, &pt1, php_wxPoint_entry, &useMask1)\n");
        #endif

        char parse_parameters_string[] = "OO|b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &bmp1, php_wxBitmap_entry, &pt1, php_wxPoint_entry, &useMask1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(bmp1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bmp1)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bmp1)->native_object;
                    object_pointer1_0 = (wxBitmap*) argument_native_object;
                    if (!object_pointer1_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'bmp' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(bmp1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'bmp' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(pt1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pt1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pt1)->native_object;
                    object_pointer1_1 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'pt' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pt1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pt' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }

                references->AddReference(bitmap0, "wxDC::DrawBitmap at call 3 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
                }

                references->AddReference(bitmap0, "wxDC::DrawBitmap at call 3 with 4 argument(s)");

                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }

                references->AddReference(bmp1, "wxDC::DrawBitmap at call 3 with 2 argument(s)");
                references->AddReference(pt1, "wxDC::DrawBitmap at call 3 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
                }

                references->AddReference(bmp1, "wxDC::DrawBitmap at call 3 with 3 argument(s)");
                references->AddReference(pt1, "wxDC::DrawBitmap at call 3 with 3 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::DrawBitmap\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::DrawCheckMark(int x, int y, int width, int height)
   Draws a check mark inside the given rectangle. */
PHP_METHOD(php_wxDC, DrawCheckMark)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::DrawCheckMark\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::DrawCheckMark call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    long width0;
    long height0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* rect1;
    wxRect* object_pointer1_0 = 0;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'llll' (&x0, &y0, &width0, &height0)\n");
        #endif

        char parse_parameters_string[] = "llll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0, &width0, &height0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&rect1, php_wxRect_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &rect1, php_wxRect_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(rect1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRect_P(rect1)->object_type;
                    argument_native_object = (void*) Z_wxRect_P(rect1)->native_object;
                    object_pointer1_0 = (wxRect*) argument_native_object;
                    if (!object_pointer1_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'rect' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(rect1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'rect' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawCheckMark(*(wxRect*) object_pointer1_0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawCheckMark(*(wxRect*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawCheckMark(*(wxRect*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawCheckMark(*(wxRect*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawCheckMark(*(wxRect*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawCheckMark(*(wxRect*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawCheckMark(*(wxRect*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawCheckMark(*(wxRect*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawCheckMark(*(wxRect*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawCheckMark(*(wxRect*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawCheckMark(*(wxRect*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawCheckMark(*(wxRect*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawCheckMark(*(wxRect*) object_pointer1_0);
                }

                references->AddReference(rect1, "wxDC::DrawCheckMark at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::DrawCheckMark\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::DrawCircle(int x, int y, int radius)
   Draws a circle with the given centre and radius. */
PHP_METHOD(php_wxDC, DrawCircle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::DrawCircle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::DrawCircle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    long radius0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* pt1;
    wxPoint* object_pointer1_0 = 0;
    long radius1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lll' (&x0, &y0, &radius0)\n");
        #endif

        char parse_parameters_string[] = "lll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0, &radius0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'Ol' (&pt1, php_wxPoint_entry, &radius1)\n");
        #endif

        char parse_parameters_string[] = "Ol";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pt1, php_wxPoint_entry, &radius1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(pt1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pt1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pt1)->native_object;
                    object_pointer1_0 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'pt' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pt1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pt' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
                }


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
                }

                references->AddReference(pt1, "wxDC::DrawCircle at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::DrawCircle\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::DrawEllipse(int x, int y, int width, int height)
   Draws an ellipse contained in the rectangle specified either with the given top left corner and the given size or directly. */
PHP_METHOD(php_wxDC, DrawEllipse)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::DrawEllipse\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::DrawEllipse call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    long width0;
    long height0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* pt1;
    wxPoint* object_pointer1_0 = 0;
    zval* size1;
    wxSize* object_pointer1_1 = 0;
    bool overload1_called = false;

    //Parameters for overload 2
    zval* rect2;
    wxRect* object_pointer2_0 = 0;
    bool overload2_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'llll' (&x0, &y0, &width0, &height0)\n");
        #endif

        char parse_parameters_string[] = "llll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0, &width0, &height0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'OO' (&pt1, php_wxPoint_entry, &size1, php_wxSize_entry)\n");
        #endif

        char parse_parameters_string[] = "OO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pt1, php_wxPoint_entry, &size1, php_wxSize_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(pt1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pt1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pt1)->native_object;
                    object_pointer1_0 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_0 )
                    {
                        goto overload2;
                    }
                }
                else if(Z_TYPE_P(pt1) != IS_NULL)
                {
                    goto overload2;
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(size1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size1)->native_object;
                    object_pointer1_1 = (wxSize*) argument_native_object;
                    if (!object_pointer1_1 )
                    {
                        goto overload2;
                    }
                }
                else if(Z_TYPE_P(size1) != IS_NULL)
                {
                    goto overload2;
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    //Overload 2
    overload2:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&rect2, php_wxRect_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &rect2, php_wxRect_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(rect2) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRect_P(rect2)->object_type;
                    argument_native_object = (void*) Z_wxRect_P(rect2)->native_object;
                    object_pointer2_0 = (wxRect*) argument_native_object;
                    if (!object_pointer2_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'rect' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(rect2) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'rect' not null, could not be retreived correctly.");
                }
            }

            overload2_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }

                references->AddReference(pt1, "wxDC::DrawEllipse at call 3 with 2 argument(s)");
                references->AddReference(size1, "wxDC::DrawEllipse at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    if(overload2_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawEllipse(*(wxRect*) object_pointer2_0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawEllipse(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawEllipse(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawEllipse(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawEllipse(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawEllipse(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawEllipse(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawEllipse(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawEllipse(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawEllipse(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawEllipse(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawEllipse(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawEllipse(*(wxRect*) object_pointer2_0);
                }

                references->AddReference(rect2, "wxDC::DrawEllipse at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::DrawEllipse\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::DrawEllipticArc(int x, int y, int width, int height, float start, float end)
   Draws an arc of an ellipse. */
PHP_METHOD(php_wxDC, DrawEllipticArc)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::DrawEllipticArc\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::DrawEllipticArc call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    long width0;
    long height0;
    double start0;
    double end0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* pt1;
    wxPoint* object_pointer1_0 = 0;
    zval* sz1;
    wxSize* object_pointer1_1 = 0;
    double sa1;
    double ea1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 6)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lllldd' (&x0, &y0, &width0, &height0, &start0, &end0)\n");
        #endif

        char parse_parameters_string[] = "lllldd";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0, &width0, &height0, &start0, &end0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'OOdd' (&pt1, php_wxPoint_entry, &sz1, php_wxSize_entry, &sa1, &ea1)\n");
        #endif

        char parse_parameters_string[] = "OOdd";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pt1, php_wxPoint_entry, &sz1, php_wxSize_entry, &sa1, &ea1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(pt1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pt1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pt1)->native_object;
                    object_pointer1_0 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'pt' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pt1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pt' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(sz1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(sz1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(sz1)->native_object;
                    object_pointer1_1 = (wxSize*) argument_native_object;
                    if (!object_pointer1_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'sz' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(sz1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'sz' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
                }


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
                }

                references->AddReference(pt1, "wxDC::DrawEllipticArc at call 3 with 4 argument(s)");
                references->AddReference(sz1, "wxDC::DrawEllipticArc at call 3 with 4 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::DrawEllipticArc\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::DrawIcon(wxIcon icon, int x, int y)
   Draw an icon on the display (does nothing if the device context is PostScript). */
PHP_METHOD(php_wxDC, DrawIcon)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::DrawIcon\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::DrawIcon call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* icon0;
    wxIcon* object_pointer0_0 = 0;
    long x0;
    long y0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* icon1;
    wxIcon* object_pointer1_0 = 0;
    zval* pt1;
    wxPoint* object_pointer1_1 = 0;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'Oll' (&icon0, php_wxIcon_entry, &x0, &y0)\n");
        #endif

        char parse_parameters_string[] = "Oll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &icon0, php_wxIcon_entry, &x0, &y0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(icon0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxIcon_P(icon0)->object_type;
                    argument_native_object = (void*) Z_wxIcon_P(icon0)->native_object;
                    object_pointer0_0 = (wxIcon*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(icon0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'OO' (&icon1, php_wxIcon_entry, &pt1, php_wxPoint_entry)\n");
        #endif

        char parse_parameters_string[] = "OO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &icon1, php_wxIcon_entry, &pt1, php_wxPoint_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(icon1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxIcon_P(icon1)->object_type;
                    argument_native_object = (void*) Z_wxIcon_P(icon1)->native_object;
                    object_pointer1_0 = (wxIcon*) argument_native_object;
                    if (!object_pointer1_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'icon' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(icon1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'icon' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(pt1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pt1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pt1)->native_object;
                    object_pointer1_1 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'pt' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pt1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pt' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
                }

                references->AddReference(icon0, "wxDC::DrawIcon at call 3 with 3 argument(s)");

                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }

                references->AddReference(icon1, "wxDC::DrawIcon at call 3 with 2 argument(s)");
                references->AddReference(pt1, "wxDC::DrawIcon at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::DrawIcon\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::DrawLabel(string text, wxBitmap bitmap, wxRect rect, int alignment, int indexAccel, wxRect &rectBounding)
   Draw optional bitmap and the text into the given rectangle and aligns it as specified by alignment parameter; it also will emphasize the character with the given index if it is != -1 and return the bounding rectangle if required. */
PHP_METHOD(php_wxDC, DrawLabel)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::DrawLabel\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::DrawLabel call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* text0;
    size_t text_len0;
    zval* bitmap0;
    wxBitmap* object_pointer0_1 = 0;
    zval* rect0;
    wxRect* object_pointer0_2 = 0;
    long alignment0;
    long indexAccel0;
    zval* rectBounding0;
    wxRect* object_pointer0_5 = 0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* text1;
    size_t text_len1;
    zval* rect1;
    wxRect* object_pointer1_1 = 0;
    long alignment1;
    long indexAccel1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 3  && arguments_received <= 6)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sOO|llz' (&text0, &text_len0, &bitmap0, php_wxBitmap_entry, &rect0, php_wxRect_entry, &alignment0, &indexAccel0, &rectBounding0)\n");
        #endif

        char parse_parameters_string[] = "sOO|llz";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &text0, &text_len0, &bitmap0, php_wxBitmap_entry, &rect0, php_wxRect_entry, &alignment0, &indexAccel0, &rectBounding0 ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(bitmap0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap0)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap0)->native_object;
                    object_pointer0_1 = (wxBitmap*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(bitmap0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(rect0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRect_P(rect0)->object_type;
                    argument_native_object = (void*) Z_wxRect_P(rect0)->native_object;
                    object_pointer0_2 = (wxRect*) argument_native_object;
                    if (!object_pointer0_2 )
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(rect0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            if(arguments_received >= 6){
                if(Z_TYPE_P(rectBounding0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRect_P(rectBounding0)->object_type;
                    argument_native_object = (void*) Z_wxRect_P(rectBounding0)->native_object;
                    object_pointer0_5 = (wxRect*) argument_native_object;
                    if (!object_pointer0_5 || (argument_type != PHP_WXRECT_TYPE))
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(rectBounding0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 2  && arguments_received <= 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sO|ll' (&text1, &text_len1, &rect1, php_wxRect_entry, &alignment1, &indexAccel1)\n");
        #endif

        char parse_parameters_string[] = "sO|ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &text1, &text_len1, &rect1, php_wxRect_entry, &alignment1, &indexAccel1 ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(rect1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRect_P(rect1)->object_type;
                    argument_native_object = (void*) Z_wxRect_P(rect1)->native_object;
                    object_pointer1_1 = (wxRect*) argument_native_object;
                    if (!object_pointer1_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'rect' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(rect1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'rect' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
                }

                references->AddReference(bitmap0, "wxDC::DrawLabel at call 3 with 3 argument(s)");
                references->AddReference(rect0, "wxDC::DrawLabel at call 3 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
                }

                references->AddReference(bitmap0, "wxDC::DrawLabel at call 3 with 4 argument(s)");
                references->AddReference(rect0, "wxDC::DrawLabel at call 3 with 4 argument(s)");

                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
                }

                references->AddReference(bitmap0, "wxDC::DrawLabel at call 3 with 5 argument(s)");
                references->AddReference(rect0, "wxDC::DrawLabel at call 3 with 5 argument(s)");

                return;
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
                }

                references->AddReference(bitmap0, "wxDC::DrawLabel at call 3 with 6 argument(s)");
                references->AddReference(rect0, "wxDC::DrawLabel at call 3 with 6 argument(s)");
                references->AddReference(rectBounding0, "wxDC::DrawLabel at call 1 with 6 argument(s)");

                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
                }

                references->AddReference(rect1, "wxDC::DrawLabel at call 3 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
                }

                references->AddReference(rect1, "wxDC::DrawLabel at call 3 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
                }

                references->AddReference(rect1, "wxDC::DrawLabel at call 3 with 4 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::DrawLabel\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::DrawLine(int x1, int y1, int x2, int y2)
   Draws a line from the first point to the second. */
PHP_METHOD(php_wxDC, DrawLine)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::DrawLine\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::DrawLine call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x10;
    long y10;
    long x20;
    long y20;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* pt11;
    wxPoint* object_pointer1_0 = 0;
    zval* pt21;
    wxPoint* object_pointer1_1 = 0;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'llll' (&x10, &y10, &x20, &y20)\n");
        #endif

        char parse_parameters_string[] = "llll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x10, &y10, &x20, &y20 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'OO' (&pt11, php_wxPoint_entry, &pt21, php_wxPoint_entry)\n");
        #endif

        char parse_parameters_string[] = "OO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pt11, php_wxPoint_entry, &pt21, php_wxPoint_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(pt11) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pt11)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pt11)->native_object;
                    object_pointer1_0 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'pt1' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pt11) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pt1' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(pt21) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pt21)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pt21)->native_object;
                    object_pointer1_1 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'pt2' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pt21) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pt2' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
                }


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
                }

                references->AddReference(pt11, "wxDC::DrawLine at call 3 with 2 argument(s)");
                references->AddReference(pt21, "wxDC::DrawLine at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::DrawLine\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::DrawPoint(int x, int y)
   Draws a point using the color of the current pen. */
PHP_METHOD(php_wxDC, DrawPoint)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::DrawPoint\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::DrawPoint call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* pt1;
    wxPoint* object_pointer1_0 = 0;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&x0, &y0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&pt1, php_wxPoint_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pt1, php_wxPoint_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(pt1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pt1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pt1)->native_object;
                    object_pointer1_0 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'pt' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pt1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pt' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawPoint((wxCoord) x0, (wxCoord) y0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawPoint((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawPoint((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawPoint((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawPoint((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawPoint((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawPoint((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawPoint((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawPoint((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawPoint((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawPoint((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawPoint((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawPoint((wxCoord) x0, (wxCoord) y0);
                }


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawPoint(*(wxPoint*) object_pointer1_0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawPoint(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawPoint(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawPoint(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawPoint(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawPoint(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawPoint(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawPoint(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawPoint(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawPoint(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawPoint(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawPoint(*(wxPoint*) object_pointer1_0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawPoint(*(wxPoint*) object_pointer1_0);
                }

                references->AddReference(pt1, "wxDC::DrawPoint at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::DrawPoint\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::DrawRectangle(int x, int y, int width, int height)
   Draws a rectangle with the given corner coordinate and size. */
PHP_METHOD(php_wxDC, DrawRectangle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::DrawRectangle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::DrawRectangle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    long width0;
    long height0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* pt1;
    wxPoint* object_pointer1_0 = 0;
    zval* sz1;
    wxSize* object_pointer1_1 = 0;
    bool overload1_called = false;

    //Parameters for overload 2
    zval* rect2;
    wxRect* object_pointer2_0 = 0;
    bool overload2_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'llll' (&x0, &y0, &width0, &height0)\n");
        #endif

        char parse_parameters_string[] = "llll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0, &width0, &height0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'OO' (&pt1, php_wxPoint_entry, &sz1, php_wxSize_entry)\n");
        #endif

        char parse_parameters_string[] = "OO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pt1, php_wxPoint_entry, &sz1, php_wxSize_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(pt1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pt1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pt1)->native_object;
                    object_pointer1_0 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_0 )
                    {
                        goto overload2;
                    }
                }
                else if(Z_TYPE_P(pt1) != IS_NULL)
                {
                    goto overload2;
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(sz1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(sz1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(sz1)->native_object;
                    object_pointer1_1 = (wxSize*) argument_native_object;
                    if (!object_pointer1_1 )
                    {
                        goto overload2;
                    }
                }
                else if(Z_TYPE_P(sz1) != IS_NULL)
                {
                    goto overload2;
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    //Overload 2
    overload2:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&rect2, php_wxRect_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &rect2, php_wxRect_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(rect2) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRect_P(rect2)->object_type;
                    argument_native_object = (void*) Z_wxRect_P(rect2)->native_object;
                    object_pointer2_0 = (wxRect*) argument_native_object;
                    if (!object_pointer2_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'rect' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(rect2) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'rect' not null, could not be retreived correctly.");
                }
            }

            overload2_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }

                references->AddReference(pt1, "wxDC::DrawRectangle at call 3 with 2 argument(s)");
                references->AddReference(sz1, "wxDC::DrawRectangle at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    if(overload2_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawRectangle(*(wxRect*) object_pointer2_0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawRectangle(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawRectangle(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawRectangle(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawRectangle(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawRectangle(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawRectangle(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawRectangle(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawRectangle(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawRectangle(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawRectangle(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawRectangle(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawRectangle(*(wxRect*) object_pointer2_0);
                }

                references->AddReference(rect2, "wxDC::DrawRectangle at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::DrawRectangle\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::DrawRotatedText(string text, int x, int y, float angle)
   Draws the text rotated by angle degrees (positive angles are counterclockwise; the full angle is 360 degrees). */
PHP_METHOD(php_wxDC, DrawRotatedText)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::DrawRotatedText\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::DrawRotatedText call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* text0;
    size_t text_len0;
    long x0;
    long y0;
    double angle0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* text1;
    size_t text_len1;
    zval* point1;
    wxPoint* object_pointer1_1 = 0;
    double angle1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'slld' (&text0, &text_len0, &x0, &y0, &angle0)\n");
        #endif

        char parse_parameters_string[] = "slld";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &text0, &text_len0, &x0, &y0, &angle0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sOd' (&text1, &text_len1, &point1, php_wxPoint_entry, &angle1)\n");
        #endif

        char parse_parameters_string[] = "sOd";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &text1, &text_len1, &point1, php_wxPoint_entry, &angle1 ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(point1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(point1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(point1)->native_object;
                    object_pointer1_1 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'point' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(point1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'point' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
                }


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
                }

                references->AddReference(point1, "wxDC::DrawRotatedText at call 3 with 3 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::DrawRotatedText\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::DrawRoundedRectangle(int x, int y, int width, int height, float radius)
   Draws a rectangle with the given top left corner, and with the given size. */
PHP_METHOD(php_wxDC, DrawRoundedRectangle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::DrawRoundedRectangle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::DrawRoundedRectangle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    long width0;
    long height0;
    double radius0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* pt1;
    wxPoint* object_pointer1_0 = 0;
    zval* sz1;
    wxSize* object_pointer1_1 = 0;
    double radius1;
    bool overload1_called = false;

    //Parameters for overload 2
    zval* rect2;
    wxRect* object_pointer2_0 = 0;
    double radius2;
    bool overload2_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 5)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lllld' (&x0, &y0, &width0, &height0, &radius0)\n");
        #endif

        char parse_parameters_string[] = "lllld";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0, &width0, &height0, &radius0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'OOd' (&pt1, php_wxPoint_entry, &sz1, php_wxSize_entry, &radius1)\n");
        #endif

        char parse_parameters_string[] = "OOd";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pt1, php_wxPoint_entry, &sz1, php_wxSize_entry, &radius1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(pt1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pt1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pt1)->native_object;
                    object_pointer1_0 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_0 )
                    {
                        goto overload2;
                    }
                }
                else if(Z_TYPE_P(pt1) != IS_NULL)
                {
                    goto overload2;
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(sz1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(sz1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(sz1)->native_object;
                    object_pointer1_1 = (wxSize*) argument_native_object;
                    if (!object_pointer1_1 )
                    {
                        goto overload2;
                    }
                }
                else if(Z_TYPE_P(sz1) != IS_NULL)
                {
                    goto overload2;
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    //Overload 2
    overload2:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'Od' (&rect2, php_wxRect_entry, &radius2)\n");
        #endif

        char parse_parameters_string[] = "Od";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &rect2, php_wxRect_entry, &radius2 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(rect2) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRect_P(rect2)->object_type;
                    argument_native_object = (void*) Z_wxRect_P(rect2)->native_object;
                    object_pointer2_0 = (wxRect*) argument_native_object;
                    if (!object_pointer2_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'rect' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(rect2) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'rect' not null, could not be retreived correctly.");
                }
            }

            overload2_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
                }


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
                }

                references->AddReference(pt1, "wxDC::DrawRoundedRectangle at call 3 with 3 argument(s)");
                references->AddReference(sz1, "wxDC::DrawRoundedRectangle at call 3 with 3 argument(s)");

                return;
                break;
            }
        }
    }

    if(overload2_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
                }

                references->AddReference(rect2, "wxDC::DrawRoundedRectangle at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::DrawRoundedRectangle\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::DrawSpline(int x1, int y1, int x2, int y2, int x3, int y3)
   This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. */
PHP_METHOD(php_wxDC, DrawSpline)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::DrawSpline\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::DrawSpline call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x10;
    long y10;
    long x20;
    long y20;
    long x30;
    long y30;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 6)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'llllll' (&x10, &y10, &x20, &y20, &x30, &y30)\n");
        #endif

        char parse_parameters_string[] = "llllll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x10, &y10, &x20, &y20, &x30, &y30 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::DrawSpline\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::DrawText(string text, int x, int y)
   Draws a text string at the specified point, using the current text font, and the current text foreground and background colours. */
PHP_METHOD(php_wxDC, DrawText)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::DrawText\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::DrawText call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* text0;
    size_t text_len0;
    long x0;
    long y0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* text1;
    size_t text_len1;
    zval* pt1;
    wxPoint* object_pointer1_1 = 0;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sll' (&text0, &text_len0, &x0, &y0)\n");
        #endif

        char parse_parameters_string[] = "sll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &text0, &text_len0, &x0, &y0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sO' (&text1, &text_len1, &pt1, php_wxPoint_entry)\n");
        #endif

        char parse_parameters_string[] = "sO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &text1, &text_len1, &pt1, php_wxPoint_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(pt1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pt1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pt1)->native_object;
                    object_pointer1_1 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'pt' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pt1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pt' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
                }


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
                }

                references->AddReference(pt1, "wxDC::DrawText at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::DrawText\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::EndDoc()
   Ends a document (only relevant when outputting to a printer). */
PHP_METHOD(php_wxDC, EndDoc)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::EndDoc\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::EndDoc call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::EndDoc()\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->EndDoc();
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->EndDoc();
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->EndDoc();
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->EndDoc();
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->EndDoc();
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->EndDoc();
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->EndDoc();
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->EndDoc();
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->EndDoc();
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->EndDoc();
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->EndDoc();
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->EndDoc();
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::EndDoc\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::EndPage()
   Ends a document page (only relevant when outputting to a printer). */
PHP_METHOD(php_wxDC, EndPage)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::EndPage\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::EndPage call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::EndPage()\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->EndPage();
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->EndPage();
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->EndPage();
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->EndPage();
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->EndPage();
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->EndPage();
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->EndPage();
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->EndPage();
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->EndPage();
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->EndPage();
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->EndPage();
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->EndPage();
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::EndPage\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxDC::FloodFill(int x, int y, wxColour colour, wxFloodFillStyle style)
   Flood fills the device context starting from the given point, using the current brush colour, and using a style: */
PHP_METHOD(php_wxDC, FloodFill)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::FloodFill\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::FloodFill call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    zval* colour0;
    wxColour* object_pointer0_2 = 0;
    long style0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* pt1;
    wxPoint* object_pointer1_0 = 0;
    zval* col1;
    wxColour* object_pointer1_1 = 0;
    long style1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 3  && arguments_received <= 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'llO|l' (&x0, &y0, &colour0, php_wxColour_entry, &style0)\n");
        #endif

        char parse_parameters_string[] = "llO|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0, &colour0, php_wxColour_entry, &style0 ) == SUCCESS)
        {
            if(arguments_received >= 3){
                if(Z_TYPE_P(colour0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(colour0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(colour0)->native_object;
                    object_pointer0_2 = (wxColour*) argument_native_object;
                    if (!object_pointer0_2 )
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(colour0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 2  && arguments_received <= 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'OO|l' (&pt1, php_wxPoint_entry, &col1, php_wxColour_entry, &style1)\n");
        #endif

        char parse_parameters_string[] = "OO|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pt1, php_wxPoint_entry, &col1, php_wxColour_entry, &style1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(pt1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pt1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pt1)->native_object;
                    object_pointer1_0 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'pt' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pt1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pt' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(col1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(col1)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(col1)->native_object;
                    object_pointer1_1 = (wxColour*) argument_native_object;
                    if (!object_pointer1_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'col' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(col1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'col' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDC::FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxWindowDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxClientDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPaintDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxScreenDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPostScriptDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPrinterDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMemoryDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedPaintDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxAutoBufferedPaintDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMirrorDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
                }

                references->AddReference(colour0, "wxDC::FloodFill at call 3 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDC::FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxWindowDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxClientDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPaintDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxScreenDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPostScriptDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPrinterDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMemoryDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedPaintDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxAutoBufferedPaintDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMirrorDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxDC_php*)native_object)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
                }

                references->AddReference(colour0, "wxDC::FloodFill at call 3 with 4 argument(s)");

                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDC::FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxWindowDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxClientDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPaintDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxScreenDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPostScriptDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPrinterDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMemoryDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedPaintDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxAutoBufferedPaintDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMirrorDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
                }

                references->AddReference(pt1, "wxDC::FloodFill at call 3 with 2 argument(s)");
                references->AddReference(col1, "wxDC::FloodFill at call 3 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDC::FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxWindowDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxClientDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPaintDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxScreenDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPostScriptDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPrinterDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMemoryDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedPaintDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxAutoBufferedPaintDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMirrorDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxDC_php*)native_object)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
                }

                references->AddReference(pt1, "wxDC::FloodFill at call 3 with 3 argument(s)");
                references->AddReference(col1, "wxDC::FloodFill at call 3 with 3 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::FloodFill\n"
        );
    }
}
/* }}} */

/* {{{ proto wxBrush wxDC::GetBackground()
   Gets the brush used for painting the background. */
PHP_METHOD(php_wxDC, GetBackground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetBackground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetBackground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetBackground() to return object reference\n\n");
                #endif

                wxBrush_php* value_to_return0;
                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxWindowDC_php*)native_object)->GetBackground();

                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxClientDC_php*)native_object)->GetBackground();

                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxPaintDC_php*)native_object)->GetBackground();

                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxScreenDC_php*)native_object)->GetBackground();

                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxPostScriptDC_php*)native_object)->GetBackground();

                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxPrinterDC_php*)native_object)->GetBackground();

                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxMemoryDC_php*)native_object)->GetBackground();

                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxBufferedDC_php*)native_object)->GetBackground();

                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxBufferedPaintDC_php*)native_object)->GetBackground();

                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxAutoBufferedPaintDC_php*)native_object)->GetBackground();

                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxMirrorDC_php*)native_object)->GetBackground();

                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxDC_php*)native_object)->GetBackground();

                }
                if(value_to_return0->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return0->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return0->phpObj);
                        zval_add_ref(&value_to_return0->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value,php_wxBrush_entry);
                    Z_wxBrush_P(return_value)->native_object = (wxBrush_php*) value_to_return0;
                }

                if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
                    references->AddReference(return_value, "wxDC::GetBackground at call 6 with 0 argument(s)");
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetBackground\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxDC::GetBackgroundMode()
   Returns the current background mode: wxBRUSHSTYLE_SOLID or wxBRUSHSTYLE_TRANSPARENT. */
PHP_METHOD(php_wxDC, GetBackgroundMode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetBackgroundMode\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetBackgroundMode call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxDC::GetBackgroundMode())\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxWindowDC_php*)native_object)->GetBackgroundMode());
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxClientDC_php*)native_object)->GetBackgroundMode());
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPaintDC_php*)native_object)->GetBackgroundMode());
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxScreenDC_php*)native_object)->GetBackgroundMode());
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPostScriptDC_php*)native_object)->GetBackgroundMode());
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPrinterDC_php*)native_object)->GetBackgroundMode());
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMemoryDC_php*)native_object)->GetBackgroundMode());
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedDC_php*)native_object)->GetBackgroundMode());
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedPaintDC_php*)native_object)->GetBackgroundMode());
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxAutoBufferedPaintDC_php*)native_object)->GetBackgroundMode());
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMirrorDC_php*)native_object)->GetBackgroundMode());
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxDC_php*)native_object)->GetBackgroundMode());
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetBackgroundMode\n"
        );
    }
}
/* }}} */

/* {{{ proto wxBrush wxDC::GetBrush()
   Gets the current brush. */
PHP_METHOD(php_wxDC, GetBrush)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetBrush\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetBrush call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetBrush() to return object reference\n\n");
                #endif

                wxBrush_php* value_to_return0;
                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxWindowDC_php*)native_object)->GetBrush();

                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxClientDC_php*)native_object)->GetBrush();

                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxPaintDC_php*)native_object)->GetBrush();

                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxScreenDC_php*)native_object)->GetBrush();

                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxPostScriptDC_php*)native_object)->GetBrush();

                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxPrinterDC_php*)native_object)->GetBrush();

                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxMemoryDC_php*)native_object)->GetBrush();

                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxBufferedDC_php*)native_object)->GetBrush();

                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxBufferedPaintDC_php*)native_object)->GetBrush();

                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxAutoBufferedPaintDC_php*)native_object)->GetBrush();

                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxMirrorDC_php*)native_object)->GetBrush();

                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    value_to_return0 = (wxBrush_php*) &((wxDC_php*)native_object)->GetBrush();

                }
                if(value_to_return0->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return0->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return0->phpObj);
                        zval_add_ref(&value_to_return0->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value,php_wxBrush_entry);
                    Z_wxBrush_P(return_value)->native_object = (wxBrush_php*) value_to_return0;
                }

                if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
                    references->AddReference(return_value, "wxDC::GetBrush at call 6 with 0 argument(s)");
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetBrush\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxDC::GetCharHeight()
   Gets the character height of the currently set font. */
PHP_METHOD(php_wxDC, GetCharHeight)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetCharHeight\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetCharHeight call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxDC::GetCharHeight())\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxWindowDC_php*)native_object)->GetCharHeight());
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxClientDC_php*)native_object)->GetCharHeight());
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPaintDC_php*)native_object)->GetCharHeight());
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxScreenDC_php*)native_object)->GetCharHeight());
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPostScriptDC_php*)native_object)->GetCharHeight());
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPrinterDC_php*)native_object)->GetCharHeight());
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMemoryDC_php*)native_object)->GetCharHeight());
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedDC_php*)native_object)->GetCharHeight());
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedPaintDC_php*)native_object)->GetCharHeight());
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxAutoBufferedPaintDC_php*)native_object)->GetCharHeight());
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMirrorDC_php*)native_object)->GetCharHeight());
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxDC_php*)native_object)->GetCharHeight());
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetCharHeight\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxDC::GetCharWidth()
   Gets the average character width of the currently set font. */
PHP_METHOD(php_wxDC, GetCharWidth)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetCharWidth\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetCharWidth call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxDC::GetCharWidth())\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxWindowDC_php*)native_object)->GetCharWidth());
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxClientDC_php*)native_object)->GetCharWidth());
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPaintDC_php*)native_object)->GetCharWidth());
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxScreenDC_php*)native_object)->GetCharWidth());
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPostScriptDC_php*)native_object)->GetCharWidth());
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPrinterDC_php*)native_object)->GetCharWidth());
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMemoryDC_php*)native_object)->GetCharWidth());
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedDC_php*)native_object)->GetCharWidth());
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedPaintDC_php*)native_object)->GetCharWidth());
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxAutoBufferedPaintDC_php*)native_object)->GetCharWidth());
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMirrorDC_php*)native_object)->GetCharWidth());
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxDC_php*)native_object)->GetCharWidth());
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetCharWidth\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxDC::GetClippingBox(int x, int y, int width, int height)
   Gets the rectangle surrounding the current clipping region. */
PHP_METHOD(php_wxDC, GetClippingBox)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetClippingBox\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetClippingBox call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    long width0;
    long height0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* rect1;
    wxRect* object_pointer1_0 = 0;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'llll' (&x0, &y0, &width0, &height0)\n");
        #endif

        char parse_parameters_string[] = "llll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0, &width0, &height0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&rect1, php_wxRect_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &rect1, php_wxRect_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(rect1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRect_P(rect1)->object_type;
                    argument_native_object = (void*) Z_wxRect_P(rect1)->native_object;
                    object_pointer1_0 = (wxRect*) argument_native_object;
                    if (!object_pointer1_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'rect' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(rect1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'rect' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDC::GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxWindowDC_php*)native_object)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxClientDC_php*)native_object)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPaintDC_php*)native_object)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxScreenDC_php*)native_object)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPostScriptDC_php*)native_object)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPrinterDC_php*)native_object)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMemoryDC_php*)native_object)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedDC_php*)native_object)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedPaintDC_php*)native_object)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxAutoBufferedPaintDC_php*)native_object)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMirrorDC_php*)native_object)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxDC_php*)native_object)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0));
                }


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDC::GetClippingBox(*(wxRect*) object_pointer1_0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxWindowDC_php*)native_object)->GetClippingBox(*(wxRect*) object_pointer1_0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxClientDC_php*)native_object)->GetClippingBox(*(wxRect*) object_pointer1_0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPaintDC_php*)native_object)->GetClippingBox(*(wxRect*) object_pointer1_0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxScreenDC_php*)native_object)->GetClippingBox(*(wxRect*) object_pointer1_0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPostScriptDC_php*)native_object)->GetClippingBox(*(wxRect*) object_pointer1_0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPrinterDC_php*)native_object)->GetClippingBox(*(wxRect*) object_pointer1_0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMemoryDC_php*)native_object)->GetClippingBox(*(wxRect*) object_pointer1_0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedDC_php*)native_object)->GetClippingBox(*(wxRect*) object_pointer1_0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedPaintDC_php*)native_object)->GetClippingBox(*(wxRect*) object_pointer1_0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxAutoBufferedPaintDC_php*)native_object)->GetClippingBox(*(wxRect*) object_pointer1_0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMirrorDC_php*)native_object)->GetClippingBox(*(wxRect*) object_pointer1_0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxDC_php*)native_object)->GetClippingBox(*(wxRect*) object_pointer1_0));
                }

                references->AddReference(rect1, "wxDC::GetClippingBox at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetClippingBox\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxDC::GetDepth()
   Returns the depth (number of bits/pixel) of this DC. */
PHP_METHOD(php_wxDC, GetDepth)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetDepth\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetDepth call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxDC::GetDepth())\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxWindowDC_php*)native_object)->GetDepth());
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxClientDC_php*)native_object)->GetDepth());
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPaintDC_php*)native_object)->GetDepth());
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxScreenDC_php*)native_object)->GetDepth());
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPostScriptDC_php*)native_object)->GetDepth());
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPrinterDC_php*)native_object)->GetDepth());
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMemoryDC_php*)native_object)->GetDepth());
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedDC_php*)native_object)->GetDepth());
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedPaintDC_php*)native_object)->GetDepth());
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxAutoBufferedPaintDC_php*)native_object)->GetDepth());
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMirrorDC_php*)native_object)->GetDepth());
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxDC_php*)native_object)->GetDepth());
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetDepth\n"
        );
    }
}
/* }}} */

/* {{{ proto wxPoint wxDC::GetDeviceOrigin()
   Returns the current device origin. */
PHP_METHOD(php_wxDC, GetDeviceOrigin)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetDeviceOrigin\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetDeviceOrigin call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetDeviceOrigin() to return new object\n\n");
                #endif

                wxPoint value_to_return0;
                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    value_to_return0 = ((wxWindowDC_php*)native_object)->GetDeviceOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    value_to_return0 = ((wxClientDC_php*)native_object)->GetDeviceOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    value_to_return0 = ((wxPaintDC_php*)native_object)->GetDeviceOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    value_to_return0 = ((wxScreenDC_php*)native_object)->GetDeviceOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    value_to_return0 = ((wxPostScriptDC_php*)native_object)->GetDeviceOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    value_to_return0 = ((wxPrinterDC_php*)native_object)->GetDeviceOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    value_to_return0 = ((wxMemoryDC_php*)native_object)->GetDeviceOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    value_to_return0 = ((wxBufferedDC_php*)native_object)->GetDeviceOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = ((wxBufferedPaintDC_php*)native_object)->GetDeviceOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = ((wxAutoBufferedPaintDC_php*)native_object)->GetDeviceOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    value_to_return0 = ((wxMirrorDC_php*)native_object)->GetDeviceOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    value_to_return0 = ((wxDC_php*)native_object)->GetDeviceOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetDeviceOrigin\n"
        );
    }
}
/* }}} */

/* {{{ proto wxFont wxDC::GetFont()
   Gets the current font. */
PHP_METHOD(php_wxDC, GetFont)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetFont\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetFont call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetFont() to return object reference\n\n");
                #endif

                wxFont_php* value_to_return0;
                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    value_to_return0 = (wxFont_php*) &((wxWindowDC_php*)native_object)->GetFont();

                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    value_to_return0 = (wxFont_php*) &((wxClientDC_php*)native_object)->GetFont();

                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    value_to_return0 = (wxFont_php*) &((wxPaintDC_php*)native_object)->GetFont();

                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    value_to_return0 = (wxFont_php*) &((wxScreenDC_php*)native_object)->GetFont();

                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    value_to_return0 = (wxFont_php*) &((wxPostScriptDC_php*)native_object)->GetFont();

                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    value_to_return0 = (wxFont_php*) &((wxPrinterDC_php*)native_object)->GetFont();

                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    value_to_return0 = (wxFont_php*) &((wxMemoryDC_php*)native_object)->GetFont();

                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    value_to_return0 = (wxFont_php*) &((wxBufferedDC_php*)native_object)->GetFont();

                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = (wxFont_php*) &((wxBufferedPaintDC_php*)native_object)->GetFont();

                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = (wxFont_php*) &((wxAutoBufferedPaintDC_php*)native_object)->GetFont();

                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    value_to_return0 = (wxFont_php*) &((wxMirrorDC_php*)native_object)->GetFont();

                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    value_to_return0 = (wxFont_php*) &((wxDC_php*)native_object)->GetFont();

                }
                if(value_to_return0->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return0->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return0->phpObj);
                        zval_add_ref(&value_to_return0->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value,php_wxFont_entry);
                    Z_wxFont_P(return_value)->native_object = (wxFont_php*) value_to_return0;
                }

                if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
                    references->AddReference(return_value, "wxDC::GetFont at call 6 with 0 argument(s)");
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetFont\n"
        );
    }
}
/* }}} */

/* {{{ proto wxLayoutDirection wxDC::GetLayoutDirection()
   Gets the current layout direction of the device context. */
PHP_METHOD(php_wxDC, GetLayoutDirection)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetLayoutDirection\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetLayoutDirection call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxDC::GetLayoutDirection())\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxWindowDC_php*)native_object)->GetLayoutDirection());
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxClientDC_php*)native_object)->GetLayoutDirection());
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPaintDC_php*)native_object)->GetLayoutDirection());
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxScreenDC_php*)native_object)->GetLayoutDirection());
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPostScriptDC_php*)native_object)->GetLayoutDirection());
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPrinterDC_php*)native_object)->GetLayoutDirection());
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMemoryDC_php*)native_object)->GetLayoutDirection());
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedDC_php*)native_object)->GetLayoutDirection());
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedPaintDC_php*)native_object)->GetLayoutDirection());
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxAutoBufferedPaintDC_php*)native_object)->GetLayoutDirection());
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMirrorDC_php*)native_object)->GetLayoutDirection());
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxDC_php*)native_object)->GetLayoutDirection());
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetLayoutDirection\n"
        );
    }
}
/* }}} */

/* {{{ proto wxRasterOperationMode wxDC::GetLogicalFunction()
   Gets the current logical function. */
PHP_METHOD(php_wxDC, GetLogicalFunction)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetLogicalFunction\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetLogicalFunction call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxDC::GetLogicalFunction())\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxWindowDC_php*)native_object)->GetLogicalFunction());
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxClientDC_php*)native_object)->GetLogicalFunction());
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPaintDC_php*)native_object)->GetLogicalFunction());
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxScreenDC_php*)native_object)->GetLogicalFunction());
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPostScriptDC_php*)native_object)->GetLogicalFunction());
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPrinterDC_php*)native_object)->GetLogicalFunction());
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMemoryDC_php*)native_object)->GetLogicalFunction());
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedDC_php*)native_object)->GetLogicalFunction());
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedPaintDC_php*)native_object)->GetLogicalFunction());
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxAutoBufferedPaintDC_php*)native_object)->GetLogicalFunction());
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMirrorDC_php*)native_object)->GetLogicalFunction());
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxDC_php*)native_object)->GetLogicalFunction());
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetLogicalFunction\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::GetLogicalOrigin(int x, int y)
   Return the coordinates of the logical point (0, 0). */
PHP_METHOD(php_wxDC, GetLogicalOrigin)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetLogicalOrigin\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetLogicalOrigin call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    bool overload0_called = false;

    //Parameters for overload 1
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&x0, &y0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload1_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
                }


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetLogicalOrigin() to return new object\n\n");
                #endif

                wxPoint value_to_return0;
                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    value_to_return0 = ((wxWindowDC_php*)native_object)->GetLogicalOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    value_to_return0 = ((wxClientDC_php*)native_object)->GetLogicalOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    value_to_return0 = ((wxPaintDC_php*)native_object)->GetLogicalOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    value_to_return0 = ((wxScreenDC_php*)native_object)->GetLogicalOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    value_to_return0 = ((wxPostScriptDC_php*)native_object)->GetLogicalOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    value_to_return0 = ((wxPrinterDC_php*)native_object)->GetLogicalOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    value_to_return0 = ((wxMemoryDC_php*)native_object)->GetLogicalOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    value_to_return0 = ((wxBufferedDC_php*)native_object)->GetLogicalOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = ((wxBufferedPaintDC_php*)native_object)->GetLogicalOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = ((wxAutoBufferedPaintDC_php*)native_object)->GetLogicalOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    value_to_return0 = ((wxMirrorDC_php*)native_object)->GetLogicalOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    value_to_return0 = ((wxDC_php*)native_object)->GetLogicalOrigin();
                    void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                    object_init_ex(return_value, php_wxPoint_entry);
                    ((wxPoint_php*)ptr)->phpObj = *return_value;
                    zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                    zo0->native_object = (wxPoint_php*) ptr;
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetLogicalOrigin\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::GetLogicalScale(float &x, float &y)
   Return the scale set by the last call to SetLogicalScale(). */
PHP_METHOD(php_wxDC, GetLogicalScale)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetLogicalScale\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetLogicalScale call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    double* x0;
    zval x0_ref;
    double* y0;
    zval y0_ref;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'dd' (x0, y0)\n");
        #endif

        char parse_parameters_string[] = "dd";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, x0, y0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, x0_ref, y0_ref );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetLogicalScale(x0, y0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->GetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->GetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->GetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->GetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->GetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->GetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->GetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->GetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->GetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->GetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->GetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->GetLogicalScale(x0, y0);
                }

                size_t elements_returned0_0 = sizeof(x0)/sizeof(*x0);
                array_init(&x0_ref);
                for(size_t i=0; i<elements_returned0_0; i++)
                {
                    add_next_index_long(&x0_ref, x0[i]);
                }
                size_t elements_returned0_1 = sizeof(y0)/sizeof(*y0);
                array_init(&y0_ref);
                for(size_t i=0; i<elements_returned0_1; i++)
                {
                    add_next_index_long(&y0_ref, y0[i]);
                }

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetLogicalScale\n"
        );
    }
}
/* }}} */

/* {{{ proto wxMappingMode wxDC::GetMapMode()
   Gets the current mapping mode for the device context. */
PHP_METHOD(php_wxDC, GetMapMode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetMapMode\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetMapMode call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxDC::GetMapMode())\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxWindowDC_php*)native_object)->GetMapMode());
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxClientDC_php*)native_object)->GetMapMode());
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPaintDC_php*)native_object)->GetMapMode());
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxScreenDC_php*)native_object)->GetMapMode());
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPostScriptDC_php*)native_object)->GetMapMode());
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPrinterDC_php*)native_object)->GetMapMode());
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMemoryDC_php*)native_object)->GetMapMode());
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedDC_php*)native_object)->GetMapMode());
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedPaintDC_php*)native_object)->GetMapMode());
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxAutoBufferedPaintDC_php*)native_object)->GetMapMode());
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMirrorDC_php*)native_object)->GetMapMode());
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxDC_php*)native_object)->GetMapMode());
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetMapMode\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::GetMultiLineTextExtent(string string, int w, int h, int heightLine, wxFont font)
   Gets the dimensions of the string using the currently selected font. */
PHP_METHOD(php_wxDC, GetMultiLineTextExtent)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetMultiLineTextExtent\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetMultiLineTextExtent call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* string0;
    size_t string_len0;
    long w0;
    long h0;
    long heightLine0;
    zval* font0;
    wxFont* object_pointer0_4 = 0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* string1;
    size_t string_len1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 3  && arguments_received <= 5)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sll|lz' (&string0, &string_len0, &w0, &h0, &heightLine0, &font0)\n");
        #endif

        char parse_parameters_string[] = "sll|lz";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &string0, &string_len0, &w0, &h0, &heightLine0, &font0 ) == SUCCESS)
        {
            if(arguments_received >= 5){
                if(Z_TYPE_P(font0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxFont_P(font0)->object_type;
                    argument_native_object = (void*) Z_wxFont_P(font0)->native_object;
                    object_pointer0_4 = (wxFont*) argument_native_object;
                    if (!object_pointer0_4 || (argument_type != PHP_WXFONT_TYPE))
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(font0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&string1, &string_len1)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &string1, &string_len1 ) == SUCCESS)
        {
            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }


                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
                }


                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
                }

                references->AddReference(font0, "wxDC::GetMultiLineTextExtent at call 1 with 5 argument(s)");

                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetMultiLineTextExtent(wxString(string1, wxConvUTF8)) to return new object\n\n");
                #endif

                wxSize value_to_return1;
                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    value_to_return1 = ((wxWindowDC_php*)native_object)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    value_to_return1 = ((wxClientDC_php*)native_object)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    value_to_return1 = ((wxPaintDC_php*)native_object)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    value_to_return1 = ((wxScreenDC_php*)native_object)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    value_to_return1 = ((wxPostScriptDC_php*)native_object)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    value_to_return1 = ((wxPrinterDC_php*)native_object)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    value_to_return1 = ((wxMemoryDC_php*)native_object)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    value_to_return1 = ((wxBufferedDC_php*)native_object)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return1 = ((wxBufferedPaintDC_php*)native_object)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return1 = ((wxAutoBufferedPaintDC_php*)native_object)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    value_to_return1 = ((wxMirrorDC_php*)native_object)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    value_to_return1 = ((wxDC_php*)native_object)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetMultiLineTextExtent\n"
        );
    }
}
/* }}} */

/* {{{ proto wxSize wxDC::GetPPI()
   Returns the resolution of the device in pixels per inch. */
PHP_METHOD(php_wxDC, GetPPI)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetPPI\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetPPI call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetPPI() to return new object\n\n");
                #endif

                wxSize value_to_return0;
                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    value_to_return0 = ((wxWindowDC_php*)native_object)->GetPPI();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    value_to_return0 = ((wxClientDC_php*)native_object)->GetPPI();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    value_to_return0 = ((wxPaintDC_php*)native_object)->GetPPI();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    value_to_return0 = ((wxScreenDC_php*)native_object)->GetPPI();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    value_to_return0 = ((wxPostScriptDC_php*)native_object)->GetPPI();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    value_to_return0 = ((wxPrinterDC_php*)native_object)->GetPPI();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    value_to_return0 = ((wxMemoryDC_php*)native_object)->GetPPI();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    value_to_return0 = ((wxBufferedDC_php*)native_object)->GetPPI();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = ((wxBufferedPaintDC_php*)native_object)->GetPPI();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = ((wxAutoBufferedPaintDC_php*)native_object)->GetPPI();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    value_to_return0 = ((wxMirrorDC_php*)native_object)->GetPPI();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    value_to_return0 = ((wxDC_php*)native_object)->GetPPI();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetPPI\n"
        );
    }
}
/* }}} */

/* {{{ proto wxPen wxDC::GetPen()
   Gets the current pen. */
PHP_METHOD(php_wxDC, GetPen)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetPen\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetPen call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetPen() to return object reference\n\n");
                #endif

                wxPen_php* value_to_return0;
                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    value_to_return0 = (wxPen_php*) &((wxWindowDC_php*)native_object)->GetPen();

                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    value_to_return0 = (wxPen_php*) &((wxClientDC_php*)native_object)->GetPen();

                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    value_to_return0 = (wxPen_php*) &((wxPaintDC_php*)native_object)->GetPen();

                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    value_to_return0 = (wxPen_php*) &((wxScreenDC_php*)native_object)->GetPen();

                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    value_to_return0 = (wxPen_php*) &((wxPostScriptDC_php*)native_object)->GetPen();

                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    value_to_return0 = (wxPen_php*) &((wxPrinterDC_php*)native_object)->GetPen();

                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    value_to_return0 = (wxPen_php*) &((wxMemoryDC_php*)native_object)->GetPen();

                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    value_to_return0 = (wxPen_php*) &((wxBufferedDC_php*)native_object)->GetPen();

                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = (wxPen_php*) &((wxBufferedPaintDC_php*)native_object)->GetPen();

                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = (wxPen_php*) &((wxAutoBufferedPaintDC_php*)native_object)->GetPen();

                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    value_to_return0 = (wxPen_php*) &((wxMirrorDC_php*)native_object)->GetPen();

                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    value_to_return0 = (wxPen_php*) &((wxDC_php*)native_object)->GetPen();

                }
                if(value_to_return0->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return0->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return0->phpObj);
                        zval_add_ref(&value_to_return0->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value,php_wxPen_entry);
                    Z_wxPen_P(return_value)->native_object = (wxPen_php*) value_to_return0;
                }

                if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
                    references->AddReference(return_value, "wxDC::GetPen at call 6 with 0 argument(s)");
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetPen\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxDC::GetPixel(int x, int y, wxColour &colour)
   Gets in colour the colour at the specified location. */
PHP_METHOD(php_wxDC, GetPixel)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetPixel\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetPixel call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    zval* colour0;
    wxColour* object_pointer0_2 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'llz' (&x0, &y0, &colour0)\n");
        #endif

        char parse_parameters_string[] = "llz";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0, &colour0 ) == SUCCESS)
        {
            if(arguments_received >= 3){
                if(Z_TYPE_P(colour0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(colour0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(colour0)->native_object;
                    object_pointer0_2 = (wxColour*) argument_native_object;
                    if (!object_pointer0_2 || (argument_type != PHP_WXCOLOUR_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'colour' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(colour0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'colour' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDC::GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxWindowDC_php*)native_object)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxClientDC_php*)native_object)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPaintDC_php*)native_object)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxScreenDC_php*)native_object)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPostScriptDC_php*)native_object)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPrinterDC_php*)native_object)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMemoryDC_php*)native_object)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedDC_php*)native_object)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedPaintDC_php*)native_object)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxAutoBufferedPaintDC_php*)native_object)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMirrorDC_php*)native_object)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxDC_php*)native_object)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
                }

                references->AddReference(colour0, "wxDC::GetPixel at call 1 with 3 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetPixel\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::GetSize(int width, int height)
   Gets the horizontal and vertical extent of this device context in device units. */
PHP_METHOD(php_wxDC, GetSize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetSize\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetSize call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long width0;
    long height0;
    bool overload0_called = false;

    //Parameters for overload 1
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&width0, &height0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &width0, &height0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload1_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetSize((wxCoord*) width0, (wxCoord*) height0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->GetSize((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->GetSize((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->GetSize((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->GetSize((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->GetSize((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->GetSize((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->GetSize((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->GetSize((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->GetSize((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->GetSize((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->GetSize((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->GetSize((wxCoord*) width0, (wxCoord*) height0);
                }


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetSize() to return new object\n\n");
                #endif

                wxSize value_to_return0;
                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    value_to_return0 = ((wxWindowDC_php*)native_object)->GetSize();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    value_to_return0 = ((wxClientDC_php*)native_object)->GetSize();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    value_to_return0 = ((wxPaintDC_php*)native_object)->GetSize();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    value_to_return0 = ((wxScreenDC_php*)native_object)->GetSize();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    value_to_return0 = ((wxPostScriptDC_php*)native_object)->GetSize();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    value_to_return0 = ((wxPrinterDC_php*)native_object)->GetSize();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    value_to_return0 = ((wxMemoryDC_php*)native_object)->GetSize();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    value_to_return0 = ((wxBufferedDC_php*)native_object)->GetSize();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = ((wxBufferedPaintDC_php*)native_object)->GetSize();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = ((wxAutoBufferedPaintDC_php*)native_object)->GetSize();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    value_to_return0 = ((wxMirrorDC_php*)native_object)->GetSize();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    value_to_return0 = ((wxDC_php*)native_object)->GetSize();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetSize\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::GetSizeMM(int width, int height)
   Returns the horizontal and vertical resolution in millimetres. */
PHP_METHOD(php_wxDC, GetSizeMM)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetSizeMM\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetSizeMM call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long width0;
    long height0;
    bool overload0_called = false;

    //Parameters for overload 1
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&width0, &height0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &width0, &height0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload1_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetSizeMM((wxCoord*) width0, (wxCoord*) height0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
                }


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetSizeMM() to return new object\n\n");
                #endif

                wxSize value_to_return0;
                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    value_to_return0 = ((wxWindowDC_php*)native_object)->GetSizeMM();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    value_to_return0 = ((wxClientDC_php*)native_object)->GetSizeMM();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    value_to_return0 = ((wxPaintDC_php*)native_object)->GetSizeMM();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    value_to_return0 = ((wxScreenDC_php*)native_object)->GetSizeMM();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    value_to_return0 = ((wxPostScriptDC_php*)native_object)->GetSizeMM();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    value_to_return0 = ((wxPrinterDC_php*)native_object)->GetSizeMM();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    value_to_return0 = ((wxMemoryDC_php*)native_object)->GetSizeMM();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    value_to_return0 = ((wxBufferedDC_php*)native_object)->GetSizeMM();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = ((wxBufferedPaintDC_php*)native_object)->GetSizeMM();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = ((wxAutoBufferedPaintDC_php*)native_object)->GetSizeMM();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    value_to_return0 = ((wxMirrorDC_php*)native_object)->GetSizeMM();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    value_to_return0 = ((wxDC_php*)native_object)->GetSizeMM();
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo0 = Z_wxSize_P(return_value);
                    zo0->native_object = (wxSize_php*) ptr;
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetSizeMM\n"
        );
    }
}
/* }}} */

/* {{{ proto wxColour wxDC::GetTextBackground()
   Gets the current text background colour. */
PHP_METHOD(php_wxDC, GetTextBackground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetTextBackground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetTextBackground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetTextBackground() to return object reference\n\n");
                #endif

                wxColour_php* value_to_return0;
                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxWindowDC_php*)native_object)->GetTextBackground();

                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxClientDC_php*)native_object)->GetTextBackground();

                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxPaintDC_php*)native_object)->GetTextBackground();

                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxScreenDC_php*)native_object)->GetTextBackground();

                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxPostScriptDC_php*)native_object)->GetTextBackground();

                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxPrinterDC_php*)native_object)->GetTextBackground();

                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxMemoryDC_php*)native_object)->GetTextBackground();

                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxBufferedDC_php*)native_object)->GetTextBackground();

                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxBufferedPaintDC_php*)native_object)->GetTextBackground();

                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxAutoBufferedPaintDC_php*)native_object)->GetTextBackground();

                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxMirrorDC_php*)native_object)->GetTextBackground();

                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxDC_php*)native_object)->GetTextBackground();

                }
                if(value_to_return0->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return0->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return0->phpObj);
                        zval_add_ref(&value_to_return0->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value,php_wxColour_entry);
                    Z_wxColour_P(return_value)->native_object = (wxColour_php*) value_to_return0;
                }

                if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
                    references->AddReference(return_value, "wxDC::GetTextBackground at call 6 with 0 argument(s)");
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetTextBackground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::GetTextExtent(string string, int w, int h, int descent, int externalLeading, wxFont font)
   Gets the dimensions of the string using the currently selected font. */
PHP_METHOD(php_wxDC, GetTextExtent)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetTextExtent\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetTextExtent call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* string0;
    size_t string_len0;
    long w0;
    long h0;
    long descent0;
    long externalLeading0;
    zval* font0;
    wxFont* object_pointer0_5 = 0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* string1;
    size_t string_len1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 3  && arguments_received <= 6)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sll|llz' (&string0, &string_len0, &w0, &h0, &descent0, &externalLeading0, &font0)\n");
        #endif

        char parse_parameters_string[] = "sll|llz";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &string0, &string_len0, &w0, &h0, &descent0, &externalLeading0, &font0 ) == SUCCESS)
        {
            if(arguments_received >= 6){
                if(Z_TYPE_P(font0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxFont_P(font0)->object_type;
                    argument_native_object = (void*) Z_wxFont_P(font0)->native_object;
                    object_pointer0_5 = (wxFont*) argument_native_object;
                    if (!object_pointer0_5 || (argument_type != PHP_WXFONT_TYPE))
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(font0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&string1, &string_len1)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &string1, &string_len1 ) == SUCCESS)
        {
            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
                }


                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
                }


                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
                }


                return;
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
                }

                references->AddReference(font0, "wxDC::GetTextExtent at call 1 with 6 argument(s)");

                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetTextExtent(wxString(string1, wxConvUTF8)) to return new object\n\n");
                #endif

                wxSize value_to_return1;
                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    value_to_return1 = ((wxWindowDC_php*)native_object)->GetTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    value_to_return1 = ((wxClientDC_php*)native_object)->GetTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    value_to_return1 = ((wxPaintDC_php*)native_object)->GetTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    value_to_return1 = ((wxScreenDC_php*)native_object)->GetTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    value_to_return1 = ((wxPostScriptDC_php*)native_object)->GetTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    value_to_return1 = ((wxPrinterDC_php*)native_object)->GetTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    value_to_return1 = ((wxMemoryDC_php*)native_object)->GetTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    value_to_return1 = ((wxBufferedDC_php*)native_object)->GetTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return1 = ((wxBufferedPaintDC_php*)native_object)->GetTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return1 = ((wxAutoBufferedPaintDC_php*)native_object)->GetTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    value_to_return1 = ((wxMirrorDC_php*)native_object)->GetTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    value_to_return1 = ((wxDC_php*)native_object)->GetTextExtent(wxString(string1, wxConvUTF8));
                    void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                    object_init_ex(return_value, php_wxSize_entry);
                    ((wxSize_php*)ptr)->phpObj = *return_value;
                    zo_wxSize* zo1 = Z_wxSize_P(return_value);
                    zo1->native_object = (wxSize_php*) ptr;
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetTextExtent\n"
        );
    }
}
/* }}} */

/* {{{ proto wxColour wxDC::GetTextForeground()
   Gets the current text foreground colour. */
PHP_METHOD(php_wxDC, GetTextForeground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetTextForeground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetTextForeground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetTextForeground() to return object reference\n\n");
                #endif

                wxColour_php* value_to_return0;
                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxWindowDC_php*)native_object)->GetTextForeground();

                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxClientDC_php*)native_object)->GetTextForeground();

                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxPaintDC_php*)native_object)->GetTextForeground();

                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxScreenDC_php*)native_object)->GetTextForeground();

                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxPostScriptDC_php*)native_object)->GetTextForeground();

                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxPrinterDC_php*)native_object)->GetTextForeground();

                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxMemoryDC_php*)native_object)->GetTextForeground();

                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxBufferedDC_php*)native_object)->GetTextForeground();

                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxBufferedPaintDC_php*)native_object)->GetTextForeground();

                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxAutoBufferedPaintDC_php*)native_object)->GetTextForeground();

                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxMirrorDC_php*)native_object)->GetTextForeground();

                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    value_to_return0 = (wxColour_php*) &((wxDC_php*)native_object)->GetTextForeground();

                }
                if(value_to_return0->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return0->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return0->phpObj);
                        zval_add_ref(&value_to_return0->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value,php_wxColour_entry);
                    Z_wxColour_P(return_value)->native_object = (wxColour_php*) value_to_return0;
                }

                if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
                    references->AddReference(return_value, "wxDC::GetTextForeground at call 6 with 0 argument(s)");
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetTextForeground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::GetUserScale(float &x, float &y)
   Gets the current user scale factor. */
PHP_METHOD(php_wxDC, GetUserScale)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GetUserScale\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GetUserScale call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    double* x0;
    zval x0_ref;
    double* y0;
    zval y0_ref;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'dd' (x0, y0)\n");
        #endif

        char parse_parameters_string[] = "dd";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, x0, y0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, x0_ref, y0_ref );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GetUserScale(x0, y0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->GetUserScale(x0, y0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->GetUserScale(x0, y0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->GetUserScale(x0, y0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->GetUserScale(x0, y0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->GetUserScale(x0, y0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->GetUserScale(x0, y0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->GetUserScale(x0, y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->GetUserScale(x0, y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->GetUserScale(x0, y0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->GetUserScale(x0, y0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->GetUserScale(x0, y0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->GetUserScale(x0, y0);
                }

                size_t elements_returned0_0 = sizeof(x0)/sizeof(*x0);
                array_init(&x0_ref);
                for(size_t i=0; i<elements_returned0_0; i++)
                {
                    add_next_index_long(&x0_ref, x0[i]);
                }
                size_t elements_returned0_1 = sizeof(y0)/sizeof(*y0);
                array_init(&y0_ref);
                for(size_t i=0; i<elements_returned0_1; i++)
                {
                    add_next_index_long(&y0_ref, y0[i]);
                }

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GetUserScale\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::GradientFillConcentric(wxRect rect, wxColour initialColour, wxColour destColour)
   Fill the area specified by rect with a radial gradient, starting from initialColour at the centre of the circle and fading to destColour on the circle outside. */
PHP_METHOD(php_wxDC, GradientFillConcentric)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GradientFillConcentric\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GradientFillConcentric call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* rect0;
    wxRect* object_pointer0_0 = 0;
    zval* initialColour0;
    wxColour* object_pointer0_1 = 0;
    zval* destColour0;
    wxColour* object_pointer0_2 = 0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* rect1;
    wxRect* object_pointer1_0 = 0;
    zval* initialColour1;
    wxColour* object_pointer1_1 = 0;
    zval* destColour1;
    wxColour* object_pointer1_2 = 0;
    zval* circleCenter1;
    wxPoint* object_pointer1_3 = 0;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'OOO' (&rect0, php_wxRect_entry, &initialColour0, php_wxColour_entry, &destColour0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "OOO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &rect0, php_wxRect_entry, &initialColour0, php_wxColour_entry, &destColour0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(rect0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRect_P(rect0)->object_type;
                    argument_native_object = (void*) Z_wxRect_P(rect0)->native_object;
                    object_pointer0_0 = (wxRect*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(rect0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(initialColour0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(initialColour0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(initialColour0)->native_object;
                    object_pointer0_1 = (wxColour*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(initialColour0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(destColour0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(destColour0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(destColour0)->native_object;
                    object_pointer0_2 = (wxColour*) argument_native_object;
                    if (!object_pointer0_2 )
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(destColour0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'OOOO' (&rect1, php_wxRect_entry, &initialColour1, php_wxColour_entry, &destColour1, php_wxColour_entry, &circleCenter1, php_wxPoint_entry)\n");
        #endif

        char parse_parameters_string[] = "OOOO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &rect1, php_wxRect_entry, &initialColour1, php_wxColour_entry, &destColour1, php_wxColour_entry, &circleCenter1, php_wxPoint_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(rect1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRect_P(rect1)->object_type;
                    argument_native_object = (void*) Z_wxRect_P(rect1)->native_object;
                    object_pointer1_0 = (wxRect*) argument_native_object;
                    if (!object_pointer1_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'rect' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(rect1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'rect' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(initialColour1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(initialColour1)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(initialColour1)->native_object;
                    object_pointer1_1 = (wxColour*) argument_native_object;
                    if (!object_pointer1_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'initialColour' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(initialColour1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'initialColour' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(destColour1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(destColour1)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(destColour1)->native_object;
                    object_pointer1_2 = (wxColour*) argument_native_object;
                    if (!object_pointer1_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'destColour' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(destColour1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'destColour' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(circleCenter1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(circleCenter1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(circleCenter1)->native_object;
                    object_pointer1_3 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'circleCenter' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(circleCenter1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'circleCenter' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }

                references->AddReference(rect0, "wxDC::GradientFillConcentric at call 3 with 3 argument(s)");
                references->AddReference(initialColour0, "wxDC::GradientFillConcentric at call 3 with 3 argument(s)");
                references->AddReference(destColour0, "wxDC::GradientFillConcentric at call 3 with 3 argument(s)");

                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
                }

                references->AddReference(rect1, "wxDC::GradientFillConcentric at call 3 with 4 argument(s)");
                references->AddReference(initialColour1, "wxDC::GradientFillConcentric at call 3 with 4 argument(s)");
                references->AddReference(destColour1, "wxDC::GradientFillConcentric at call 3 with 4 argument(s)");
                references->AddReference(circleCenter1, "wxDC::GradientFillConcentric at call 3 with 4 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GradientFillConcentric\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::GradientFillLinear(wxRect rect, wxColour initialColour, wxColour destColour, wxDirection nDirection)
   Fill the area specified by rect with a linear gradient, starting from initialColour and eventually fading to destColour. */
PHP_METHOD(php_wxDC, GradientFillLinear)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::GradientFillLinear\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::GradientFillLinear call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* rect0;
    wxRect* object_pointer0_0 = 0;
    zval* initialColour0;
    wxColour* object_pointer0_1 = 0;
    zval* destColour0;
    wxColour* object_pointer0_2 = 0;
    long nDirection0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 3  && arguments_received <= 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'OOO|l' (&rect0, php_wxRect_entry, &initialColour0, php_wxColour_entry, &destColour0, php_wxColour_entry, &nDirection0)\n");
        #endif

        char parse_parameters_string[] = "OOO|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &rect0, php_wxRect_entry, &initialColour0, php_wxColour_entry, &destColour0, php_wxColour_entry, &nDirection0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(rect0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRect_P(rect0)->object_type;
                    argument_native_object = (void*) Z_wxRect_P(rect0)->native_object;
                    object_pointer0_0 = (wxRect*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'rect' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(rect0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'rect' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(initialColour0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(initialColour0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(initialColour0)->native_object;
                    object_pointer0_1 = (wxColour*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'initialColour' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(initialColour0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'initialColour' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(destColour0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(destColour0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(destColour0)->native_object;
                    object_pointer0_2 = (wxColour*) argument_native_object;
                    if (!object_pointer0_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'destColour' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(destColour0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'destColour' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
                }

                references->AddReference(rect0, "wxDC::GradientFillLinear at call 3 with 3 argument(s)");
                references->AddReference(initialColour0, "wxDC::GradientFillLinear at call 3 with 3 argument(s)");
                references->AddReference(destColour0, "wxDC::GradientFillLinear at call 3 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
                }

                references->AddReference(rect0, "wxDC::GradientFillLinear at call 3 with 4 argument(s)");
                references->AddReference(initialColour0, "wxDC::GradientFillLinear at call 3 with 4 argument(s)");
                references->AddReference(destColour0, "wxDC::GradientFillLinear at call 3 with 4 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::GradientFillLinear\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxDC::IsOk()
   Returns true if the DC is ok to use. */
PHP_METHOD(php_wxDC, IsOk)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::IsOk\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::IsOk call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDC::IsOk())\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxWindowDC_php*)native_object)->IsOk());
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxClientDC_php*)native_object)->IsOk());
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPaintDC_php*)native_object)->IsOk());
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxScreenDC_php*)native_object)->IsOk());
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPostScriptDC_php*)native_object)->IsOk());
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPrinterDC_php*)native_object)->IsOk());
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMemoryDC_php*)native_object)->IsOk());
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedDC_php*)native_object)->IsOk());
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedPaintDC_php*)native_object)->IsOk());
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxAutoBufferedPaintDC_php*)native_object)->IsOk());
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMirrorDC_php*)native_object)->IsOk());
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxDC_php*)native_object)->IsOk());
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::IsOk\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxDC::LogicalToDeviceX(int x)
   Converts logical X coordinate to device coordinate, using the current mapping mode, user scale factor, device origin and axis orientation. */
PHP_METHOD(php_wxDC, LogicalToDeviceX)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::LogicalToDeviceX\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::LogicalToDeviceX call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&x0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxDC::LogicalToDeviceX((wxCoord) x0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxWindowDC_php*)native_object)->LogicalToDeviceX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxClientDC_php*)native_object)->LogicalToDeviceX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPaintDC_php*)native_object)->LogicalToDeviceX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxScreenDC_php*)native_object)->LogicalToDeviceX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPostScriptDC_php*)native_object)->LogicalToDeviceX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPrinterDC_php*)native_object)->LogicalToDeviceX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMemoryDC_php*)native_object)->LogicalToDeviceX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedDC_php*)native_object)->LogicalToDeviceX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedPaintDC_php*)native_object)->LogicalToDeviceX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxAutoBufferedPaintDC_php*)native_object)->LogicalToDeviceX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMirrorDC_php*)native_object)->LogicalToDeviceX((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxDC_php*)native_object)->LogicalToDeviceX((wxCoord) x0));
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::LogicalToDeviceX\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxDC::LogicalToDeviceY(int y)
   Converts logical Y coordinate to device coordinate, using the current mapping mode, user scale factor, device origin and axis orientation. */
PHP_METHOD(php_wxDC, LogicalToDeviceY)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::LogicalToDeviceY\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::LogicalToDeviceY call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long y0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&y0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &y0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxDC::LogicalToDeviceY((wxCoord) y0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxWindowDC_php*)native_object)->LogicalToDeviceY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxClientDC_php*)native_object)->LogicalToDeviceY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPaintDC_php*)native_object)->LogicalToDeviceY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxScreenDC_php*)native_object)->LogicalToDeviceY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPostScriptDC_php*)native_object)->LogicalToDeviceY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPrinterDC_php*)native_object)->LogicalToDeviceY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMemoryDC_php*)native_object)->LogicalToDeviceY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedDC_php*)native_object)->LogicalToDeviceY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedPaintDC_php*)native_object)->LogicalToDeviceY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxAutoBufferedPaintDC_php*)native_object)->LogicalToDeviceY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMirrorDC_php*)native_object)->LogicalToDeviceY((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxDC_php*)native_object)->LogicalToDeviceY((wxCoord) y0));
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::LogicalToDeviceY\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxDC::LogicalToDeviceXRel(int x)
   Converts logical X coordinate to relative device coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation. */
PHP_METHOD(php_wxDC, LogicalToDeviceXRel)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::LogicalToDeviceXRel\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::LogicalToDeviceXRel call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&x0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxDC::LogicalToDeviceXRel((wxCoord) x0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxWindowDC_php*)native_object)->LogicalToDeviceXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxClientDC_php*)native_object)->LogicalToDeviceXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPaintDC_php*)native_object)->LogicalToDeviceXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxScreenDC_php*)native_object)->LogicalToDeviceXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPostScriptDC_php*)native_object)->LogicalToDeviceXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPrinterDC_php*)native_object)->LogicalToDeviceXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMemoryDC_php*)native_object)->LogicalToDeviceXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedDC_php*)native_object)->LogicalToDeviceXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedPaintDC_php*)native_object)->LogicalToDeviceXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxAutoBufferedPaintDC_php*)native_object)->LogicalToDeviceXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMirrorDC_php*)native_object)->LogicalToDeviceXRel((wxCoord) x0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxDC_php*)native_object)->LogicalToDeviceXRel((wxCoord) x0));
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::LogicalToDeviceXRel\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxDC::LogicalToDeviceYRel(int y)
   Converts logical Y coordinate to relative device coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation. */
PHP_METHOD(php_wxDC, LogicalToDeviceYRel)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::LogicalToDeviceYRel\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::LogicalToDeviceYRel call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long y0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&y0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &y0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxDC::LogicalToDeviceYRel((wxCoord) y0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxWindowDC_php*)native_object)->LogicalToDeviceYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxClientDC_php*)native_object)->LogicalToDeviceYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPaintDC_php*)native_object)->LogicalToDeviceYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxScreenDC_php*)native_object)->LogicalToDeviceYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPostScriptDC_php*)native_object)->LogicalToDeviceYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPrinterDC_php*)native_object)->LogicalToDeviceYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMemoryDC_php*)native_object)->LogicalToDeviceYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedDC_php*)native_object)->LogicalToDeviceYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedPaintDC_php*)native_object)->LogicalToDeviceYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxAutoBufferedPaintDC_php*)native_object)->LogicalToDeviceYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMirrorDC_php*)native_object)->LogicalToDeviceYRel((wxCoord) y0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxDC_php*)native_object)->LogicalToDeviceYRel((wxCoord) y0));
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::LogicalToDeviceYRel\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxDC::MaxX()
   Gets the maximum horizontal extent used in drawing commands so far. */
PHP_METHOD(php_wxDC, MaxX)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::MaxX\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::MaxX call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxDC::MaxX())\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxWindowDC_php*)native_object)->MaxX());
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxClientDC_php*)native_object)->MaxX());
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPaintDC_php*)native_object)->MaxX());
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxScreenDC_php*)native_object)->MaxX());
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPostScriptDC_php*)native_object)->MaxX());
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPrinterDC_php*)native_object)->MaxX());
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMemoryDC_php*)native_object)->MaxX());
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedDC_php*)native_object)->MaxX());
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedPaintDC_php*)native_object)->MaxX());
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxAutoBufferedPaintDC_php*)native_object)->MaxX());
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMirrorDC_php*)native_object)->MaxX());
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxDC_php*)native_object)->MaxX());
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::MaxX\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxDC::MaxY()
   Gets the maximum vertical extent used in drawing commands so far. */
PHP_METHOD(php_wxDC, MaxY)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::MaxY\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::MaxY call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxDC::MaxY())\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxWindowDC_php*)native_object)->MaxY());
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxClientDC_php*)native_object)->MaxY());
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPaintDC_php*)native_object)->MaxY());
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxScreenDC_php*)native_object)->MaxY());
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPostScriptDC_php*)native_object)->MaxY());
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPrinterDC_php*)native_object)->MaxY());
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMemoryDC_php*)native_object)->MaxY());
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedDC_php*)native_object)->MaxY());
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedPaintDC_php*)native_object)->MaxY());
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxAutoBufferedPaintDC_php*)native_object)->MaxY());
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMirrorDC_php*)native_object)->MaxY());
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxDC_php*)native_object)->MaxY());
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::MaxY\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxDC::MinX()
   Gets the minimum horizontal extent used in drawing commands so far. */
PHP_METHOD(php_wxDC, MinX)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::MinX\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::MinX call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxDC::MinX())\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxWindowDC_php*)native_object)->MinX());
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxClientDC_php*)native_object)->MinX());
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPaintDC_php*)native_object)->MinX());
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxScreenDC_php*)native_object)->MinX());
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPostScriptDC_php*)native_object)->MinX());
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPrinterDC_php*)native_object)->MinX());
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMemoryDC_php*)native_object)->MinX());
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedDC_php*)native_object)->MinX());
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedPaintDC_php*)native_object)->MinX());
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxAutoBufferedPaintDC_php*)native_object)->MinX());
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMirrorDC_php*)native_object)->MinX());
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxDC_php*)native_object)->MinX());
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::MinX\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxDC::MinY()
   Gets the minimum vertical extent used in drawing commands so far. */
PHP_METHOD(php_wxDC, MinY)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::MinY\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::MinY call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxDC::MinY())\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxWindowDC_php*)native_object)->MinY());
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxClientDC_php*)native_object)->MinY());
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPaintDC_php*)native_object)->MinY());
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxScreenDC_php*)native_object)->MinY());
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPostScriptDC_php*)native_object)->MinY());
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxPrinterDC_php*)native_object)->MinY());
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMemoryDC_php*)native_object)->MinY());
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedDC_php*)native_object)->MinY());
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxBufferedPaintDC_php*)native_object)->MinY());
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxAutoBufferedPaintDC_php*)native_object)->MinY());
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxMirrorDC_php*)native_object)->MinY());
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_LONG(((wxDC_php*)native_object)->MinY());
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::MinY\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::ResetBoundingBox()
   Resets the bounding box: after a call to this function, the bounding box doesn't contain anything. */
PHP_METHOD(php_wxDC, ResetBoundingBox)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::ResetBoundingBox\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::ResetBoundingBox call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::ResetBoundingBox()\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->ResetBoundingBox();
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->ResetBoundingBox();
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->ResetBoundingBox();
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->ResetBoundingBox();
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->ResetBoundingBox();
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->ResetBoundingBox();
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->ResetBoundingBox();
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->ResetBoundingBox();
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->ResetBoundingBox();
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->ResetBoundingBox();
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->ResetBoundingBox();
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->ResetBoundingBox();
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::ResetBoundingBox\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::ResetTransformMatrix()
   Revert the transformation matrix to identity matrix. */
PHP_METHOD(php_wxDC, ResetTransformMatrix)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::ResetTransformMatrix\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::ResetTransformMatrix call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::ResetTransformMatrix()\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->ResetTransformMatrix();
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->ResetTransformMatrix();
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->ResetTransformMatrix();
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->ResetTransformMatrix();
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->ResetTransformMatrix();
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->ResetTransformMatrix();
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->ResetTransformMatrix();
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->ResetTransformMatrix();
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->ResetTransformMatrix();
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->ResetTransformMatrix();
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->ResetTransformMatrix();
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->ResetTransformMatrix();
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::ResetTransformMatrix\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::SetAxisOrientation(bool xLeftRight, bool yBottomUp)
   Sets the x and y axis orientation (i.e. the direction from lowest to highest values on the axis). */
PHP_METHOD(php_wxDC, SetAxisOrientation)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::SetAxisOrientation\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::SetAxisOrientation call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool xLeftRight0;
    bool yBottomUp0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'bb' (&xLeftRight0, &yBottomUp0)\n");
        #endif

        char parse_parameters_string[] = "bb";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &xLeftRight0, &yBottomUp0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::SetAxisOrientation(xLeftRight0, yBottomUp0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->SetAxisOrientation(xLeftRight0, yBottomUp0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->SetAxisOrientation(xLeftRight0, yBottomUp0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->SetAxisOrientation(xLeftRight0, yBottomUp0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->SetAxisOrientation(xLeftRight0, yBottomUp0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->SetAxisOrientation(xLeftRight0, yBottomUp0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->SetAxisOrientation(xLeftRight0, yBottomUp0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->SetAxisOrientation(xLeftRight0, yBottomUp0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->SetAxisOrientation(xLeftRight0, yBottomUp0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->SetAxisOrientation(xLeftRight0, yBottomUp0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->SetAxisOrientation(xLeftRight0, yBottomUp0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->SetAxisOrientation(xLeftRight0, yBottomUp0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->SetAxisOrientation(xLeftRight0, yBottomUp0);
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::SetAxisOrientation\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::SetBackground(wxBrush brush)
   Sets the current background brush for the DC. */
PHP_METHOD(php_wxDC, SetBackground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::SetBackground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::SetBackground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* brush0;
    wxBrush* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&brush0, php_wxBrush_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &brush0, php_wxBrush_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(brush0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBrush_P(brush0)->object_type;
                    argument_native_object = (void*) Z_wxBrush_P(brush0)->native_object;
                    object_pointer0_0 = (wxBrush*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'brush' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(brush0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'brush' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::SetBackground(*(wxBrush*) object_pointer0_0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->SetBackground(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->SetBackground(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->SetBackground(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->SetBackground(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->SetBackground(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->SetBackground(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->SetBackground(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->SetBackground(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->SetBackground(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->SetBackground(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->SetBackground(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->SetBackground(*(wxBrush*) object_pointer0_0);
                }

                references->AddReference(brush0, "wxDC::SetBackground at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::SetBackground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::SetBackgroundMode(int mode)
   Change the current background mode. */
PHP_METHOD(php_wxDC, SetBackgroundMode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::SetBackgroundMode\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::SetBackgroundMode call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long mode0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&mode0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &mode0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::SetBackgroundMode((int) mode0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->SetBackgroundMode((int) mode0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->SetBackgroundMode((int) mode0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->SetBackgroundMode((int) mode0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->SetBackgroundMode((int) mode0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->SetBackgroundMode((int) mode0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->SetBackgroundMode((int) mode0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->SetBackgroundMode((int) mode0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->SetBackgroundMode((int) mode0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->SetBackgroundMode((int) mode0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->SetBackgroundMode((int) mode0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->SetBackgroundMode((int) mode0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->SetBackgroundMode((int) mode0);
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::SetBackgroundMode\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::SetBrush(wxBrush brush)
   Sets the current brush for the DC. */
PHP_METHOD(php_wxDC, SetBrush)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::SetBrush\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::SetBrush call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* brush0;
    wxBrush* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&brush0, php_wxBrush_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &brush0, php_wxBrush_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(brush0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBrush_P(brush0)->object_type;
                    argument_native_object = (void*) Z_wxBrush_P(brush0)->native_object;
                    object_pointer0_0 = (wxBrush*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'brush' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(brush0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'brush' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::SetBrush(*(wxBrush*) object_pointer0_0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->SetBrush(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->SetBrush(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->SetBrush(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->SetBrush(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->SetBrush(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->SetBrush(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->SetBrush(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->SetBrush(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->SetBrush(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->SetBrush(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->SetBrush(*(wxBrush*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->SetBrush(*(wxBrush*) object_pointer0_0);
                }

                references->AddReference(brush0, "wxDC::SetBrush at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::SetBrush\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::SetClippingRegion(int x, int y, int width, int height)
   Sets the clipping region for this device context to the intersection of the given region described by the parameters of this method and the previously set clipping region. */
PHP_METHOD(php_wxDC, SetClippingRegion)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::SetClippingRegion\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::SetClippingRegion call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    long width0;
    long height0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* pt1;
    wxPoint* object_pointer1_0 = 0;
    zval* sz1;
    wxSize* object_pointer1_1 = 0;
    bool overload1_called = false;

    //Parameters for overload 2
    zval* rect2;
    wxRect* object_pointer2_0 = 0;
    bool overload2_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'llll' (&x0, &y0, &width0, &height0)\n");
        #endif

        char parse_parameters_string[] = "llll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0, &width0, &height0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'OO' (&pt1, php_wxPoint_entry, &sz1, php_wxSize_entry)\n");
        #endif

        char parse_parameters_string[] = "OO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pt1, php_wxPoint_entry, &sz1, php_wxSize_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(pt1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pt1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pt1)->native_object;
                    object_pointer1_0 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_0 )
                    {
                        goto overload2;
                    }
                }
                else if(Z_TYPE_P(pt1) != IS_NULL)
                {
                    goto overload2;
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(sz1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(sz1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(sz1)->native_object;
                    object_pointer1_1 = (wxSize*) argument_native_object;
                    if (!object_pointer1_1 )
                    {
                        goto overload2;
                    }
                }
                else if(Z_TYPE_P(sz1) != IS_NULL)
                {
                    goto overload2;
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    //Overload 2
    overload2:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&rect2, php_wxRect_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &rect2, php_wxRect_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(rect2) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRect_P(rect2)->object_type;
                    argument_native_object = (void*) Z_wxRect_P(rect2)->native_object;
                    object_pointer2_0 = (wxRect*) argument_native_object;
                    if (!object_pointer2_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'rect' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(rect2) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'rect' not null, could not be retreived correctly.");
                }
            }

            overload2_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
                }


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
                }

                references->AddReference(pt1, "wxDC::SetClippingRegion at call 3 with 2 argument(s)");
                references->AddReference(sz1, "wxDC::SetClippingRegion at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    if(overload2_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::SetClippingRegion(*(wxRect*) object_pointer2_0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->SetClippingRegion(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->SetClippingRegion(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->SetClippingRegion(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->SetClippingRegion(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->SetClippingRegion(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->SetClippingRegion(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->SetClippingRegion(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->SetClippingRegion(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->SetClippingRegion(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->SetClippingRegion(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->SetClippingRegion(*(wxRect*) object_pointer2_0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->SetClippingRegion(*(wxRect*) object_pointer2_0);
                }

                references->AddReference(rect2, "wxDC::SetClippingRegion at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::SetClippingRegion\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::SetDeviceClippingRegion(wxRegion region)
   Sets the clipping region for this device context. */
PHP_METHOD(php_wxDC, SetDeviceClippingRegion)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::SetDeviceClippingRegion\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::SetDeviceClippingRegion call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* region0;
    wxRegion* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&region0, php_wxRegion_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &region0, php_wxRegion_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(region0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRegion_P(region0)->object_type;
                    argument_native_object = (void*) Z_wxRegion_P(region0)->native_object;
                    object_pointer0_0 = (wxRegion*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'region' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(region0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'region' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
                }

                references->AddReference(region0, "wxDC::SetDeviceClippingRegion at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::SetDeviceClippingRegion\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::SetDeviceOrigin(int x, int y)
   Sets the device origin (i.e. the origin in pixels after scaling has been applied). */
PHP_METHOD(php_wxDC, SetDeviceOrigin)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::SetDeviceOrigin\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::SetDeviceOrigin call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&x0, &y0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::SetDeviceOrigin((wxCoord) x0, (wxCoord) y0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::SetDeviceOrigin\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::SetFont(wxFont font)
   Sets the current font for the DC. */
PHP_METHOD(php_wxDC, SetFont)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::SetFont\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::SetFont call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* font0;
    wxFont* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&font0, php_wxFont_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &font0, php_wxFont_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(font0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxFont_P(font0)->object_type;
                    argument_native_object = (void*) Z_wxFont_P(font0)->native_object;
                    object_pointer0_0 = (wxFont*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'font' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(font0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'font' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::SetFont(*(wxFont*) object_pointer0_0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->SetFont(*(wxFont*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->SetFont(*(wxFont*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->SetFont(*(wxFont*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->SetFont(*(wxFont*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->SetFont(*(wxFont*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->SetFont(*(wxFont*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->SetFont(*(wxFont*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->SetFont(*(wxFont*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->SetFont(*(wxFont*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->SetFont(*(wxFont*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->SetFont(*(wxFont*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->SetFont(*(wxFont*) object_pointer0_0);
                }

                references->AddReference(font0, "wxDC::SetFont at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::SetFont\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::SetLayoutDirection(wxLayoutDirection dir)
   Sets the current layout direction for the device context. */
PHP_METHOD(php_wxDC, SetLayoutDirection)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::SetLayoutDirection\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::SetLayoutDirection call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long dir0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&dir0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dir0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::SetLayoutDirection((wxLayoutDirection) dir0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->SetLayoutDirection((wxLayoutDirection) dir0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->SetLayoutDirection((wxLayoutDirection) dir0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->SetLayoutDirection((wxLayoutDirection) dir0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->SetLayoutDirection((wxLayoutDirection) dir0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->SetLayoutDirection((wxLayoutDirection) dir0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->SetLayoutDirection((wxLayoutDirection) dir0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->SetLayoutDirection((wxLayoutDirection) dir0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->SetLayoutDirection((wxLayoutDirection) dir0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->SetLayoutDirection((wxLayoutDirection) dir0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->SetLayoutDirection((wxLayoutDirection) dir0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->SetLayoutDirection((wxLayoutDirection) dir0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->SetLayoutDirection((wxLayoutDirection) dir0);
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::SetLayoutDirection\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::SetLogicalFunction(wxRasterOperationMode function)
   Sets the current logical function for the device context. */
PHP_METHOD(php_wxDC, SetLogicalFunction)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::SetLogicalFunction\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::SetLogicalFunction call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long function0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&function0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &function0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::SetLogicalFunction((wxRasterOperationMode) function0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->SetLogicalFunction((wxRasterOperationMode) function0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->SetLogicalFunction((wxRasterOperationMode) function0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->SetLogicalFunction((wxRasterOperationMode) function0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->SetLogicalFunction((wxRasterOperationMode) function0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->SetLogicalFunction((wxRasterOperationMode) function0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->SetLogicalFunction((wxRasterOperationMode) function0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->SetLogicalFunction((wxRasterOperationMode) function0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->SetLogicalFunction((wxRasterOperationMode) function0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->SetLogicalFunction((wxRasterOperationMode) function0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->SetLogicalFunction((wxRasterOperationMode) function0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->SetLogicalFunction((wxRasterOperationMode) function0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->SetLogicalFunction((wxRasterOperationMode) function0);
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::SetLogicalFunction\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::SetLogicalOrigin(int x, int y)
   Change the offset used for translating wxDC coordinates. */
PHP_METHOD(php_wxDC, SetLogicalOrigin)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::SetLogicalOrigin\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::SetLogicalOrigin call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&x0, &y0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::SetLogicalOrigin((wxCoord) x0, (wxCoord) y0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::SetLogicalOrigin\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::SetLogicalScale(float x, float y)
   Set the scale to use for translating wxDC coordinates to the physical pixels. */
PHP_METHOD(php_wxDC, SetLogicalScale)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::SetLogicalScale\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::SetLogicalScale call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    double x0;
    double y0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'dd' (&x0, &y0)\n");
        #endif

        char parse_parameters_string[] = "dd";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::SetLogicalScale(x0, y0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->SetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->SetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->SetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->SetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->SetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->SetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->SetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->SetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->SetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->SetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->SetLogicalScale(x0, y0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->SetLogicalScale(x0, y0);
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::SetLogicalScale\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::SetMapMode(wxMappingMode mode)
   The mapping mode of the device context defines the unit of measurement used to convert logical units to device units. */
PHP_METHOD(php_wxDC, SetMapMode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::SetMapMode\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::SetMapMode call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long mode0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&mode0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &mode0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::SetMapMode((wxMappingMode) mode0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->SetMapMode((wxMappingMode) mode0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->SetMapMode((wxMappingMode) mode0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->SetMapMode((wxMappingMode) mode0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->SetMapMode((wxMappingMode) mode0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->SetMapMode((wxMappingMode) mode0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->SetMapMode((wxMappingMode) mode0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->SetMapMode((wxMappingMode) mode0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->SetMapMode((wxMappingMode) mode0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->SetMapMode((wxMappingMode) mode0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->SetMapMode((wxMappingMode) mode0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->SetMapMode((wxMappingMode) mode0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->SetMapMode((wxMappingMode) mode0);
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::SetMapMode\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::SetPalette(wxPalette palette)
   If this is a window DC or memory DC, assigns the given palette to the window or bitmap associated with the DC. */
PHP_METHOD(php_wxDC, SetPalette)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::SetPalette\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::SetPalette call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* palette0;
    wxPalette* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&palette0, php_wxPalette_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &palette0, php_wxPalette_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(palette0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPalette_P(palette0)->object_type;
                    argument_native_object = (void*) Z_wxPalette_P(palette0)->native_object;
                    object_pointer0_0 = (wxPalette*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'palette' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(palette0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'palette' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::SetPalette(*(wxPalette*) object_pointer0_0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->SetPalette(*(wxPalette*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->SetPalette(*(wxPalette*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->SetPalette(*(wxPalette*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->SetPalette(*(wxPalette*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->SetPalette(*(wxPalette*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->SetPalette(*(wxPalette*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->SetPalette(*(wxPalette*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->SetPalette(*(wxPalette*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->SetPalette(*(wxPalette*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->SetPalette(*(wxPalette*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->SetPalette(*(wxPalette*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->SetPalette(*(wxPalette*) object_pointer0_0);
                }

                references->AddReference(palette0, "wxDC::SetPalette at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::SetPalette\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDC::SetPen(wxPen pen)
   Sets the current pen for the DC. */
PHP_METHOD(php_wxDC, SetPen)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::SetPen\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::SetPen call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* pen0;
    wxPen* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&pen0, php_wxPen_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pen0, php_wxPen_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(pen0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPen_P(pen0)->object_type;
                    argument_native_object = (void*) Z_wxPen_P(pen0)->native_object;
                    object_pointer0_0 = (wxPen*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'pen' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pen0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pen' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDC::SetPen(*(wxPen*) object_pointer0_0)\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    ((wxWindowDC_php*)native_object)->SetPen(*(wxPen*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    ((wxClientDC_php*)native_object)->SetPen(*(wxPen*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    ((wxPaintDC_php*)native_object)->SetPen(*(wxPen*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    ((wxScreenDC_php*)native_object)->SetPen(*(wxPen*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    ((wxPostScriptDC_php*)native_object)->SetPen(*(wxPen*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    ((wxPrinterDC_php*)native_object)->SetPen(*(wxPen*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    ((wxMemoryDC_php*)native_object)->SetPen(*(wxPen*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    ((wxBufferedDC_php*)native_object)->SetPen(*(wxPen*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    ((wxBufferedPaintDC_php*)native_object)->SetPen(*(wxPen*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    ((wxAutoBufferedPaintDC_php*)native_object)->SetPen(*(wxPen*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    ((wxMirrorDC_php*)native_object)->SetPen(*(wxPen*) object_pointer0_0);
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    ((wxDC_php*)native_object)->SetPen(*(wxPen*) object_pointer0_0);
                }

                references->AddReference(pen0, "wxDC::SetPen at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::SetPen\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxDC::StretchBlit(int xdest, int ydest, int dstWidth, int dstHeight, wxDC &source, int xsrc, int ysrc, int srcWidth, int srcHeight, wxRasterOperationMode logicalFunc, bool useMask, int xsrcMask, int ysrcMask)
   Copy from a source DC to this DC possibly changing the scale. */
PHP_METHOD(php_wxDC, StretchBlit)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::StretchBlit\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::StretchBlit call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long xdest0;
    long ydest0;
    long dstWidth0;
    long dstHeight0;
    zval* source0;
    wxDC* object_pointer0_4 = 0;
    long xsrc0;
    long ysrc0;
    long srcWidth0;
    long srcHeight0;
    long logicalFunc0;
    bool useMask0;
    long xsrcMask0;
    long ysrcMask0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 9  && arguments_received <= 13)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'llllzllll|lbll' (&xdest0, &ydest0, &dstWidth0, &dstHeight0, &source0, &xsrc0, &ysrc0, &srcWidth0, &srcHeight0, &logicalFunc0, &useMask0, &xsrcMask0, &ysrcMask0)\n");
        #endif

        char parse_parameters_string[] = "llllzllll|lbll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &xdest0, &ydest0, &dstWidth0, &dstHeight0, &source0, &xsrc0, &ysrc0, &srcWidth0, &srcHeight0, &logicalFunc0, &useMask0, &xsrcMask0, &ysrcMask0 ) == SUCCESS)
        {
            if(arguments_received >= 5){
                if(Z_TYPE_P(source0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxDC_P(source0)->object_type;
                    argument_native_object = (void*) Z_wxDC_P(source0)->native_object;
                    object_pointer0_4 = (wxDC*) argument_native_object;
                    if (!object_pointer0_4 || (argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'source' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(source0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'source' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 9:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDC::StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxWindowDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxClientDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPaintDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxScreenDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPostScriptDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPrinterDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMemoryDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedPaintDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxAutoBufferedPaintDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMirrorDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
                }

                references->AddReference(source0, "wxDC::StretchBlit at call 1 with 9 argument(s)");

                return;
                break;
            }
            case 10:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDC::StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxWindowDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxClientDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPaintDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxScreenDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPostScriptDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPrinterDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMemoryDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedPaintDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxAutoBufferedPaintDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMirrorDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
                }

                references->AddReference(source0, "wxDC::StretchBlit at call 1 with 10 argument(s)");

                return;
                break;
            }
            case 11:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDC::StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxWindowDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxClientDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPaintDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxScreenDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPostScriptDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPrinterDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMemoryDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedPaintDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxAutoBufferedPaintDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMirrorDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }

                references->AddReference(source0, "wxDC::StretchBlit at call 1 with 11 argument(s)");

                return;
                break;
            }
            case 12:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDC::StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxWindowDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxClientDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPaintDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxScreenDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPostScriptDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPrinterDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMemoryDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedPaintDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxAutoBufferedPaintDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMirrorDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }

                references->AddReference(source0, "wxDC::StretchBlit at call 1 with 12 argument(s)");

                return;
                break;
            }
            case 13:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDC::StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxWindowDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxClientDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPaintDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxScreenDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPostScriptDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPrinterDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMemoryDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedPaintDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxAutoBufferedPaintDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMirrorDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxDC_php*)native_object)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }

                references->AddReference(source0, "wxDC::StretchBlit at call 1 with 13 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::StretchBlit\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxDC::Blit(int xdest, int ydest, int width, int height, wxDC &source, int xsrc, int ysrc, wxRasterOperationMode logicalFunc, bool useMask, int xsrcMask, int ysrcMask)
   Copy from a source DC to this DC. */
PHP_METHOD(php_wxDC, Blit)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDC::Blit\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDC* current_object;
    wxphp_object_type current_object_type;
    wxDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDC::Blit call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDC_TYPE){
                references = &((wxDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXWINDOWDC_TYPE) && (!reference_type_found)){
                references = &((wxWindowDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCLIENTDC_TYPE) && (!reference_type_found)){
                references = &((wxClientDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXSCREENDC_TYPE) && (!reference_type_found)){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPOSTSCRIPTDC_TYPE) && (!reference_type_found)){
                references = &((wxPostScriptDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXPRINTERDC_TYPE) && (!reference_type_found)){
                references = &((wxPrinterDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMEMORYDC_TYPE) && (!reference_type_found)){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXMIRRORDC_TYPE) && (!reference_type_found)){
                references = &((wxMirrorDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long xdest0;
    long ydest0;
    long width0;
    long height0;
    zval* source0;
    wxDC* object_pointer0_4 = 0;
    long xsrc0;
    long ysrc0;
    long logicalFunc0;
    bool useMask0;
    long xsrcMask0;
    long ysrcMask0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 7  && arguments_received <= 11)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'llllzll|lbll' (&xdest0, &ydest0, &width0, &height0, &source0, &xsrc0, &ysrc0, &logicalFunc0, &useMask0, &xsrcMask0, &ysrcMask0)\n");
        #endif

        char parse_parameters_string[] = "llllzll|lbll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &xdest0, &ydest0, &width0, &height0, &source0, &xsrc0, &ysrc0, &logicalFunc0, &useMask0, &xsrcMask0, &ysrcMask0 ) == SUCCESS)
        {
            if(arguments_received >= 5){
                if(Z_TYPE_P(source0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxDC_P(source0)->object_type;
                    argument_native_object = (void*) Z_wxDC_P(source0)->native_object;
                    object_pointer0_4 = (wxDC*) argument_native_object;
                    if (!object_pointer0_4 || (argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'source' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(source0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'source' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDC::Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxWindowDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxClientDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPaintDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxScreenDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPostScriptDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPrinterDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMemoryDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedPaintDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxAutoBufferedPaintDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMirrorDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
                }

                references->AddReference(source0, "wxDC::Blit at call 1 with 7 argument(s)");

                return;
                break;
            }
            case 8:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDC::Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxWindowDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxClientDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPaintDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxScreenDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPostScriptDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPrinterDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMemoryDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedPaintDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxAutoBufferedPaintDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMirrorDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
                }

                references->AddReference(source0, "wxDC::Blit at call 1 with 8 argument(s)");

                return;
                break;
            }
            case 9:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDC::Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxWindowDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxClientDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPaintDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxScreenDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPostScriptDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPrinterDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMemoryDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedPaintDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxAutoBufferedPaintDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMirrorDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
                }

                references->AddReference(source0, "wxDC::Blit at call 1 with 9 argument(s)");

                return;
                break;
            }
            case 10:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDC::Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxWindowDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxClientDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPaintDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxScreenDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPostScriptDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPrinterDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMemoryDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedPaintDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxAutoBufferedPaintDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMirrorDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
                }

                references->AddReference(source0, "wxDC::Blit at call 1 with 10 argument(s)");

                return;
                break;
            }
            case 11:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDC::Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0))\n\n");
                #endif

                if(current_object_type == PHP_WXWINDOWDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxWindowDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXCLIENTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxClientDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPaintDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXSCREENDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxScreenDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXPOSTSCRIPTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPostScriptDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXPRINTERDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxPrinterDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXMEMORYDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMemoryDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXBUFFEREDDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxBufferedPaintDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxAutoBufferedPaintDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXMIRRORDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxMirrorDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }
                else if(current_object_type == PHP_WXDC_TYPE)
                {
                    WXPHP_RETVAL_BOOL(((wxDC_php*)native_object)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
                }

                references->AddReference(source0, "wxDC::Blit at call 1 with 11 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDC::Blit\n"
        );
    }
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxBufferedDC_free(zend_object *object)
{
    zo_wxBufferedDC* custom_object = php_wxBufferedDC_fetch_object(object);

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxBufferedDC_free on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    if(custom_object->native_object != NULL)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Pointer not null\n");
        php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
        #endif

        if(custom_object->is_user_initialized)
        {
            #ifdef USE_WXPHP_DEBUG
            php_printf("Deleting pointer with delete\n");
            #endif

            delete custom_object->native_object;
            custom_object->native_object = NULL;
        }

        #ifdef USE_WXPHP_DEBUG
        php_printf("Deletion of wxBufferedDC done\n");
        php_printf("===========================================\n\n");
        #endif
    }
    else
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Not user space initialized\n");
        #endif
    }

    zend_object_std_dtor(&custom_object->zo);
}

zend_object* php_wxBufferedDC_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxBufferedDC_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxBufferedDC* custom_object;

    custom_object = (zo_wxBufferedDC*) ecalloc(
        1,
        sizeof(zo_wxBufferedDC)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    memcpy(&wxphp_wxBufferedDC_object_handlers, zend_get_std_object_handlers(), sizeof wxphp_wxBufferedDC_object_handlers);
    wxphp_wxBufferedDC_object_handlers.offset = XtOffsetOf(zo_wxBufferedDC, zo);
    wxphp_wxBufferedDC_object_handlers.free_obj = php_wxBufferedDC_free;
    custom_object->zo.handlers = &wxphp_wxBufferedDC_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXBUFFEREDDC_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto  wxBufferedDC::Init(wxDC &dc, wxSize area, int style)
   Initializes the object created using the default constructor. */
PHP_METHOD(php_wxBufferedDC, Init)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxBufferedDC::Init\n");
    php_printf("===========================================\n");
    #endif

    zo_wxBufferedDC* current_object;
    wxphp_object_type current_object_type;
    wxBufferedDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxBufferedDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxBufferedDC::Init call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXBUFFEREDDC_TYPE){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* dc0;
    wxDC* object_pointer0_0 = 0;
    zval* area0;
    wxSize* object_pointer0_1 = 0;
    long style0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* dc1;
    wxDC* object_pointer1_0 = 0;
    zval* buffer1;
    wxBitmap* object_pointer1_1 = 0;
    long style1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 2  && arguments_received <= 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zO|l' (&dc0, &area0, php_wxSize_entry, &style0)\n");
        #endif

        char parse_parameters_string[] = "zO|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dc0, &area0, php_wxSize_entry, &style0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(dc0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxDC_P(dc0)->object_type;
                    argument_native_object = (void*) Z_wxDC_P(dc0)->native_object;
                    object_pointer0_0 = (wxDC*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE))
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(dc0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(area0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(area0)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(area0)->native_object;
                    object_pointer0_1 = (wxSize*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(area0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 1  && arguments_received <= 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z|Ol' (&dc1, &buffer1, php_wxBitmap_entry, &style1)\n");
        #endif

        char parse_parameters_string[] = "z|Ol";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dc1, &buffer1, php_wxBitmap_entry, &style1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(dc1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxDC_P(dc1)->object_type;
                    argument_native_object = (void*) Z_wxDC_P(dc1)->native_object;
                    object_pointer1_0 = (wxDC*) argument_native_object;
                    if (!object_pointer1_0 || (argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'dc' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(dc1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'dc' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(buffer1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(buffer1)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(buffer1)->native_object;
                    object_pointer1_1 = (wxBitmap*) argument_native_object;
                    if (!object_pointer1_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'buffer' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(buffer1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'buffer' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxBufferedDC::Init((wxDC*) object_pointer0_0, *(wxSize*) object_pointer0_1)\n\n");
                #endif

                ((wxBufferedDC_php*)native_object)->Init((wxDC*) object_pointer0_0, *(wxSize*) object_pointer0_1);

                references->AddReference(dc0, "wxBufferedDC::Init at call 1 with 2 argument(s)");
                references->AddReference(area0, "wxBufferedDC::Init at call 3 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxBufferedDC::Init((wxDC*) object_pointer0_0, *(wxSize*) object_pointer0_1, (int) style0)\n\n");
                #endif

                ((wxBufferedDC_php*)native_object)->Init((wxDC*) object_pointer0_0, *(wxSize*) object_pointer0_1, (int) style0);

                references->AddReference(dc0, "wxBufferedDC::Init at call 1 with 3 argument(s)");
                references->AddReference(area0, "wxBufferedDC::Init at call 3 with 3 argument(s)");

                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxBufferedDC::Init((wxDC*) object_pointer1_0)\n\n");
                #endif

                ((wxBufferedDC_php*)native_object)->Init((wxDC*) object_pointer1_0);

                references->AddReference(dc1, "wxBufferedDC::Init at call 1 with 1 argument(s)");

                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxBufferedDC::Init((wxDC*) object_pointer1_0, *(wxBitmap*) object_pointer1_1)\n\n");
                #endif

                ((wxBufferedDC_php*)native_object)->Init((wxDC*) object_pointer1_0, *(wxBitmap*) object_pointer1_1);

                references->AddReference(dc1, "wxBufferedDC::Init at call 1 with 2 argument(s)");
                references->AddReference(buffer1, "wxBufferedDC::Init at call 3 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxBufferedDC::Init((wxDC*) object_pointer1_0, *(wxBitmap*) object_pointer1_1, (int) style1)\n\n");
                #endif

                ((wxBufferedDC_php*)native_object)->Init((wxDC*) object_pointer1_0, *(wxBitmap*) object_pointer1_1, (int) style1);

                references->AddReference(dc1, "wxBufferedDC::Init at call 1 with 3 argument(s)");
                references->AddReference(buffer1, "wxBufferedDC::Init at call 3 with 3 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxBufferedDC::Init\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxBufferedDC::wxBufferedDC()
   Default constructor. */
PHP_METHOD(php_wxBufferedDC, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxBufferedDC::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxBufferedDC* current_object;
    wxBufferedDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    bool overload0_called = false;

    //Parameters for overload 1
    zval* dc1;
    wxDC* object_pointer1_0 = 0;
    zval* area1;
    wxSize* object_pointer1_1 = 0;
    long style1;
    bool overload1_called = false;

    //Parameters for overload 2
    zval* dc2;
    wxDC* object_pointer2_0 = 0;
    zval* buffer2;
    wxBitmap* object_pointer2_1 = 0;
    long style2;
    bool overload2_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 2  && arguments_received <= 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zO|l' (&dc1, &area1, php_wxSize_entry, &style1)\n");
        #endif

        char parse_parameters_string[] = "zO|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dc1, &area1, php_wxSize_entry, &style1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(dc1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxDC_P(dc1)->object_type;
                    argument_native_object = (void*) Z_wxDC_P(dc1)->native_object;
                    object_pointer1_0 = (wxDC*) argument_native_object;
                    if (!object_pointer1_0 || (argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE))
                    {
                        goto overload2;
                    }
                }
                else if(Z_TYPE_P(dc1) != IS_NULL)
                {
                    goto overload2;
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(area1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(area1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(area1)->native_object;
                    object_pointer1_1 = (wxSize*) argument_native_object;
                    if (!object_pointer1_1 )
                    {
                        goto overload2;
                    }
                }
                else if(Z_TYPE_P(area1) != IS_NULL)
                {
                    goto overload2;
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    //Overload 2
    overload2:
    if(!already_called && arguments_received >= 1  && arguments_received <= 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z|Ol' (&dc2, &buffer2, php_wxBitmap_entry, &style2)\n");
        #endif

        char parse_parameters_string[] = "z|Ol";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dc2, &buffer2, php_wxBitmap_entry, &style2 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(dc2) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxDC_P(dc2)->object_type;
                    argument_native_object = (void*) Z_wxDC_P(dc2)->native_object;
                    object_pointer2_0 = (wxDC*) argument_native_object;
                    if (!object_pointer2_0 || (argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'dc' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(dc2) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'dc' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(buffer2) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(buffer2)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(buffer2)->native_object;
                    object_pointer2_1 = (wxBitmap*) argument_native_object;
                    if (!object_pointer2_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'buffer' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(buffer2) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'buffer' not null, could not be retreived correctly.");
                }
            }

            overload2_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct()\n");
                #endif

                native_object = new wxBufferedDC_php();

                native_object->references.Initialize();
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxDC*) object_pointer1_0, *(wxSize*) object_pointer1_1)\n");
                #endif

                native_object = new wxBufferedDC_php((wxDC*) object_pointer1_0, *(wxSize*) object_pointer1_1);

                native_object->references.Initialize();
                ((wxBufferedDC_php*) native_object)->references.AddReference(dc1, "wxBufferedDC::wxBufferedDC at call 2 with 2 argument(s)");
                ((wxBufferedDC_php*) native_object)->references.AddReference(area1, "wxBufferedDC::wxBufferedDC at call 4 with 2 argument(s)");
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxDC*) object_pointer1_0, *(wxSize*) object_pointer1_1, (int) style1)\n");
                #endif

                native_object = new wxBufferedDC_php((wxDC*) object_pointer1_0, *(wxSize*) object_pointer1_1, (int) style1);

                native_object->references.Initialize();
                ((wxBufferedDC_php*) native_object)->references.AddReference(dc1, "wxBufferedDC::wxBufferedDC at call 2 with 3 argument(s)");
                ((wxBufferedDC_php*) native_object)->references.AddReference(area1, "wxBufferedDC::wxBufferedDC at call 4 with 3 argument(s)");
                break;
            }
        }
    }

    if(overload2_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxDC*) object_pointer2_0)\n");
                #endif

                native_object = new wxBufferedDC_php((wxDC*) object_pointer2_0);

                native_object->references.Initialize();
                ((wxBufferedDC_php*) native_object)->references.AddReference(dc2, "wxBufferedDC::wxBufferedDC at call 2 with 1 argument(s)");
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxDC*) object_pointer2_0, *(wxBitmap*) object_pointer2_1)\n");
                #endif

                native_object = new wxBufferedDC_php((wxDC*) object_pointer2_0, *(wxBitmap*) object_pointer2_1);

                native_object->references.Initialize();
                ((wxBufferedDC_php*) native_object)->references.AddReference(dc2, "wxBufferedDC::wxBufferedDC at call 2 with 2 argument(s)");
                ((wxBufferedDC_php*) native_object)->references.AddReference(buffer2, "wxBufferedDC::wxBufferedDC at call 4 with 2 argument(s)");
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxDC*) object_pointer2_0, *(wxBitmap*) object_pointer2_1, (int) style2)\n");
                #endif

                native_object = new wxBufferedDC_php((wxDC*) object_pointer2_0, *(wxBitmap*) object_pointer2_1, (int) style2);

                native_object->references.Initialize();
                ((wxBufferedDC_php*) native_object)->references.AddReference(dc2, "wxBufferedDC::wxBufferedDC at call 2 with 3 argument(s)");
                ((wxBufferedDC_php*) native_object)->references.AddReference(buffer2, "wxBufferedDC::wxBufferedDC at call 4 with 3 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxBufferedDC_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxBufferedDC::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxAutoBufferedPaintDC_free(zend_object *object)
{
    zo_wxAutoBufferedPaintDC* custom_object = php_wxAutoBufferedPaintDC_fetch_object(object);

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxAutoBufferedPaintDC_free on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    if(custom_object->native_object != NULL)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Pointer not null\n");
        php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
        #endif

        if(custom_object->is_user_initialized)
        {
            #ifdef USE_WXPHP_DEBUG
            php_printf("Deleting pointer with delete\n");
            #endif

            delete custom_object->native_object;
            custom_object->native_object = NULL;
        }

        #ifdef USE_WXPHP_DEBUG
        php_printf("Deletion of wxAutoBufferedPaintDC done\n");
        php_printf("===========================================\n\n");
        #endif
    }
    else
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Not user space initialized\n");
        #endif
    }

    zend_object_std_dtor(&custom_object->zo);
}

zend_object* php_wxAutoBufferedPaintDC_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxAutoBufferedPaintDC_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxAutoBufferedPaintDC* custom_object;

    custom_object = (zo_wxAutoBufferedPaintDC*) ecalloc(
        1,
        sizeof(zo_wxAutoBufferedPaintDC)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    memcpy(&wxphp_wxAutoBufferedPaintDC_object_handlers, zend_get_std_object_handlers(), sizeof wxphp_wxAutoBufferedPaintDC_object_handlers);
    wxphp_wxAutoBufferedPaintDC_object_handlers.offset = XtOffsetOf(zo_wxAutoBufferedPaintDC, zo);
    wxphp_wxAutoBufferedPaintDC_object_handlers.free_obj = php_wxAutoBufferedPaintDC_free;
    custom_object->zo.handlers = &wxphp_wxAutoBufferedPaintDC_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXAUTOBUFFEREDPAINTDC_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto  wxAutoBufferedPaintDC::wxAutoBufferedPaintDC(wxWindow &window)
   Constructor. */
PHP_METHOD(php_wxAutoBufferedPaintDC, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxAutoBufferedPaintDC::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxAutoBufferedPaintDC* current_object;
    wxAutoBufferedPaintDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    zval* window0;
    wxWindow* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&window0)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &window0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(window0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(window0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(window0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'window' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(window0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'window' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
                #endif

                native_object = new wxAutoBufferedPaintDC_php((wxWindow*) object_pointer0_0);

                native_object->references.Initialize();
                ((wxAutoBufferedPaintDC_php*) native_object)->references.AddReference(window0, "wxAutoBufferedPaintDC::wxAutoBufferedPaintDC at call 2 with 1 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxAutoBufferedPaintDC_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxAutoBufferedPaintDC::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxBufferedPaintDC_free(zend_object *object)
{
    zo_wxBufferedPaintDC* custom_object = php_wxBufferedPaintDC_fetch_object(object);

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxBufferedPaintDC_free on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    if(custom_object->native_object != NULL)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Pointer not null\n");
        php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
        #endif

        if(custom_object->is_user_initialized)
        {
            #ifdef USE_WXPHP_DEBUG
            php_printf("Deleting pointer with delete\n");
            #endif

            delete custom_object->native_object;
            custom_object->native_object = NULL;
        }

        #ifdef USE_WXPHP_DEBUG
        php_printf("Deletion of wxBufferedPaintDC done\n");
        php_printf("===========================================\n\n");
        #endif
    }
    else
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Not user space initialized\n");
        #endif
    }

    zend_object_std_dtor(&custom_object->zo);
}

zend_object* php_wxBufferedPaintDC_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxBufferedPaintDC_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxBufferedPaintDC* custom_object;

    custom_object = (zo_wxBufferedPaintDC*) ecalloc(
        1,
        sizeof(zo_wxBufferedPaintDC)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    memcpy(&wxphp_wxBufferedPaintDC_object_handlers, zend_get_std_object_handlers(), sizeof wxphp_wxBufferedPaintDC_object_handlers);
    wxphp_wxBufferedPaintDC_object_handlers.offset = XtOffsetOf(zo_wxBufferedPaintDC, zo);
    wxphp_wxBufferedPaintDC_object_handlers.free_obj = php_wxBufferedPaintDC_free;
    custom_object->zo.handlers = &wxphp_wxBufferedPaintDC_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXBUFFEREDPAINTDC_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto  wxBufferedPaintDC::wxBufferedPaintDC(wxWindow &window, wxBitmap &buffer, int style)
   As with wxBufferedDC, you may either provide the bitmap to be used for buffering or let this object create one internally (in the latter case, the size of the client part of the window is used). */
PHP_METHOD(php_wxBufferedPaintDC, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxBufferedPaintDC::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxBufferedPaintDC* current_object;
    wxBufferedPaintDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    zval* window0;
    wxWindow* object_pointer0_0 = 0;
    zval* buffer0;
    wxBitmap* object_pointer0_1 = 0;
    long style0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* window1;
    wxWindow* object_pointer1_0 = 0;
    long style1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 2  && arguments_received <= 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zO|l' (&window0, &buffer0, php_wxBitmap_entry, &style0)\n");
        #endif

        char parse_parameters_string[] = "zO|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &window0, &buffer0, php_wxBitmap_entry, &style0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(window0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(window0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(window0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(window0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(buffer0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(buffer0)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(buffer0)->native_object;
                    object_pointer0_1 = (wxBitmap*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(buffer0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 1  && arguments_received <= 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z|l' (&window1, &style1)\n");
        #endif

        char parse_parameters_string[] = "z|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &window1, &style1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(window1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(window1)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(window1)->native_object;
                    object_pointer1_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer1_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'window' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(window1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'window' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer0_0, *(wxBitmap*) object_pointer0_1)\n");
                #endif

                native_object = new wxBufferedPaintDC_php((wxWindow*) object_pointer0_0, *(wxBitmap*) object_pointer0_1);

                native_object->references.Initialize();
                ((wxBufferedPaintDC_php*) native_object)->references.AddReference(window0, "wxBufferedPaintDC::wxBufferedPaintDC at call 2 with 2 argument(s)");
                ((wxBufferedPaintDC_php*) native_object)->references.AddReference(buffer0, "wxBufferedPaintDC::wxBufferedPaintDC at call 4 with 2 argument(s)");
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer0_0, *(wxBitmap*) object_pointer0_1, (int) style0)\n");
                #endif

                native_object = new wxBufferedPaintDC_php((wxWindow*) object_pointer0_0, *(wxBitmap*) object_pointer0_1, (int) style0);

                native_object->references.Initialize();
                ((wxBufferedPaintDC_php*) native_object)->references.AddReference(window0, "wxBufferedPaintDC::wxBufferedPaintDC at call 2 with 3 argument(s)");
                ((wxBufferedPaintDC_php*) native_object)->references.AddReference(buffer0, "wxBufferedPaintDC::wxBufferedPaintDC at call 4 with 3 argument(s)");
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0)\n");
                #endif

                native_object = new wxBufferedPaintDC_php((wxWindow*) object_pointer1_0);

                native_object->references.Initialize();
                ((wxBufferedPaintDC_php*) native_object)->references.AddReference(window1, "wxBufferedPaintDC::wxBufferedPaintDC at call 2 with 1 argument(s)");
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (int) style1)\n");
                #endif

                native_object = new wxBufferedPaintDC_php((wxWindow*) object_pointer1_0, (int) style1);

                native_object->references.Initialize();
                ((wxBufferedPaintDC_php*) native_object)->references.AddReference(window1, "wxBufferedPaintDC::wxBufferedPaintDC at call 2 with 2 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxBufferedPaintDC_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxBufferedPaintDC::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxPaintDC_free(zend_object *object)
{
    zo_wxPaintDC* custom_object = php_wxPaintDC_fetch_object(object);

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxPaintDC_free on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    if(custom_object->native_object != NULL)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Pointer not null\n");
        php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
        #endif

        if(custom_object->is_user_initialized)
        {
            #ifdef USE_WXPHP_DEBUG
            php_printf("Deleting pointer with delete\n");
            #endif

            delete custom_object->native_object;
            custom_object->native_object = NULL;
        }

        #ifdef USE_WXPHP_DEBUG
        php_printf("Deletion of wxPaintDC done\n");
        php_printf("===========================================\n\n");
        #endif
    }
    else
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Not user space initialized\n");
        #endif
    }

    zend_object_std_dtor(&custom_object->zo);
}

zend_object* php_wxPaintDC_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxPaintDC_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxPaintDC* custom_object;

    custom_object = (zo_wxPaintDC*) ecalloc(
        1,
        sizeof(zo_wxPaintDC)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    memcpy(&wxphp_wxPaintDC_object_handlers, zend_get_std_object_handlers(), sizeof wxphp_wxPaintDC_object_handlers);
    wxphp_wxPaintDC_object_handlers.offset = XtOffsetOf(zo_wxPaintDC, zo);
    wxphp_wxPaintDC_object_handlers.free_obj = php_wxPaintDC_free;
    custom_object->zo.handlers = &wxphp_wxPaintDC_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXPAINTDC_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto  wxPaintDC::wxPaintDC(wxWindow &window)
   Constructor. */
PHP_METHOD(php_wxPaintDC, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxPaintDC::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxPaintDC* current_object;
    wxPaintDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    zval* window0;
    wxWindow* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&window0)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &window0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(window0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(window0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(window0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'window' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(window0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'window' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
                #endif

                native_object = new wxPaintDC_php((wxWindow*) object_pointer0_0);

                native_object->references.Initialize();
                ((wxPaintDC_php*) native_object)->references.AddReference(window0, "wxPaintDC::wxPaintDC at call 2 with 1 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxPaintDC_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxPaintDC::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxClientDC_free(zend_object *object)
{
    zo_wxClientDC* custom_object = php_wxClientDC_fetch_object(object);

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxClientDC_free on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    if(custom_object->native_object != NULL)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Pointer not null\n");
        php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
        #endif

        if(custom_object->is_user_initialized)
        {
            #ifdef USE_WXPHP_DEBUG
            php_printf("Deleting pointer with delete\n");
            #endif

            delete custom_object->native_object;
            custom_object->native_object = NULL;
        }

        #ifdef USE_WXPHP_DEBUG
        php_printf("Deletion of wxClientDC done\n");
        php_printf("===========================================\n\n");
        #endif
    }
    else
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Not user space initialized\n");
        #endif
    }

    zend_object_std_dtor(&custom_object->zo);
}

zend_object* php_wxClientDC_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxClientDC_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxClientDC* custom_object;

    custom_object = (zo_wxClientDC*) ecalloc(
        1,
        sizeof(zo_wxClientDC)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    memcpy(&wxphp_wxClientDC_object_handlers, zend_get_std_object_handlers(), sizeof wxphp_wxClientDC_object_handlers);
    wxphp_wxClientDC_object_handlers.offset = XtOffsetOf(zo_wxClientDC, zo);
    wxphp_wxClientDC_object_handlers.free_obj = php_wxClientDC_free;
    custom_object->zo.handlers = &wxphp_wxClientDC_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXCLIENTDC_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto  wxClientDC::wxClientDC(wxWindow &window)
   Constructor. */
PHP_METHOD(php_wxClientDC, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxClientDC::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxClientDC* current_object;
    wxClientDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    zval* window0;
    wxWindow* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&window0)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &window0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(window0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(window0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(window0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'window' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(window0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'window' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
                #endif

                native_object = new wxClientDC_php((wxWindow*) object_pointer0_0);

                native_object->references.Initialize();
                ((wxClientDC_php*) native_object)->references.AddReference(window0, "wxClientDC::wxClientDC at call 2 with 1 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxClientDC_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxClientDC::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxWindowDC_free(zend_object *object)
{
    zo_wxWindowDC* custom_object = php_wxWindowDC_fetch_object(object);

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxWindowDC_free on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    if(custom_object->native_object != NULL)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Pointer not null\n");
        php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
        #endif

        if(custom_object->is_user_initialized)
        {
            #ifdef USE_WXPHP_DEBUG
            php_printf("Deleting pointer with delete\n");
            #endif

            delete custom_object->native_object;
            custom_object->native_object = NULL;
        }

        #ifdef USE_WXPHP_DEBUG
        php_printf("Deletion of wxWindowDC done\n");
        php_printf("===========================================\n\n");
        #endif
    }
    else
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Not user space initialized\n");
        #endif
    }

    zend_object_std_dtor(&custom_object->zo);
}

zend_object* php_wxWindowDC_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxWindowDC_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxWindowDC* custom_object;

    custom_object = (zo_wxWindowDC*) ecalloc(
        1,
        sizeof(zo_wxWindowDC)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    memcpy(&wxphp_wxWindowDC_object_handlers, zend_get_std_object_handlers(), sizeof wxphp_wxWindowDC_object_handlers);
    wxphp_wxWindowDC_object_handlers.offset = XtOffsetOf(zo_wxWindowDC, zo);
    wxphp_wxWindowDC_object_handlers.free_obj = php_wxWindowDC_free;
    custom_object->zo.handlers = &wxphp_wxWindowDC_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXWINDOWDC_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto  wxWindowDC::wxWindowDC(wxWindow &window)
   Constructor. */
PHP_METHOD(php_wxWindowDC, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxWindowDC::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxWindowDC* current_object;
    wxWindowDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    zval* window0;
    wxWindow* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&window0)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &window0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(window0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(window0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(window0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'window' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(window0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'window' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
                #endif

                native_object = new wxWindowDC_php((wxWindow*) object_pointer0_0);

                native_object->references.Initialize();
                ((wxWindowDC_php*) native_object)->references.AddReference(window0, "wxWindowDC::wxWindowDC at call 2 with 1 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxWindowDC_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxWindowDC::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxMemoryDC_free(zend_object *object)
{
    zo_wxMemoryDC* custom_object = php_wxMemoryDC_fetch_object(object);

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxMemoryDC_free on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    if(custom_object->native_object != NULL)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Pointer not null\n");
        php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
        #endif

        if(custom_object->is_user_initialized)
        {
            #ifdef USE_WXPHP_DEBUG
            php_printf("Deleting pointer with delete\n");
            #endif

            delete custom_object->native_object;
            custom_object->native_object = NULL;
        }

        #ifdef USE_WXPHP_DEBUG
        php_printf("Deletion of wxMemoryDC done\n");
        php_printf("===========================================\n\n");
        #endif
    }
    else
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Not user space initialized\n");
        #endif
    }

    zend_object_std_dtor(&custom_object->zo);
}

zend_object* php_wxMemoryDC_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxMemoryDC_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxMemoryDC* custom_object;

    custom_object = (zo_wxMemoryDC*) ecalloc(
        1,
        sizeof(zo_wxMemoryDC)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    memcpy(&wxphp_wxMemoryDC_object_handlers, zend_get_std_object_handlers(), sizeof wxphp_wxMemoryDC_object_handlers);
    wxphp_wxMemoryDC_object_handlers.offset = XtOffsetOf(zo_wxMemoryDC, zo);
    wxphp_wxMemoryDC_object_handlers.free_obj = php_wxMemoryDC_free;
    custom_object->zo.handlers = &wxphp_wxMemoryDC_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXMEMORYDC_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto  wxMemoryDC::SelectObject(wxBitmap &bitmap)
   Works exactly like SelectObjectAsSource() but this is the function you should use when you select a bitmap because you want to modify it, e.g. */
PHP_METHOD(php_wxMemoryDC, SelectObject)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxMemoryDC::SelectObject\n");
    php_printf("===========================================\n");
    #endif

    zo_wxMemoryDC* current_object;
    wxphp_object_type current_object_type;
    wxMemoryDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxMemoryDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxMemoryDC::SelectObject call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXMEMORYDC_TYPE){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* bitmap0;
    wxBitmap* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&bitmap0, php_wxBitmap_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &bitmap0, php_wxBitmap_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(bitmap0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap0)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap0)->native_object;
                    object_pointer0_0 = (wxBitmap*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'bitmap' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(bitmap0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'bitmap' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxMemoryDC::SelectObject(*(wxBitmap*) object_pointer0_0)\n\n");
                #endif

                ((wxMemoryDC_php*)native_object)->SelectObject(*(wxBitmap*) object_pointer0_0);

                references->AddReference(bitmap0, "wxMemoryDC::SelectObject at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxMemoryDC::SelectObject\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxMemoryDC::SelectObjectAsSource(wxBitmap bitmap)
   Selects the given bitmap into the device context, to use as the memory bitmap. */
PHP_METHOD(php_wxMemoryDC, SelectObjectAsSource)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxMemoryDC::SelectObjectAsSource\n");
    php_printf("===========================================\n");
    #endif

    zo_wxMemoryDC* current_object;
    wxphp_object_type current_object_type;
    wxMemoryDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxMemoryDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxMemoryDC::SelectObjectAsSource call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXMEMORYDC_TYPE){
                references = &((wxMemoryDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXAUTOBUFFEREDPAINTDC_TYPE) && (!reference_type_found)){
                references = &((wxAutoBufferedPaintDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* bitmap0;
    wxBitmap* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&bitmap0, php_wxBitmap_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &bitmap0, php_wxBitmap_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(bitmap0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap0)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap0)->native_object;
                    object_pointer0_0 = (wxBitmap*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'bitmap' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(bitmap0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'bitmap' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxMemoryDC::SelectObjectAsSource(*(wxBitmap*) object_pointer0_0)\n\n");
                #endif

                ((wxMemoryDC_php*)native_object)->SelectObjectAsSource(*(wxBitmap*) object_pointer0_0);

                references->AddReference(bitmap0, "wxMemoryDC::SelectObjectAsSource at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxMemoryDC::SelectObjectAsSource\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxMemoryDC::wxMemoryDC()
   Constructs a new memory device context. */
PHP_METHOD(php_wxMemoryDC, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxMemoryDC::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxMemoryDC* current_object;
    wxMemoryDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    bool overload0_called = false;

    //Parameters for overload 1
    zval* dc1;
    wxDC* object_pointer1_0 = 0;
    bool overload1_called = false;

    //Parameters for overload 2
    zval* bitmap2;
    wxBitmap* object_pointer2_0 = 0;
    bool overload2_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&dc1)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dc1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(dc1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxDC_P(dc1)->object_type;
                    argument_native_object = (void*) Z_wxDC_P(dc1)->native_object;
                    object_pointer1_0 = (wxDC*) argument_native_object;
                    if (!object_pointer1_0 || (argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE))
                    {
                        goto overload2;
                    }
                }
                else if(Z_TYPE_P(dc1) != IS_NULL)
                {
                    goto overload2;
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    //Overload 2
    overload2:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&bitmap2, php_wxBitmap_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &bitmap2, php_wxBitmap_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(bitmap2) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap2)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap2)->native_object;
                    object_pointer2_0 = (wxBitmap*) argument_native_object;
                    if (!object_pointer2_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'bitmap' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(bitmap2) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'bitmap' not null, could not be retreived correctly.");
                }
            }

            overload2_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct()\n");
                #endif

                native_object = new wxMemoryDC_php();

                native_object->references.Initialize();
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxDC*) object_pointer1_0)\n");
                #endif

                native_object = new wxMemoryDC_php((wxDC*) object_pointer1_0);

                native_object->references.Initialize();
                ((wxMemoryDC_php*) native_object)->references.AddReference(dc1, "wxMemoryDC::wxMemoryDC at call 2 with 1 argument(s)");
                break;
            }
        }
    }

    if(overload2_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct(*(wxBitmap*) object_pointer2_0)\n");
                #endif

                native_object = new wxMemoryDC_php(*(wxBitmap*) object_pointer2_0);

                native_object->references.Initialize();
                ((wxMemoryDC_php*) native_object)->references.AddReference(bitmap2, "wxMemoryDC::wxMemoryDC at call 4 with 1 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxMemoryDC_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxMemoryDC::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxMirrorDC_free(zend_object *object)
{
    zo_wxMirrorDC* custom_object = php_wxMirrorDC_fetch_object(object);

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxMirrorDC_free on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    if(custom_object->native_object != NULL)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Pointer not null\n");
        php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
        #endif

        if(custom_object->is_user_initialized)
        {
            #ifdef USE_WXPHP_DEBUG
            php_printf("Deleting pointer with delete\n");
            #endif

            delete custom_object->native_object;
            custom_object->native_object = NULL;
        }

        #ifdef USE_WXPHP_DEBUG
        php_printf("Deletion of wxMirrorDC done\n");
        php_printf("===========================================\n\n");
        #endif
    }
    else
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Not user space initialized\n");
        #endif
    }

    zend_object_std_dtor(&custom_object->zo);
}

zend_object* php_wxMirrorDC_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxMirrorDC_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxMirrorDC* custom_object;

    custom_object = (zo_wxMirrorDC*) ecalloc(
        1,
        sizeof(zo_wxMirrorDC)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    memcpy(&wxphp_wxMirrorDC_object_handlers, zend_get_std_object_handlers(), sizeof wxphp_wxMirrorDC_object_handlers);
    wxphp_wxMirrorDC_object_handlers.offset = XtOffsetOf(zo_wxMirrorDC, zo);
    wxphp_wxMirrorDC_object_handlers.free_obj = php_wxMirrorDC_free;
    custom_object->zo.handlers = &wxphp_wxMirrorDC_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXMIRRORDC_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto  wxMirrorDC::wxMirrorDC(wxDC &dc, bool mirror)
   Creates a (maybe) mirrored DC associated with the real dc. */
PHP_METHOD(php_wxMirrorDC, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxMirrorDC::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxMirrorDC* current_object;
    wxMirrorDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    zval* dc0;
    wxDC* object_pointer0_0 = 0;
    bool mirror0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ob' (&dc0, &mirror0)\n");
        #endif

        char parse_parameters_string[] = "ob";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dc0, &mirror0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(dc0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxDC_P(dc0)->object_type;
                    argument_native_object = (void*) Z_wxDC_P(dc0)->native_object;
                    object_pointer0_0 = (wxDC*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'dc' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(dc0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'dc' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct(*(wxDC*) object_pointer0_0, mirror0)\n");
                #endif

                native_object = new wxMirrorDC_php(*(wxDC*) object_pointer0_0, mirror0);

                native_object->references.Initialize();
                ((wxMirrorDC_php*) native_object)->references.AddReference(dc0, "wxMirrorDC::wxMirrorDC at call 4 with 2 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxMirrorDC_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxMirrorDC::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxPostScriptDC_free(zend_object *object)
{
    zo_wxPostScriptDC* custom_object = php_wxPostScriptDC_fetch_object(object);

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxPostScriptDC_free on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    if(custom_object->native_object != NULL)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Pointer not null\n");
        php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
        #endif

        if(custom_object->is_user_initialized)
        {
            #ifdef USE_WXPHP_DEBUG
            php_printf("Deleting pointer with delete\n");
            #endif

            delete custom_object->native_object;
            custom_object->native_object = NULL;
        }

        #ifdef USE_WXPHP_DEBUG
        php_printf("Deletion of wxPostScriptDC done\n");
        php_printf("===========================================\n\n");
        #endif
    }
    else
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Not user space initialized\n");
        #endif
    }

    zend_object_std_dtor(&custom_object->zo);
}

zend_object* php_wxPostScriptDC_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxPostScriptDC_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxPostScriptDC* custom_object;

    custom_object = (zo_wxPostScriptDC*) ecalloc(
        1,
        sizeof(zo_wxPostScriptDC)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    memcpy(&wxphp_wxPostScriptDC_object_handlers, zend_get_std_object_handlers(), sizeof wxphp_wxPostScriptDC_object_handlers);
    wxphp_wxPostScriptDC_object_handlers.offset = XtOffsetOf(zo_wxPostScriptDC, zo);
    wxphp_wxPostScriptDC_object_handlers.free_obj = php_wxPostScriptDC_free;
    custom_object->zo.handlers = &wxphp_wxPostScriptDC_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXPOSTSCRIPTDC_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto  wxPostScriptDC::wxPostScriptDC() */
PHP_METHOD(php_wxPostScriptDC, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxPostScriptDC::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxPostScriptDC* current_object;
    wxPostScriptDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    bool overload0_called = false;

    //Parameters for overload 1
    zval* printData1;
    wxPrintData* object_pointer1_0 = 0;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&printData1, php_wxPrintData_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &printData1, php_wxPrintData_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(printData1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPrintData_P(printData1)->object_type;
                    argument_native_object = (void*) Z_wxPrintData_P(printData1)->native_object;
                    object_pointer1_0 = (wxPrintData*) argument_native_object;
                    if (!object_pointer1_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'printData' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(printData1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'printData' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct()\n");
                #endif

                native_object = new wxPostScriptDC_php();

                native_object->references.Initialize();
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct(*(wxPrintData*) object_pointer1_0)\n");
                #endif

                native_object = new wxPostScriptDC_php(*(wxPrintData*) object_pointer1_0);

                native_object->references.Initialize();
                ((wxPostScriptDC_php*) native_object)->references.AddReference(printData1, "wxPostScriptDC::wxPostScriptDC at call 4 with 1 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxPostScriptDC_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxPostScriptDC::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxScreenDC_free(zend_object *object)
{
    zo_wxScreenDC* custom_object = php_wxScreenDC_fetch_object(object);

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxScreenDC_free on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    if(custom_object->native_object != NULL)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Pointer not null\n");
        php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
        #endif

        if(custom_object->is_user_initialized)
        {
            #ifdef USE_WXPHP_DEBUG
            php_printf("Deleting pointer with delete\n");
            #endif

            delete custom_object->native_object;
            custom_object->native_object = NULL;
        }

        #ifdef USE_WXPHP_DEBUG
        php_printf("Deletion of wxScreenDC done\n");
        php_printf("===========================================\n\n");
        #endif
    }
    else
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Not user space initialized\n");
        #endif
    }

    zend_object_std_dtor(&custom_object->zo);
}

zend_object* php_wxScreenDC_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxScreenDC_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxScreenDC* custom_object;

    custom_object = (zo_wxScreenDC*) ecalloc(
        1,
        sizeof(zo_wxScreenDC)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    memcpy(&wxphp_wxScreenDC_object_handlers, zend_get_std_object_handlers(), sizeof wxphp_wxScreenDC_object_handlers);
    wxphp_wxScreenDC_object_handlers.offset = XtOffsetOf(zo_wxScreenDC, zo);
    wxphp_wxScreenDC_object_handlers.free_obj = php_wxScreenDC_free;
    custom_object->zo.handlers = &wxphp_wxScreenDC_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXSCREENDC_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto bool wxScreenDC::EndDrawingOnTop()
   Use this in conjunction with StartDrawingOnTop(). */
PHP_METHOD(php_wxScreenDC, EndDrawingOnTop)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxScreenDC::EndDrawingOnTop\n");
    php_printf("===========================================\n");
    #endif

    zo_wxScreenDC* current_object;
    wxphp_object_type current_object_type;
    wxScreenDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxScreenDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxScreenDC::EndDrawingOnTop call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSCREENDC_TYPE){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Static ");
                php_printf("Executing RETURN_BOOL(wxScreenDC::EndDrawingOnTop())\n\n");
                #endif

                WXPHP_RETVAL_BOOL(wxScreenDC::EndDrawingOnTop());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxScreenDC::EndDrawingOnTop\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxScreenDC::StartDrawingOnTop(wxWindow &window)
   Use this in conjunction with EndDrawingOnTop() to ensure that drawing to the screen occurs on top of existing windows. */
PHP_METHOD(php_wxScreenDC, StartDrawingOnTop)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxScreenDC::StartDrawingOnTop\n");
    php_printf("===========================================\n");
    #endif

    zo_wxScreenDC* current_object;
    wxphp_object_type current_object_type;
    wxScreenDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxScreenDC_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxScreenDC::StartDrawingOnTop call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSCREENDC_TYPE){
                references = &((wxScreenDC_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* window0;
    wxWindow* object_pointer0_0 = 0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* rect1;
    wxRect* object_pointer1_0 = 0;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&window0)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &window0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(window0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(window0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(window0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(window0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 0  && arguments_received <= 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '|z' (&rect1)\n");
        #endif

        char parse_parameters_string[] = "|z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &rect1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(rect1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRect_P(rect1)->object_type;
                    argument_native_object = (void*) Z_wxRect_P(rect1)->native_object;
                    object_pointer1_0 = (wxRect*) argument_native_object;
                    if (!object_pointer1_0 || (argument_type != PHP_WXRECT_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'rect' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(rect1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'rect' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Static ");
                php_printf("Executing RETURN_BOOL(wxScreenDC::StartDrawingOnTop((wxWindow*) object_pointer0_0))\n\n");
                #endif

                WXPHP_RETVAL_BOOL(wxScreenDC::StartDrawingOnTop((wxWindow*) object_pointer0_0));


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Static ");
                php_printf("Executing RETURN_BOOL(wxScreenDC::StartDrawingOnTop())\n\n");
                #endif

                WXPHP_RETVAL_BOOL(wxScreenDC::StartDrawingOnTop());


                return;
                break;
            }
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Static ");
                php_printf("Executing RETURN_BOOL(wxScreenDC::StartDrawingOnTop((wxRect*) object_pointer1_0))\n\n");
                #endif

                WXPHP_RETVAL_BOOL(wxScreenDC::StartDrawingOnTop((wxRect*) object_pointer1_0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxScreenDC::StartDrawingOnTop\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxScreenDC::wxScreenDC()
   Constructor. */
PHP_METHOD(php_wxScreenDC, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxScreenDC::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxScreenDC* current_object;
    wxScreenDC_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct()\n");
                #endif

                native_object = new wxScreenDC_php();

                native_object->references.Initialize();
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxScreenDC_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxScreenDC::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

