/*
 * @author Mário Soares
 * @contributors Jefferson González
 * @contributors René Vögeli / Rangee GmbH
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @note
 * This file was auto-generated by the wxPHP source maker
*/

#ifndef WXPHP_DATA_H_GUARD
#define WXPHP_DATA_H_GUARD

#include "references.h"
#include "object_types.h"

ZEND_BEGIN_ARG_INFO_EX(wxphp_data_get_args, 0, 0, 1)
    ZEND_ARG_INFO(0, name)
ZEND_END_ARG_INFO()

extern zend_class_entry* php_wxRect_entry;
extern zend_object_handlers wxphp_wxRect_object_handlers;
void php_wxRect_destruction_handler(zend_resource*);

class wxRect_php: public wxRect{
    public:

    wxRect_php():wxRect(){}
    wxRect_php(int x, int y, int width, int height):wxRect(x, y, width, height){}
    wxRect_php(const wxPoint& topLeft, const wxPoint& bottomRight):wxRect(topLeft, bottomRight){}
    wxRect_php(const wxPoint& pos, const wxSize& size):wxRect(pos, size){}
    wxRect_php(const wxSize& size):wxRect(size){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxRect{
    wxRect_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxRect;

void php_wxRect_free(zend_object *object);
zend_object* php_wxRect_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxRect_functions[] = {
    PHP_ME(php_wxRect, __construct, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxRect, SetX, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, SetY, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, Union, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, SetWidth, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, SetSize, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, SetHeight, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, Offset, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, IsEmpty, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, Intersects, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, Intersect, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, Inflate, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, GetY, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, GetX, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, GetWidth, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, GetTopRight, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, GetTopLeft, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, GetTop, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, GetSize, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, GetRight, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, GetPosition, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, CenterIn, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, CentreIn, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, Contains, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, Deflate, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, GetBottom, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, GetBottomLeft, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, GetBottomRight, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, GetHeight, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRect, GetLeft, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxRect * php_wxRect_fetch_object(zend_object *obj) {
    return (zo_wxRect *)(
        (char *)(obj) - XtOffsetOf(zo_wxRect, zo)
    );
}

#define Z_wxRect_P(zv) \
    php_wxRect_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxAcceleratorEntry_entry;
extern zend_object_handlers wxphp_wxAcceleratorEntry_object_handlers;
void php_wxAcceleratorEntry_destruction_handler(zend_resource*);

class wxAcceleratorEntry_php: public wxAcceleratorEntry{
    public:

    wxAcceleratorEntry_php(int flags=0, int keyCode=0, int cmd=0, wxMenuItem* item=NULL):wxAcceleratorEntry(flags, keyCode, cmd, item){}
    wxAcceleratorEntry_php(const wxAcceleratorEntry& entry):wxAcceleratorEntry(entry){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxAcceleratorEntry{
    wxAcceleratorEntry_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxAcceleratorEntry;

void php_wxAcceleratorEntry_free(zend_object *object);
zend_object* php_wxAcceleratorEntry_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxAcceleratorEntry_functions[] = {
    PHP_ME(php_wxAcceleratorEntry, __construct, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxAcceleratorEntry, ToString, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAcceleratorEntry, Set, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAcceleratorEntry, IsOk, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAcceleratorEntry, GetMenuItem, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAcceleratorEntry, GetKeyCode, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAcceleratorEntry, GetFlags, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAcceleratorEntry, GetCommand, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAcceleratorEntry, FromString, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxAcceleratorEntry * php_wxAcceleratorEntry_fetch_object(zend_object *obj) {
    return (zo_wxAcceleratorEntry *)(
        (char *)(obj) - XtOffsetOf(zo_wxAcceleratorEntry, zo)
    );
}

#define Z_wxAcceleratorEntry_P(zv) \
    php_wxAcceleratorEntry_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxAcceleratorTable_entry;
extern zend_object_handlers wxphp_wxAcceleratorTable_object_handlers;
void php_wxAcceleratorTable_destruction_handler(zend_resource*);

class wxAcceleratorTable_php: public wxAcceleratorTable{
    public:

    wxAcceleratorTable_php():wxAcceleratorTable(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxAcceleratorTable{
    wxAcceleratorTable_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxAcceleratorTable;

void php_wxAcceleratorTable_free(zend_object *object);
zend_object* php_wxAcceleratorTable_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxAcceleratorTable_functions[] = {
    PHP_ME(php_wxAcceleratorTable, IsOk, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAcceleratorTable, __construct, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxAcceleratorTable * php_wxAcceleratorTable_fetch_object(zend_object *obj) {
    return (zo_wxAcceleratorTable *)(
        (char *)(obj) - XtOffsetOf(zo_wxAcceleratorTable, zo)
    );
}

#define Z_wxAcceleratorTable_P(zv) \
    php_wxAcceleratorTable_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxCalendarDateAttr_entry;
extern zend_object_handlers wxphp_wxCalendarDateAttr_object_handlers;
void php_wxCalendarDateAttr_destruction_handler(zend_resource*);

class wxCalendarDateAttr_php: public wxCalendarDateAttr{
    public:

    wxCalendarDateAttr_php(const wxColour& colText=wxNullColour, const wxColour& colBack=wxNullColour, const wxColour& colBorder=wxNullColour, const wxFont& font=wxNullFont, wxCalendarDateBorder border=wxCAL_BORDER_NONE):wxCalendarDateAttr(colText, colBack, colBorder, font, border){}
    wxCalendarDateAttr_php(wxCalendarDateBorder border, const wxColour& colBorder=wxNullColour):wxCalendarDateAttr(border, colBorder){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxCalendarDateAttr{
    wxCalendarDateAttr_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxCalendarDateAttr;

void php_wxCalendarDateAttr_free(zend_object *object);
zend_object* php_wxCalendarDateAttr_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxCalendarDateAttr_functions[] = {
    PHP_ME(php_wxCalendarDateAttr, __construct, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxCalendarDateAttr, SetTextColour, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalendarDateAttr, SetHoliday, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalendarDateAttr, SetFont, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalendarDateAttr, SetBorderColour, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalendarDateAttr, SetBorder, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalendarDateAttr, SetBackgroundColour, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalendarDateAttr, IsHoliday, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalendarDateAttr, HasTextColour, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalendarDateAttr, HasFont, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalendarDateAttr, HasBorderColour, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalendarDateAttr, HasBorder, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalendarDateAttr, HasBackgroundColour, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalendarDateAttr, GetTextColour, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalendarDateAttr, GetMark, arginfo_tmp_placeholder, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalendarDateAttr, GetFont, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalendarDateAttr, GetBorderColour, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalendarDateAttr, GetBorder, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalendarDateAttr, GetBackgroundColour, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalendarDateAttr, SetMark, arginfo_tmp_placeholder, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxCalendarDateAttr * php_wxCalendarDateAttr_fetch_object(zend_object *obj) {
    return (zo_wxCalendarDateAttr *)(
        (char *)(obj) - XtOffsetOf(zo_wxCalendarDateAttr, zo)
    );
}

#define Z_wxCalendarDateAttr_P(zv) \
    php_wxCalendarDateAttr_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxPageSetupDialogData_entry;
extern zend_object_handlers wxphp_wxPageSetupDialogData_object_handlers;
void php_wxPageSetupDialogData_destruction_handler(zend_resource*);

class wxPageSetupDialogData_php: public wxPageSetupDialogData{
    public:

    wxPageSetupDialogData_php():wxPageSetupDialogData(){}
    wxPageSetupDialogData_php(const wxPageSetupDialogData& data):wxPageSetupDialogData(data){}
    wxPageSetupDialogData_php(const wxPrintData& printData):wxPageSetupDialogData(printData){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxPageSetupDialogData{
    wxPageSetupDialogData_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxPageSetupDialogData;

void php_wxPageSetupDialogData_free(zend_object *object);
zend_object* php_wxPageSetupDialogData_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxPageSetupDialogData_functions[] = {
    PHP_ME(php_wxPageSetupDialogData, EnableHelp, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, EnableMargins, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, EnableOrientation, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, EnablePaper, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, EnablePrinter, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, GetDefaultInfo, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, GetDefaultMinMargins, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, GetEnableHelp, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, GetEnableMargins, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, GetEnableOrientation, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, GetEnablePaper, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, GetEnablePrinter, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, GetMarginBottomRight, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, GetMarginTopLeft, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, GetMinMarginBottomRight, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, GetMinMarginTopLeft, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, GetPaperId, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, GetPaperSize, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, GetPrintData, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, IsOk, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, SetDefaultInfo, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, SetDefaultMinMargins, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, SetMarginBottomRight, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, SetMarginTopLeft, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, SetMinMarginBottomRight, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, SetMinMarginTopLeft, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, SetPaperId, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, SetPaperSize, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, SetPrintData, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPageSetupDialogData, __construct, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxPageSetupDialogData * php_wxPageSetupDialogData_fetch_object(zend_object *obj) {
    return (zo_wxPageSetupDialogData *)(
        (char *)(obj) - XtOffsetOf(zo_wxPageSetupDialogData, zo)
    );
}

#define Z_wxPageSetupDialogData_P(zv) \
    php_wxPageSetupDialogData_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxPrintData_entry;
extern zend_object_handlers wxphp_wxPrintData_object_handlers;
void php_wxPrintData_destruction_handler(zend_resource*);

class wxPrintData_php: public wxPrintData{
    public:

    wxPrintData_php():wxPrintData(){}
    wxPrintData_php(const wxPrintData& data):wxPrintData(data){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxPrintData{
    wxPrintData_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxPrintData;

void php_wxPrintData_free(zend_object *object);
zend_object* php_wxPrintData_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxPrintData_functions[] = {
    PHP_ME(php_wxPrintData, GetBin, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, GetCollate, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, GetColour, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, GetDuplex, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, GetFilename, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, GetNoCopies, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, GetOrientation, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, GetPaperId, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, GetPrintMode, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, GetPrinterName, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, GetQuality, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, IsOk, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, SetBin, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, SetCollate, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, SetColour, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, SetDuplex, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, SetFilename, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, SetNoCopies, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, SetOrientation, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, SetPaperId, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, SetPrintMode, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, SetPrinterName, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, SetQuality, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintData, __construct, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxPrintData * php_wxPrintData_fetch_object(zend_object *obj) {
    return (zo_wxPrintData *)(
        (char *)(obj) - XtOffsetOf(zo_wxPrintData, zo)
    );
}

#define Z_wxPrintData_P(zv) \
    php_wxPrintData_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxRealPoint_entry;
extern zend_object_handlers wxphp_wxRealPoint_object_handlers;
void php_wxRealPoint_destruction_handler(zend_resource*);

class wxRealPoint_php: public wxRealPoint{
    public:

    wxRealPoint_php():wxRealPoint(){}
    wxRealPoint_php(double x, double y):wxRealPoint(x, y){}
    wxRealPoint_php(const wxPoint& pt):wxRealPoint(pt){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxRealPoint{
    wxRealPoint_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxRealPoint;

void php_wxRealPoint_free(zend_object *object);
zend_object* php_wxRealPoint_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxRealPoint_functions[] = {
    PHP_ME(php_wxRealPoint, __construct, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxRealPoint * php_wxRealPoint_fetch_object(zend_object *obj) {
    return (zo_wxRealPoint *)(
        (char *)(obj) - XtOffsetOf(zo_wxRealPoint, zo)
    );
}

#define Z_wxRealPoint_P(zv) \
    php_wxRealPoint_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxPoint_entry;
extern zend_object_handlers wxphp_wxPoint_object_handlers;
void php_wxPoint_destruction_handler(zend_resource*);

class wxPoint_php: public wxPoint{
    public:

    wxPoint_php():wxPoint(){}
    wxPoint_php(int x, int y):wxPoint(x, y){}
    wxPoint_php(const wxRealPoint& pt):wxPoint(pt){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxPoint{
    wxPoint_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxPoint;

void php_wxPoint_free(zend_object *object);
zend_object* php_wxPoint_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxPoint_functions[] = {
    PHP_ME(php_wxPoint, __construct, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxPoint, IsFullySpecified, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxPoint * php_wxPoint_fetch_object(zend_object *obj) {
    return (zo_wxPoint *)(
        (char *)(obj) - XtOffsetOf(zo_wxPoint, zo)
    );
}

#define Z_wxPoint_P(zv) \
    php_wxPoint_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxSize_entry;
extern zend_object_handlers wxphp_wxSize_object_handlers;
void php_wxSize_destruction_handler(zend_resource*);

class wxSize_php: public wxSize{
    public:

    wxSize_php():wxSize(){}
    wxSize_php(int width, int height):wxSize(width, height){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxSize{
    wxSize_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxSize;

void php_wxSize_free(zend_object *object);
zend_object* php_wxSize_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxSize_functions[] = {
    PHP_ME(php_wxSize, __construct, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxSize, SetWidth, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSize, SetHeight, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSize, SetDefaults, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSize, Set, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSize, GetHeight, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSize, GetWidth, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSize, IsFullySpecified, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSize, Scale, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSize, DecTo, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSize, IncTo, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxSize * php_wxSize_fetch_object(zend_object *obj) {
    return (zo_wxSize *)(
        (char *)(obj) - XtOffsetOf(zo_wxSize, zo)
    );
}

#define Z_wxSize_P(zv) \
    php_wxSize_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxListItem_entry;
extern zend_object_handlers wxphp_wxListItem_object_handlers;
void php_wxListItem_destruction_handler(zend_resource*);

class wxListItem_php: public wxListItem{
    public:

    wxListItem_php():wxListItem(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxListItem{
    wxListItem_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxListItem;

void php_wxListItem_free(zend_object *object);
zend_object* php_wxListItem_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxListItem_functions[] = {
    PHP_ME(php_wxListItem, Clear, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, __construct, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxListItem, SetWidth, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, SetTextColour, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, SetText, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, SetStateMask, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, SetState, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, SetMask, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, SetImage, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, SetId, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, SetFont, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, SetData, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, SetColumn, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, SetBackgroundColour, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, SetAlign, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, GetWidth, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, GetTextColour, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, GetText, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, GetState, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, GetMask, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, GetImage, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, GetId, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, GetAlign, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, GetBackgroundColour, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, GetColumn, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListItem, GetFont, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxListItem * php_wxListItem_fetch_object(zend_object *obj) {
    return (zo_wxListItem *)(
        (char *)(obj) - XtOffsetOf(zo_wxListItem, zo)
    );
}

#define Z_wxListItem_P(zv) \
    php_wxListItem_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxFileType_entry;
extern zend_object_handlers wxphp_wxFileType_object_handlers;
void php_wxFileType_destruction_handler(zend_resource*);

class wxFileType_php: public wxFileType{
    public:

    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxFileType{
    wxFileType_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxFileType;

void php_wxFileType_free(zend_object *object);
zend_object* php_wxFileType_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxFileType_functions[] = {
    PHP_ME(php_wxFileType, GetDescription, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileType, GetExtensions, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileType, GetMimeType, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileType, GetMimeTypes, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileType, GetOpenCommand, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxFileType * php_wxFileType_fetch_object(zend_object *obj) {
    return (zo_wxFileType *)(
        (char *)(obj) - XtOffsetOf(zo_wxFileType, zo)
    );
}

#define Z_wxFileType_P(zv) \
    php_wxFileType_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxPosition_entry;
extern zend_object_handlers wxphp_wxPosition_object_handlers;
void php_wxPosition_destruction_handler(zend_resource*);

class wxPosition_php: public wxPosition{
    public:

    wxPosition_php():wxPosition(){}
    wxPosition_php(int row, int col):wxPosition(row, col){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxPosition{
    wxPosition_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxPosition;

void php_wxPosition_free(zend_object *object);
zend_object* php_wxPosition_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxPosition_functions[] = {
    PHP_ME(php_wxPosition, GetCol, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPosition, GetColumn, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPosition, GetRow, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPosition, SetCol, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPosition, SetColumn, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPosition, SetRow, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPosition, __construct, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxPosition * php_wxPosition_fetch_object(zend_object *obj) {
    return (zo_wxPosition *)(
        (char *)(obj) - XtOffsetOf(zo_wxPosition, zo)
    );
}

#define Z_wxPosition_P(zv) \
    php_wxPosition_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxRegion_entry;
extern zend_object_handlers wxphp_wxRegion_object_handlers;
void php_wxRegion_destruction_handler(zend_resource*);

class wxRegion_php: public wxRegion{
    public:

    wxRegion_php():wxRegion(){}
    wxRegion_php(wxCoord x, wxCoord y, wxCoord width, wxCoord height):wxRegion(x, y, width, height){}
    wxRegion_php(const wxPoint& topLeft, const wxPoint& bottomRight):wxRegion(topLeft, bottomRight){}
    wxRegion_php(const wxRect& rect):wxRegion(rect){}
    wxRegion_php(const wxRegion& region):wxRegion(region){}
    wxRegion_php(size_t n, const wxPoint* points, wxPolygonFillMode fillStyle=wxODDEVEN_RULE):wxRegion(n, points, fillStyle){}
    wxRegion_php(const wxBitmap& bmp):wxRegion(bmp){}
    wxRegion_php(const wxBitmap& bmp, const wxColour& transColour, int tolerance=0):wxRegion(bmp, transColour, tolerance){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxRegion{
    wxRegion_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxRegion;

void php_wxRegion_free(zend_object *object);
zend_object* php_wxRegion_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxRegion_functions[] = {
    PHP_ME(php_wxRegion, Clear, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRegion, Contains, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRegion, ConvertToBitmap, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRegion, GetBox, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRegion, Intersect, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRegion, IsEmpty, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRegion, IsEqual, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRegion, Offset, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRegion, Subtract, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRegion, Union, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRegion, XorMethod, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRegion, __construct, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxRegion * php_wxRegion_fetch_object(zend_object *obj) {
    return (zo_wxRegion *)(
        (char *)(obj) - XtOffsetOf(zo_wxRegion, zo)
    );
}

#define Z_wxRegion_P(zv) \
    php_wxRegion_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxStatusBarPane_entry;
extern zend_object_handlers wxphp_wxStatusBarPane_object_handlers;
void php_wxStatusBarPane_destruction_handler(zend_resource*);

class wxStatusBarPane_php: public wxStatusBarPane{
    public:

    wxStatusBarPane_php(int style=wxSB_NORMAL, int width=0):wxStatusBarPane(style, width){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxStatusBarPane{
    wxStatusBarPane_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxStatusBarPane;

void php_wxStatusBarPane_free(zend_object *object);
zend_object* php_wxStatusBarPane_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxStatusBarPane_functions[] = {
    PHP_ME(php_wxStatusBarPane, __construct, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxStatusBarPane, GetText, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStatusBarPane, GetStyle, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStatusBarPane, GetWidth, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxStatusBarPane * php_wxStatusBarPane_fetch_object(zend_object *obj) {
    return (zo_wxStatusBarPane *)(
        (char *)(obj) - XtOffsetOf(zo_wxStatusBarPane, zo)
    );
}

#define Z_wxStatusBarPane_P(zv) \
    php_wxStatusBarPane_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxTreeItemId_entry;
extern zend_object_handlers wxphp_wxTreeItemId_object_handlers;
void php_wxTreeItemId_destruction_handler(zend_resource*);

class wxTreeItemId_php: public wxTreeItemId{
    public:

    wxTreeItemId_php():wxTreeItemId(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxTreeItemId{
    wxTreeItemId_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxTreeItemId;

void php_wxTreeItemId_free(zend_object *object);
zend_object* php_wxTreeItemId_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxTreeItemId_functions[] = {
    PHP_ME(php_wxTreeItemId, __construct, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxTreeItemId, IsOk, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxTreeItemId * php_wxTreeItemId_fetch_object(zend_object *obj) {
    return (zo_wxTreeItemId *)(
        (char *)(obj) - XtOffsetOf(zo_wxTreeItemId, zo)
    );
}

#define Z_wxTreeItemId_P(zv) \
    php_wxTreeItemId_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxVariant_entry;
extern zend_object_handlers wxphp_wxVariant_object_handlers;
void php_wxVariant_destruction_handler(zend_resource*);

class wxVariant_php: public wxVariant{
    public:

    wxVariant_php():wxVariant(){}
    wxVariant_php(wxVariantData* data, const wxString& name=wxEmptyString):wxVariant(data, name){}
    wxVariant_php(const wxVariant& variant):wxVariant(variant){}
    wxVariant_php(const wxString& value, const wxString& name=wxEmptyString):wxVariant(value, name){}
    wxVariant_php(long value, const wxString& name=wxEmptyString):wxVariant(value, name){}
    wxVariant_php(bool value, const wxString& name=wxEmptyString):wxVariant(value, name){}
    wxVariant_php(double value, const wxString& name=wxEmptyString):wxVariant(value, name){}
    wxVariant_php(void* value, const wxString& name=wxEmptyString):wxVariant(value, name){}
    wxVariant_php(wxObject* value, const wxString& name=wxEmptyString):wxVariant(value, name){}
    wxVariant_php(const wxDateTime& val, const wxString& name=wxEmptyString):wxVariant(val, name){}
    wxVariant_php(const wxArrayString& val, const wxString& name=wxEmptyString):wxVariant(val, name){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxVariant{
    wxVariant_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxVariant;

void php_wxVariant_free(zend_object *object);
zend_object* php_wxVariant_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxVariant_functions[] = {
    PHP_ME(php_wxVariant, Append, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, Clear, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, ClearList, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, Convert, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, Delete, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, GetArrayString, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, GetBool, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, GetData, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, GetDateTime, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, GetDouble, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, GetLong, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, GetName, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, GetType, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, GetVoidPtr, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, GetWxObjectPtr, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, Insert, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, IsNull, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, IsValueKindOf, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, MakeNull, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, MakeString, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, Member, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, IsType, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, GetString, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, GetCount, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, NullList, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, SetData, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariant, __construct, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxVariant * php_wxVariant_fetch_object(zend_object *obj) {
    return (zo_wxVariant *)(
        (char *)(obj) - XtOffsetOf(zo_wxVariant, zo)
    );
}

#define Z_wxVariant_P(zv) \
    php_wxVariant_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxVariantData_entry;
extern zend_object_handlers wxphp_wxVariantData_object_handlers;
void php_wxVariantData_destruction_handler(zend_resource*);

class wxVariantData_php: public wxVariantData{
    public:

    wxVariantData_php():wxVariantData(){}
    
    bool Eq(wxVariantData& data) const;
    wxString GetType() const;
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxVariantData{
    wxVariantData_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxVariantData;

void php_wxVariantData_free(zend_object *object);
zend_object* php_wxVariantData_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxVariantData_functions[] = {
    PHP_ME(php_wxVariantData, CloneMethod, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariantData, DecRef, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariantData, GetValueClassInfo, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariantData, IncRef, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariantData, Read, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariantData, Write, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVariantData, __construct, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxVariantData * php_wxVariantData_fetch_object(zend_object *obj) {
    return (zo_wxVariantData *)(
        (char *)(obj) - XtOffsetOf(zo_wxVariantData, zo)
    );
}

#define Z_wxVariantData_P(zv) \
    php_wxVariantData_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxVersionInfo_entry;
extern zend_object_handlers wxphp_wxVersionInfo_object_handlers;
void php_wxVersionInfo_destruction_handler(zend_resource*);

class wxVersionInfo_php: public wxVersionInfo{
    public:

    wxVersionInfo_php(const wxString& name=wxString(), int major=0, int minor=0, int micro=0, int revision=0, const wxString& description=wxString(), const wxString& copyright=wxString()):wxVersionInfo(name, major, minor, micro, revision, description, copyright){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxVersionInfo{
    wxVersionInfo_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxVersionInfo;

void php_wxVersionInfo_free(zend_object *object);
zend_object* php_wxVersionInfo_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxVersionInfo_functions[] = {
    PHP_ME(php_wxVersionInfo, ToString, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVersionInfo, HasCopyright, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVersionInfo, GetVersionString, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVersionInfo, GetName, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVersionInfo, GetMinor, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVersionInfo, GetMicro, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVersionInfo, GetMajor, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVersionInfo, GetDescription, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVersionInfo, GetCopyright, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVersionInfo, __construct, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxVersionInfo, HasDescription, arginfo_tmp_placeholder, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxVersionInfo * php_wxVersionInfo_fetch_object(zend_object *obj) {
    return (zo_wxVersionInfo *)(
        (char *)(obj) - XtOffsetOf(zo_wxVersionInfo, zo)
    );
}

#define Z_wxVersionInfo_P(zv) \
    php_wxVersionInfo_fetch_object(Z_OBJ_P(zv))
#endif //WXPHP_DATA_H_GUARD
