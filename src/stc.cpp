/*
 * @author Mário Soares
 * @contributors Jefferson González
 * @contributors René Vögeli / Rangee GmbH
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @note
 * This file was auto-generated by the wxPHP source maker
*/

#include "php_wxwidgets.h"
#include "appmanagement.h"
#include "cfg.h"
#include "bookctrl.h"
#include "dnd.h"
#include "cmndlg.h"
#include "containers.h"
#include "ctrl.h"
#include "data.h"
#include "dc.h"
#include "docview.h"
#include "events.h"
#include "file.h"
#include "gdi.h"
#include "grid.h"
#include "html.h"
#include "help.h"
#include "logging.h"
#include "managedwnd.h"
#include "menus.h"
#include "misc.h"
#include "miscwnd.h"
#include "media.h"
#include "net.h"
#include "pickers.h"
#include "printing.h"
#include "ribbon.h"
#include "richtext.h"
#include "rtti.h"
#include "stc.h"
#include "streams.h"
#include "threading.h"
#include "validator.h"
#include "vfs.h"
#include "aui.h"
#include "winlayout.h"
#include "xml.h"
#include "xrc.h"
#include "dvc.h"
#include "others.h"


BEGIN_EXTERN_C()
void php_wxStyledTextCtrl_free(void *object)
{
    zo_wxStyledTextCtrl* custom_object = (zo_wxStyledTextCtrl*) object;

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Obviate delete call for wxStyledTextCtrl on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n\n");
    #endif

    zend_object_std_dtor(&custom_object->zo);
    efree(custom_object);
}

zend_object* php_wxStyledTextCtrl_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxStyledTextCtrl_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* custom_object;

    custom_object = (zo_wxStyledTextCtrl*) ecalloc(
        1,
        sizeof(zo_wxStyledTextCtrl)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    custom_object->zo.handlers = &wxphp_wxStyledTextCtrl_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXSTYLEDTEXTCTRL_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto  wxStyledTextCtrl::wxStyledTextCtrl(wxWindow &parent, int id, wxPoint pos, wxSize size, int style, string name)
   Ctor. */
PHP_METHOD(php_wxStyledTextCtrl, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    zval* parent0;
    wxWindow* object_pointer0_0 = 0;
    long id0;
    zval* pos0;
    wxPoint* object_pointer0_2 = 0;
    zval* size0;
    wxSize* object_pointer0_3 = 0;
    long style0;
    char* name0;
    size_t name_len0;
    bool overload0_called = false;

    //Parameters for overload 1
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 6)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z|lOOls' (&parent0, &id0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0)\n");
        #endif

        char parse_parameters_string[] = "z|lOOls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent0, &id0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(pos0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos0)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos0)->native_object;
                    object_pointer0_2 = (wxPoint*) argument_native_object;
                    if (!object_pointer0_2 )
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(pos0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(size0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size0)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size0)->native_object;
                    object_pointer0_3 = (wxSize*) argument_native_object;
                    if (!object_pointer0_3 )
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(size0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload1_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
                #endif

                native_object = new wxStyledTextCtrl_php((wxWindow*) object_pointer0_0);

                native_object->references.Initialize();
                ((wxStyledTextCtrl_php*) native_object)->references.AddReference(parent0, "wxStyledTextCtrl::wxStyledTextCtrl at call 2 with 1 argument(s)");
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer0_0, (wxWindowID) id0)\n");
                #endif

                native_object = new wxStyledTextCtrl_php((wxWindow*) object_pointer0_0, (wxWindowID) id0);

                native_object->references.Initialize();
                ((wxStyledTextCtrl_php*) native_object)->references.AddReference(parent0, "wxStyledTextCtrl::wxStyledTextCtrl at call 2 with 2 argument(s)");
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2)\n");
                #endif

                native_object = new wxStyledTextCtrl_php((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2);

                native_object->references.Initialize();
                ((wxStyledTextCtrl_php*) native_object)->references.AddReference(parent0, "wxStyledTextCtrl::wxStyledTextCtrl at call 2 with 3 argument(s)");
                ((wxStyledTextCtrl_php*) native_object)->references.AddReference(pos0, "wxStyledTextCtrl::wxStyledTextCtrl at call 4 with 3 argument(s)");
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3)\n");
                #endif

                native_object = new wxStyledTextCtrl_php((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3);

                native_object->references.Initialize();
                ((wxStyledTextCtrl_php*) native_object)->references.AddReference(parent0, "wxStyledTextCtrl::wxStyledTextCtrl at call 2 with 4 argument(s)");
                ((wxStyledTextCtrl_php*) native_object)->references.AddReference(pos0, "wxStyledTextCtrl::wxStyledTextCtrl at call 4 with 4 argument(s)");
                ((wxStyledTextCtrl_php*) native_object)->references.AddReference(size0, "wxStyledTextCtrl::wxStyledTextCtrl at call 4 with 4 argument(s)");
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3, (long) style0)\n");
                #endif

                native_object = new wxStyledTextCtrl_php((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3, (long) style0);

                native_object->references.Initialize();
                ((wxStyledTextCtrl_php*) native_object)->references.AddReference(parent0, "wxStyledTextCtrl::wxStyledTextCtrl at call 2 with 5 argument(s)");
                ((wxStyledTextCtrl_php*) native_object)->references.AddReference(pos0, "wxStyledTextCtrl::wxStyledTextCtrl at call 4 with 5 argument(s)");
                ((wxStyledTextCtrl_php*) native_object)->references.AddReference(size0, "wxStyledTextCtrl::wxStyledTextCtrl at call 4 with 5 argument(s)");
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3, (long) style0, wxString(name0, wxConvUTF8))\n");
                #endif

                native_object = new wxStyledTextCtrl_php((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3, (long) style0, wxString(name0, wxConvUTF8));

                native_object->references.Initialize();
                ((wxStyledTextCtrl_php*) native_object)->references.AddReference(parent0, "wxStyledTextCtrl::wxStyledTextCtrl at call 2 with 6 argument(s)");
                ((wxStyledTextCtrl_php*) native_object)->references.AddReference(pos0, "wxStyledTextCtrl::wxStyledTextCtrl at call 4 with 6 argument(s)");
                ((wxStyledTextCtrl_php*) native_object)->references.AddReference(size0, "wxStyledTextCtrl::wxStyledTextCtrl at call 4 with 6 argument(s)");
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct()\n");
                #endif

                native_object = new wxStyledTextCtrl_php();

                native_object->references.Initialize();
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxStyledTextCtrl_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxStyledTextCtrl::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::AutoCompGetCurrent()
   Get currently selected item position in the auto-completion list. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompGetCurrent)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompGetCurrent\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompGetCurrent call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::AutoCompGetCurrent())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->AutoCompGetCurrent());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompGetCurrent\n"
        );
    }
}
/* }}} */

/* {{{ proto wxDragResult wxStyledTextCtrl::DoDragOver(int x, int y, wxDragResult defaultRes)
   Allow for simulating a DnD DragOver. */
PHP_METHOD(php_wxStyledTextCtrl, DoDragOver)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::DoDragOver\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::DoDragOver call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    long defaultRes0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lll' (&x0, &y0, &defaultRes0)\n");
        #endif

        char parse_parameters_string[] = "lll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0, &defaultRes0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::DoDragOver((wxCoord) x0, (wxCoord) y0, (wxDragResult) defaultRes0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->DoDragOver((wxCoord) x0, (wxCoord) y0, (wxDragResult) defaultRes0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::DoDragOver\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetCaretSticky()
   Can the caret preferred x position only be changed by explicit movement commands? */
PHP_METHOD(php_wxStyledTextCtrl, GetCaretSticky)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetCaretSticky\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetCaretSticky call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetCaretSticky())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetCaretSticky());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetCaretSticky\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::GetCharacterPointer()
   Compact the document buffer and return a read-only pointer to the characters in the document. */
PHP_METHOD(php_wxStyledTextCtrl, GetCharacterPointer)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetCharacterPointer\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetCharacterPointer call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::GetCharacterPointer().ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return0;
                value_to_return0 = (char*) ((wxStyledTextCtrl_php*)native_object)->GetCharacterPointer();
                RETVAL_STRING(value_to_return0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetCharacterPointer\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::LoadFile(string filename)
   Load the contents of filename into the editor. */
PHP_METHOD(php_wxStyledTextCtrl, LoadFile)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LoadFile\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LoadFile call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* filename0;
    size_t filename_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&filename0, &filename_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &filename0, &filename_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::LoadFile(wxString(filename0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->LoadFile(wxString(filename0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LoadFile\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::SaveFile(string filename)
   Write the contents of the editor to filename. */
PHP_METHOD(php_wxStyledTextCtrl, SaveFile)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SaveFile\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SaveFile call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* filename0;
    size_t filename_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&filename0, &filename_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &filename0, &filename_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::SaveFile(wxString(filename0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->SaveFile(wxString(filename0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SaveFile\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetCaretSticky(int useCaretStickyBehaviour)
   Stop the caret preferred x position changing when the user types. */
PHP_METHOD(php_wxStyledTextCtrl, SetCaretSticky)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetCaretSticky\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetCaretSticky call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long useCaretStickyBehaviour0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&useCaretStickyBehaviour0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &useCaretStickyBehaviour0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetCaretSticky((int) useCaretStickyBehaviour0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetCaretSticky((int) useCaretStickyBehaviour0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetCaretSticky\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ZoomOut()
   Make the displayed text smaller by decreasing the sizes by 1 point. */
PHP_METHOD(php_wxStyledTextCtrl, ZoomOut)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ZoomOut\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ZoomOut call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ZoomOut()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ZoomOut();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ZoomOut\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ZoomIn()
   Magnify the displayed text by increasing the sizes by 1 point. */
PHP_METHOD(php_wxStyledTextCtrl, ZoomIn)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ZoomIn\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ZoomIn call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ZoomIn()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ZoomIn();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ZoomIn\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AddText(string text)
   Add text to the document at current position. */
PHP_METHOD(php_wxStyledTextCtrl, AddText)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AddText\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AddText call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* text0;
    size_t text_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&text0, &text_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &text0, &text_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AddText(wxString(text0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AddText(wxString(text0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AddText\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::AddSelection(int caret, int anchor)
   Add a selection. */
PHP_METHOD(php_wxStyledTextCtrl, AddSelection)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AddSelection\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AddSelection call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long caret0;
    long anchor0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&caret0, &anchor0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &caret0, &anchor0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::AddSelection((int) caret0, (int) anchor0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->AddSelection((int) caret0, (int) anchor0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AddSelection\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::WrapCount(int docLine)
   The number of display lines needed to wrap a document line. */
PHP_METHOD(php_wxStyledTextCtrl, WrapCount)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::WrapCount\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::WrapCount call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long docLine0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&docLine0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &docLine0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::WrapCount((int) docLine0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->WrapCount((int) docLine0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::WrapCount\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::WordStartPosition(int pos, bool onlyWordCharacters)
   Get position of start of word. */
PHP_METHOD(php_wxStyledTextCtrl, WordStartPosition)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::WordStartPosition\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::WordStartPosition call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pos0;
    bool onlyWordCharacters0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lb' (&pos0, &onlyWordCharacters0)\n");
        #endif

        char parse_parameters_string[] = "lb";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pos0, &onlyWordCharacters0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::WordStartPosition((int) pos0, onlyWordCharacters0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->WordStartPosition((int) pos0, onlyWordCharacters0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::WordStartPosition\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::WordRightExtend()
   Move caret right one word extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, WordRightExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::WordRightExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::WordRightExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::WordRightExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->WordRightExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::WordRightExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AddUndoAction(int token, int flags)
   Add a container action to the undo stack. */
PHP_METHOD(php_wxStyledTextCtrl, AddUndoAction)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AddUndoAction\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AddUndoAction call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long token0;
    long flags0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&token0, &flags0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &token0, &flags0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AddUndoAction((int) token0, (int) flags0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AddUndoAction((int) token0, (int) flags0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AddUndoAction\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::Allocate(int bytes)
   Enlarge the document to a particular size of text bytes. */
PHP_METHOD(php_wxStyledTextCtrl, Allocate)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::Allocate\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::Allocate call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long bytes0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&bytes0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &bytes0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::Allocate((int) bytes0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->Allocate((int) bytes0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::Allocate\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AnnotationClearAll()
   Clear the annotations from all lines. */
PHP_METHOD(php_wxStyledTextCtrl, AnnotationClearAll)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AnnotationClearAll\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AnnotationClearAll call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AnnotationClearAll()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AnnotationClearAll();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AnnotationClearAll\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::AnnotationGetLines(int line)
   Get the number of annotation lines for a line. */
PHP_METHOD(php_wxStyledTextCtrl, AnnotationGetLines)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AnnotationGetLines\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AnnotationGetLines call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::AnnotationGetLines((int) line0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->AnnotationGetLines((int) line0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AnnotationGetLines\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::AnnotationGetStyle(int line)
   Get the style number for the annotations for a line. */
PHP_METHOD(php_wxStyledTextCtrl, AnnotationGetStyle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AnnotationGetStyle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AnnotationGetStyle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::AnnotationGetStyle((int) line0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->AnnotationGetStyle((int) line0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AnnotationGetStyle\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::AnnotationGetStyleOffset()
   Get the start of the range of style numbers used for annotations. */
PHP_METHOD(php_wxStyledTextCtrl, AnnotationGetStyleOffset)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AnnotationGetStyleOffset\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AnnotationGetStyleOffset call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::AnnotationGetStyleOffset())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->AnnotationGetStyleOffset());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AnnotationGetStyleOffset\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::AnnotationGetStyles(int line)
   Get the annotation styles for a line. */
PHP_METHOD(php_wxStyledTextCtrl, AnnotationGetStyles)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AnnotationGetStyles\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AnnotationGetStyles call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::AnnotationGetStyles((int) line0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = ((wxStyledTextCtrl_php*)native_object)->AnnotationGetStyles((int) line0);
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AnnotationGetStyles\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::AnnotationGetText(int line)
   Get the annotation text for a line. */
PHP_METHOD(php_wxStyledTextCtrl, AnnotationGetText)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AnnotationGetText\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AnnotationGetText call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::AnnotationGetText((int) line0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = ((wxStyledTextCtrl_php*)native_object)->AnnotationGetText((int) line0);
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AnnotationGetText\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::AnnotationGetVisible()
   Get the visibility for the annotations for a view. */
PHP_METHOD(php_wxStyledTextCtrl, AnnotationGetVisible)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AnnotationGetVisible\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AnnotationGetVisible call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::AnnotationGetVisible())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->AnnotationGetVisible());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AnnotationGetVisible\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AnnotationSetStyle(int line, int style)
   Set the style number for the annotations for a line. */
PHP_METHOD(php_wxStyledTextCtrl, AnnotationSetStyle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AnnotationSetStyle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AnnotationSetStyle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&line0, &style0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AnnotationSetStyle((int) line0, (int) style0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AnnotationSetStyle((int) line0, (int) style0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AnnotationSetStyle\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AnnotationSetStyleOffset(int style)
   Get the start of the range of style numbers used for annotations. */
PHP_METHOD(php_wxStyledTextCtrl, AnnotationSetStyleOffset)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AnnotationSetStyleOffset\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AnnotationSetStyleOffset call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&style0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AnnotationSetStyleOffset((int) style0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AnnotationSetStyleOffset((int) style0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AnnotationSetStyleOffset\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AnnotationSetStyles(int line, string styles)
   Set the annotation styles for a line. */
PHP_METHOD(php_wxStyledTextCtrl, AnnotationSetStyles)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AnnotationSetStyles\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AnnotationSetStyles call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    char* styles0;
    size_t styles_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ls' (&line0, &styles0, &styles_len0)\n");
        #endif

        char parse_parameters_string[] = "ls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0, &styles0, &styles_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AnnotationSetStyles((int) line0, wxString(styles0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AnnotationSetStyles((int) line0, wxString(styles0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AnnotationSetStyles\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AnnotationSetText(int line, string text)
   Set the annotation text for a line. */
PHP_METHOD(php_wxStyledTextCtrl, AnnotationSetText)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AnnotationSetText\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AnnotationSetText call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    char* text0;
    size_t text_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ls' (&line0, &text0, &text_len0)\n");
        #endif

        char parse_parameters_string[] = "ls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0, &text0, &text_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AnnotationSetText((int) line0, wxString(text0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AnnotationSetText((int) line0, wxString(text0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AnnotationSetText\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AnnotationSetVisible(int visible)
   Set the visibility for the annotations for a view. */
PHP_METHOD(php_wxStyledTextCtrl, AnnotationSetVisible)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AnnotationSetVisible\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AnnotationSetVisible call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long visible0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&visible0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &visible0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AnnotationSetVisible((int) visible0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AnnotationSetVisible((int) visible0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AnnotationSetVisible\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AppendText(string text)
   Append a string to the end of the document without changing the selection. */
PHP_METHOD(php_wxStyledTextCtrl, AppendText)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AppendText\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AppendText call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* text0;
    size_t text_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&text0, &text_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &text0, &text_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AppendText(wxString(text0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AppendText(wxString(text0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AppendText\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::AutoCompActive()
   Is there an auto-completion list visible? */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompActive)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompActive\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompActive call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::AutoCompActive())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->AutoCompActive());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompActive\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AutoCompCancel()
   Remove the auto-completion list from the screen. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompCancel)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompCancel\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompCancel call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AutoCompCancel()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AutoCompCancel();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompCancel\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AutoCompComplete()
   User has selected an item so remove the list and insert the selection. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompComplete)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompComplete\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompComplete call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AutoCompComplete()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AutoCompComplete();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompComplete\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::AutoCompGetAutoHide()
   Retrieve whether or not autocompletion is hidden automatically when nothing matches. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompGetAutoHide)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompGetAutoHide\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompGetAutoHide call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::AutoCompGetAutoHide())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->AutoCompGetAutoHide());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompGetAutoHide\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::AutoCompGetCancelAtStart()
   Retrieve whether auto-completion cancelled by backspacing before start. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompGetCancelAtStart)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompGetCancelAtStart\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompGetCancelAtStart call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::AutoCompGetCancelAtStart())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->AutoCompGetCancelAtStart());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompGetCancelAtStart\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::AutoCompGetChooseSingle()
   Retrieve whether a single item auto-completion list automatically choose the item. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompGetChooseSingle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompGetChooseSingle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompGetChooseSingle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::AutoCompGetChooseSingle())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->AutoCompGetChooseSingle());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompGetChooseSingle\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::AutoCompGetDropRestOfWord()
   Retrieve whether or not autocompletion deletes any word characters after the inserted text upon completion. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompGetDropRestOfWord)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompGetDropRestOfWord\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompGetDropRestOfWord call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::AutoCompGetDropRestOfWord())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->AutoCompGetDropRestOfWord());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompGetDropRestOfWord\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::AutoCompGetIgnoreCase()
   Retrieve state of ignore case flag. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompGetIgnoreCase)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompGetIgnoreCase\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompGetIgnoreCase call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::AutoCompGetIgnoreCase())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->AutoCompGetIgnoreCase());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompGetIgnoreCase\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::AutoCompGetMaxHeight()
   Set the maximum height, in rows, of auto-completion and user lists. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompGetMaxHeight)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompGetMaxHeight\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompGetMaxHeight call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::AutoCompGetMaxHeight())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->AutoCompGetMaxHeight());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompGetMaxHeight\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::AutoCompGetMaxWidth()
   Get the maximum width, in characters, of auto-completion and user lists. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompGetMaxWidth)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompGetMaxWidth\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompGetMaxWidth call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::AutoCompGetMaxWidth())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->AutoCompGetMaxWidth());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompGetMaxWidth\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::AutoCompGetSeparator()
   Retrieve the auto-completion list separator character. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompGetSeparator)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompGetSeparator\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompGetSeparator call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::AutoCompGetSeparator())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->AutoCompGetSeparator());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompGetSeparator\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::AutoCompGetTypeSeparator()
   Retrieve the auto-completion list type-separator character. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompGetTypeSeparator)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompGetTypeSeparator\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompGetTypeSeparator call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::AutoCompGetTypeSeparator())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->AutoCompGetTypeSeparator());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompGetTypeSeparator\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::AutoCompPosStart()
   Retrieve the position of the caret when the auto-completion list was displayed. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompPosStart)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompPosStart\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompPosStart call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::AutoCompPosStart())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->AutoCompPosStart());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompPosStart\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AutoCompSelect(string select)
   Select the item in the auto-completion list that starts with a string. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSelect)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompSelect\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompSelect call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* select0;
    size_t select_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&select0, &select_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &select0, &select_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AutoCompSelect(wxString(select0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AutoCompSelect(wxString(select0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompSelect\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AutoCompSetAutoHide(bool autoHide)
   Set whether or not autocompletion is hidden automatically when nothing matches. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSetAutoHide)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompSetAutoHide\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompSetAutoHide call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool autoHide0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&autoHide0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &autoHide0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AutoCompSetAutoHide(autoHide0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AutoCompSetAutoHide(autoHide0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompSetAutoHide\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AutoCompSetCancelAtStart(bool cancel)
   Should the auto-completion list be cancelled if the user backspaces to a position before where the box was created. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSetCancelAtStart)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompSetCancelAtStart\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompSetCancelAtStart call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool cancel0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&cancel0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &cancel0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AutoCompSetCancelAtStart(cancel0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AutoCompSetCancelAtStart(cancel0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompSetCancelAtStart\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AutoCompSetChooseSingle(bool chooseSingle)
   Should a single item auto-completion list automatically choose the item. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSetChooseSingle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompSetChooseSingle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompSetChooseSingle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool chooseSingle0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&chooseSingle0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &chooseSingle0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AutoCompSetChooseSingle(chooseSingle0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AutoCompSetChooseSingle(chooseSingle0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompSetChooseSingle\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AutoCompSetDropRestOfWord(bool dropRestOfWord)
   Set whether or not autocompletion deletes any word characters after the inserted text upon completion. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSetDropRestOfWord)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompSetDropRestOfWord\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompSetDropRestOfWord call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool dropRestOfWord0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&dropRestOfWord0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dropRestOfWord0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AutoCompSetDropRestOfWord(dropRestOfWord0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AutoCompSetDropRestOfWord(dropRestOfWord0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompSetDropRestOfWord\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AutoCompSetFillUps(string characterSet)
   Define a set of characters that when typed will cause the autocompletion to choose the selected item. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSetFillUps)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompSetFillUps\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompSetFillUps call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* characterSet0;
    size_t characterSet_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&characterSet0, &characterSet_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &characterSet0, &characterSet_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AutoCompSetFillUps(wxString(characterSet0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AutoCompSetFillUps(wxString(characterSet0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompSetFillUps\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AutoCompSetIgnoreCase(bool ignoreCase)
   Set whether case is significant when performing auto-completion searches. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSetIgnoreCase)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompSetIgnoreCase\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompSetIgnoreCase call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool ignoreCase0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&ignoreCase0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &ignoreCase0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AutoCompSetIgnoreCase(ignoreCase0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AutoCompSetIgnoreCase(ignoreCase0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompSetIgnoreCase\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AutoCompSetMaxHeight(int rowCount)
   Set the maximum height, in rows, of auto-completion and user lists. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSetMaxHeight)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompSetMaxHeight\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompSetMaxHeight call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long rowCount0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&rowCount0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &rowCount0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AutoCompSetMaxHeight((int) rowCount0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AutoCompSetMaxHeight((int) rowCount0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompSetMaxHeight\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AutoCompSetMaxWidth(int characterCount)
   Set the maximum width, in characters, of auto-completion and user lists. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSetMaxWidth)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompSetMaxWidth\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompSetMaxWidth call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long characterCount0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&characterCount0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &characterCount0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AutoCompSetMaxWidth((int) characterCount0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AutoCompSetMaxWidth((int) characterCount0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompSetMaxWidth\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AutoCompSetSeparator(int separatorCharacter)
   Change the separator character in the string setting up an auto-completion list. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSetSeparator)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompSetSeparator\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompSetSeparator call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long separatorCharacter0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&separatorCharacter0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &separatorCharacter0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AutoCompSetSeparator((int) separatorCharacter0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AutoCompSetSeparator((int) separatorCharacter0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompSetSeparator\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AutoCompSetTypeSeparator(int separatorCharacter)
   Change the type-separator character in the string setting up an auto-completion list. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSetTypeSeparator)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompSetTypeSeparator\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompSetTypeSeparator call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long separatorCharacter0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&separatorCharacter0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &separatorCharacter0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AutoCompSetTypeSeparator((int) separatorCharacter0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AutoCompSetTypeSeparator((int) separatorCharacter0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompSetTypeSeparator\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AutoCompShow(int lengthEntered, string itemList)
   Display an auto-completion list. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompShow)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompShow\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompShow call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long lengthEntered0;
    char* itemList0;
    size_t itemList_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ls' (&lengthEntered0, &itemList0, &itemList_len0)\n");
        #endif

        char parse_parameters_string[] = "ls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &lengthEntered0, &itemList0, &itemList_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AutoCompShow((int) lengthEntered0, wxString(itemList0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AutoCompShow((int) lengthEntered0, wxString(itemList0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompShow\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AutoCompStops(string characterSet)
   Define a set of character that when typed cancel the auto-completion list. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompStops)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompStops\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompStops call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* characterSet0;
    size_t characterSet_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&characterSet0, &characterSet_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &characterSet0, &characterSet_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AutoCompStops(wxString(characterSet0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AutoCompStops(wxString(characterSet0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompStops\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::BackTab()
   Dedent the selected lines. */
PHP_METHOD(php_wxStyledTextCtrl, BackTab)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::BackTab\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::BackTab call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::BackTab()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->BackTab();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::BackTab\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::BeginUndoAction()
   Start a sequence of actions that is undone and redone as a unit. */
PHP_METHOD(php_wxStyledTextCtrl, BeginUndoAction)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::BeginUndoAction\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::BeginUndoAction call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::BeginUndoAction()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->BeginUndoAction();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::BeginUndoAction\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::BraceBadLight(int pos)
   Highlight the character at a position indicating there is no matching brace. */
PHP_METHOD(php_wxStyledTextCtrl, BraceBadLight)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::BraceBadLight\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::BraceBadLight call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pos0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&pos0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pos0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::BraceBadLight((int) pos0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->BraceBadLight((int) pos0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::BraceBadLight\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::BraceHighlight(int posA, int posB)
   Highlight the characters at two positions. */
PHP_METHOD(php_wxStyledTextCtrl, BraceHighlight)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::BraceHighlight\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::BraceHighlight call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long posA0;
    long posB0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&posA0, &posB0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &posA0, &posB0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::BraceHighlight((int) posA0, (int) posB0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->BraceHighlight((int) posA0, (int) posB0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::BraceHighlight\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::BraceMatch(int pos, int maxReStyle)
   Find the position of a matching brace or wxSTC_INVALID_POSITION if no match. */
PHP_METHOD(php_wxStyledTextCtrl, BraceMatch)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::BraceMatch\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::BraceMatch call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pos0;
    long maxReStyle0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l|l' (&pos0, &maxReStyle0)\n");
        #endif

        char parse_parameters_string[] = "l|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pos0, &maxReStyle0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::BraceMatch((int) pos0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->BraceMatch((int) pos0));


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::BraceMatch((int) pos0, (int) maxReStyle0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->BraceMatch((int) pos0, (int) maxReStyle0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::BraceMatch\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::CallTipActive()
   Is there an active call tip? */
PHP_METHOD(php_wxStyledTextCtrl, CallTipActive)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CallTipActive\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CallTipActive call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::CallTipActive())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->CallTipActive());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CallTipActive\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CallTipCancel()
   Remove the call tip from the screen. */
PHP_METHOD(php_wxStyledTextCtrl, CallTipCancel)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CallTipCancel\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CallTipCancel call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CallTipCancel()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CallTipCancel();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CallTipCancel\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::CallTipPosAtStart()
   Retrieve the position where the caret was before displaying the call tip. */
PHP_METHOD(php_wxStyledTextCtrl, CallTipPosAtStart)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CallTipPosAtStart\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CallTipPosAtStart call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::CallTipPosAtStart())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->CallTipPosAtStart());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CallTipPosAtStart\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CallTipSetBackground(wxColour back)
   Set the background colour for the call tip. */
PHP_METHOD(php_wxStyledTextCtrl, CallTipSetBackground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CallTipSetBackground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CallTipSetBackground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* back0;
    wxColour* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&back0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &back0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(back0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(back0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(back0)->native_object;
                    object_pointer0_0 = (wxColour*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'back' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(back0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'back' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CallTipSetBackground(*(wxColour*) object_pointer0_0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CallTipSetBackground(*(wxColour*) object_pointer0_0);

                references->AddReference(back0, "wxStyledTextCtrl::CallTipSetBackground at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CallTipSetBackground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CallTipSetForeground(wxColour fore)
   Set the foreground colour for the call tip. */
PHP_METHOD(php_wxStyledTextCtrl, CallTipSetForeground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CallTipSetForeground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CallTipSetForeground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* fore0;
    wxColour* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&fore0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &fore0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(fore0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(fore0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(fore0)->native_object;
                    object_pointer0_0 = (wxColour*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'fore' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(fore0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'fore' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CallTipSetForeground(*(wxColour*) object_pointer0_0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CallTipSetForeground(*(wxColour*) object_pointer0_0);

                references->AddReference(fore0, "wxStyledTextCtrl::CallTipSetForeground at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CallTipSetForeground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CallTipSetForegroundHighlight(wxColour fore)
   Set the foreground colour for the highlighted part of the call tip. */
PHP_METHOD(php_wxStyledTextCtrl, CallTipSetForegroundHighlight)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CallTipSetForegroundHighlight\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CallTipSetForegroundHighlight call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* fore0;
    wxColour* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&fore0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &fore0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(fore0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(fore0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(fore0)->native_object;
                    object_pointer0_0 = (wxColour*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'fore' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(fore0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'fore' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CallTipSetForegroundHighlight(*(wxColour*) object_pointer0_0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CallTipSetForegroundHighlight(*(wxColour*) object_pointer0_0);

                references->AddReference(fore0, "wxStyledTextCtrl::CallTipSetForegroundHighlight at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CallTipSetForegroundHighlight\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CallTipSetHighlight(int highlightStart, int highlightEnd)
   Highlight a segment of the definition. */
PHP_METHOD(php_wxStyledTextCtrl, CallTipSetHighlight)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CallTipSetHighlight\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CallTipSetHighlight call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long highlightStart0;
    long highlightEnd0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&highlightStart0, &highlightEnd0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &highlightStart0, &highlightEnd0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CallTipSetHighlight((int) highlightStart0, (int) highlightEnd0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CallTipSetHighlight((int) highlightStart0, (int) highlightEnd0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CallTipSetHighlight\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CallTipShow(int pos, string definition)
   Show a call tip containing a definition near position pos. */
PHP_METHOD(php_wxStyledTextCtrl, CallTipShow)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CallTipShow\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CallTipShow call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pos0;
    char* definition0;
    size_t definition_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ls' (&pos0, &definition0, &definition_len0)\n");
        #endif

        char parse_parameters_string[] = "ls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pos0, &definition0, &definition_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CallTipShow((int) pos0, wxString(definition0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CallTipShow((int) pos0, wxString(definition0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CallTipShow\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CallTipUseStyle(int tabSize)
   Enable use of wxSTC_STYLE_CALLTIP and set call tip tab size in pixels. */
PHP_METHOD(php_wxStyledTextCtrl, CallTipUseStyle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CallTipUseStyle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CallTipUseStyle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long tabSize0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&tabSize0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &tabSize0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CallTipUseStyle((int) tabSize0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CallTipUseStyle((int) tabSize0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CallTipUseStyle\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::CanPaste()
   Will a paste succeed? */
PHP_METHOD(php_wxStyledTextCtrl, CanPaste)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CanPaste\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CanPaste call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::CanPaste())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->CanPaste());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CanPaste\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::CanRedo()
   Are there any redoable actions in the undo history? */
PHP_METHOD(php_wxStyledTextCtrl, CanRedo)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CanRedo\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CanRedo call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::CanRedo())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->CanRedo());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CanRedo\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::CanUndo()
   Are there any undoable actions in the undo history? */
PHP_METHOD(php_wxStyledTextCtrl, CanUndo)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CanUndo\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CanUndo call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::CanUndo())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->CanUndo());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CanUndo\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::Cancel()
   Cancel any modes such as call tip or auto-completion list display. */
PHP_METHOD(php_wxStyledTextCtrl, Cancel)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::Cancel\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::Cancel call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::Cancel()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->Cancel();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::Cancel\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CharLeft()
   Move caret left one character. */
PHP_METHOD(php_wxStyledTextCtrl, CharLeft)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CharLeft\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CharLeft call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CharLeft()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CharLeft();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CharLeft\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CharLeftExtend()
   Move caret left one character extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, CharLeftExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CharLeftExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CharLeftExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CharLeftExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CharLeftExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CharLeftExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CharLeftRectExtend()
   Move caret left one character, extending rectangular selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, CharLeftRectExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CharLeftRectExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CharLeftRectExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CharLeftRectExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CharLeftRectExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CharLeftRectExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::CharPositionFromPoint(int x, int y)
   Find the position of a character from a point within the window. */
PHP_METHOD(php_wxStyledTextCtrl, CharPositionFromPoint)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CharPositionFromPoint\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CharPositionFromPoint call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&x0, &y0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::CharPositionFromPoint((int) x0, (int) y0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->CharPositionFromPoint((int) x0, (int) y0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CharPositionFromPoint\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::CharPositionFromPointClose(int x, int y)
   Find the position of a character from a point within the window. */
PHP_METHOD(php_wxStyledTextCtrl, CharPositionFromPointClose)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CharPositionFromPointClose\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CharPositionFromPointClose call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&x0, &y0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::CharPositionFromPointClose((int) x0, (int) y0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->CharPositionFromPointClose((int) x0, (int) y0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CharPositionFromPointClose\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CharRight()
   Move caret right one character. */
PHP_METHOD(php_wxStyledTextCtrl, CharRight)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CharRight\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CharRight call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CharRight()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CharRight();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CharRight\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CharRightExtend()
   Move caret right one character extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, CharRightExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CharRightExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CharRightExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CharRightExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CharRightExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CharRightExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CharRightRectExtend()
   Move caret right one character, extending rectangular selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, CharRightRectExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CharRightRectExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CharRightRectExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CharRightRectExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CharRightRectExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CharRightRectExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ChooseCaretX()
   Set the last x chosen value to be the caret x position. */
PHP_METHOD(php_wxStyledTextCtrl, ChooseCaretX)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ChooseCaretX\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ChooseCaretX call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ChooseCaretX()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ChooseCaretX();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ChooseCaretX\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::Clear()
   Clear the selection. */
PHP_METHOD(php_wxStyledTextCtrl, Clear)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::Clear\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::Clear call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::Clear()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->Clear();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::Clear\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ClearAll()
   Delete all text in the document. */
PHP_METHOD(php_wxStyledTextCtrl, ClearAll)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ClearAll\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ClearAll call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ClearAll()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ClearAll();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ClearAll\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ClearDocumentStyle()
   Set all style bytes to 0, remove all folding information. */
PHP_METHOD(php_wxStyledTextCtrl, ClearDocumentStyle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ClearDocumentStyle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ClearDocumentStyle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ClearDocumentStyle()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ClearDocumentStyle();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ClearDocumentStyle\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ClearRegisteredImages()
   Clear all the registered images. */
PHP_METHOD(php_wxStyledTextCtrl, ClearRegisteredImages)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ClearRegisteredImages\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ClearRegisteredImages call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ClearRegisteredImages()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ClearRegisteredImages();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ClearRegisteredImages\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ClearSelections()
   Clear selections to a single empty stream selection. */
PHP_METHOD(php_wxStyledTextCtrl, ClearSelections)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ClearSelections\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ClearSelections call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ClearSelections()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ClearSelections();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ClearSelections\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CmdKeyAssign(int key, int modifiers, int cmd)
   When key+modifier combination keyDefinition is pressed perform sciCommand. */
PHP_METHOD(php_wxStyledTextCtrl, CmdKeyAssign)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CmdKeyAssign\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CmdKeyAssign call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long key0;
    long modifiers0;
    long cmd0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lll' (&key0, &modifiers0, &cmd0)\n");
        #endif

        char parse_parameters_string[] = "lll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &key0, &modifiers0, &cmd0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CmdKeyAssign((int) key0, (int) modifiers0, (int) cmd0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CmdKeyAssign((int) key0, (int) modifiers0, (int) cmd0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CmdKeyAssign\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CmdKeyClear(int key, int modifiers)
   When key+modifier combination keyDefinition is pressed do nothing. */
PHP_METHOD(php_wxStyledTextCtrl, CmdKeyClear)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CmdKeyClear\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CmdKeyClear call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long key0;
    long modifiers0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&key0, &modifiers0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &key0, &modifiers0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CmdKeyClear((int) key0, (int) modifiers0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CmdKeyClear((int) key0, (int) modifiers0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CmdKeyClear\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CmdKeyClearAll()
   Drop all key mappings. */
PHP_METHOD(php_wxStyledTextCtrl, CmdKeyClearAll)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CmdKeyClearAll\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CmdKeyClearAll call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CmdKeyClearAll()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CmdKeyClearAll();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CmdKeyClearAll\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CmdKeyExecute(int cmd)
   Perform one of the operations defined by the wxSTC_CMD_* constants. */
PHP_METHOD(php_wxStyledTextCtrl, CmdKeyExecute)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CmdKeyExecute\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CmdKeyExecute call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long cmd0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&cmd0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &cmd0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CmdKeyExecute((int) cmd0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CmdKeyExecute((int) cmd0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CmdKeyExecute\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::Colourise(int start, int end)
   Colourise a segment of the document using the current lexing language. */
PHP_METHOD(php_wxStyledTextCtrl, Colourise)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::Colourise\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::Colourise call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long start0;
    long end0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&start0, &end0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &start0, &end0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::Colourise((int) start0, (int) end0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->Colourise((int) start0, (int) end0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::Colourise\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ConvertEOLs(int eolMode)
   Convert all line endings in the document to one mode. */
PHP_METHOD(php_wxStyledTextCtrl, ConvertEOLs)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ConvertEOLs\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ConvertEOLs call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long eolMode0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&eolMode0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &eolMode0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ConvertEOLs((int) eolMode0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ConvertEOLs((int) eolMode0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ConvertEOLs\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::Copy()
   Copy the selection to the clipboard. */
PHP_METHOD(php_wxStyledTextCtrl, Copy)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::Copy\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::Copy call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::Copy()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->Copy();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::Copy\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CopyAllowLine()
   Copy the selection, if selection empty copy the line with the caret. */
PHP_METHOD(php_wxStyledTextCtrl, CopyAllowLine)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CopyAllowLine\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CopyAllowLine call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CopyAllowLine()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CopyAllowLine();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CopyAllowLine\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CopyRange(int start, int end)
   Copy a range of text to the clipboard. */
PHP_METHOD(php_wxStyledTextCtrl, CopyRange)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CopyRange\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CopyRange call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long start0;
    long end0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&start0, &end0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &start0, &end0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CopyRange((int) start0, (int) end0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CopyRange((int) start0, (int) end0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CopyRange\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CopyText(int length, string text)
   Copy argument text to the clipboard. */
PHP_METHOD(php_wxStyledTextCtrl, CopyText)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CopyText\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CopyText call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long length0;
    char* text0;
    size_t text_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ls' (&length0, &text0, &text_len0)\n");
        #endif

        char parse_parameters_string[] = "ls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &length0, &text0, &text_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CopyText((int) length0, wxString(text0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CopyText((int) length0, wxString(text0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CopyText\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::Create(wxWindow &parent, int id, wxPoint pos, wxSize size, int style, string name)
   Create the UI elements for a STC that was created with the default ctor. */
PHP_METHOD(php_wxStyledTextCtrl, Create)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::Create\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::Create call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* parent0;
    wxWindow* object_pointer0_0 = 0;
    long id0;
    zval* pos0;
    wxPoint* object_pointer0_2 = 0;
    zval* size0;
    wxSize* object_pointer0_3 = 0;
    long style0;
    char* name0;
    size_t name_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 6)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z|lOOls' (&parent0, &id0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0)\n");
        #endif

        char parse_parameters_string[] = "z|lOOls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent0, &id0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(pos0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos0)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos0)->native_object;
                    object_pointer0_2 = (wxPoint*) argument_native_object;
                    if (!object_pointer0_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(size0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size0)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size0)->native_object;
                    object_pointer0_3 = (wxSize*) argument_native_object;
                    if (!object_pointer0_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::Create((wxWindow*) object_pointer0_0))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0));

                references->AddReference(parent0, "wxStyledTextCtrl::Create at call 1 with 1 argument(s)");

                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0));

                references->AddReference(parent0, "wxStyledTextCtrl::Create at call 1 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2));

                references->AddReference(parent0, "wxStyledTextCtrl::Create at call 1 with 3 argument(s)");
                references->AddReference(pos0, "wxStyledTextCtrl::Create at call 3 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3));

                references->AddReference(parent0, "wxStyledTextCtrl::Create at call 1 with 4 argument(s)");
                references->AddReference(pos0, "wxStyledTextCtrl::Create at call 3 with 4 argument(s)");
                references->AddReference(size0, "wxStyledTextCtrl::Create at call 3 with 4 argument(s)");

                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3, (long) style0))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3, (long) style0));

                references->AddReference(parent0, "wxStyledTextCtrl::Create at call 1 with 5 argument(s)");
                references->AddReference(pos0, "wxStyledTextCtrl::Create at call 3 with 5 argument(s)");
                references->AddReference(size0, "wxStyledTextCtrl::Create at call 3 with 5 argument(s)");

                return;
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3, (long) style0, wxString(name0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3, (long) style0, wxString(name0, wxConvUTF8)));

                references->AddReference(parent0, "wxStyledTextCtrl::Create at call 1 with 6 argument(s)");
                references->AddReference(pos0, "wxStyledTextCtrl::Create at call 3 with 6 argument(s)");
                references->AddReference(size0, "wxStyledTextCtrl::Create at call 3 with 6 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::Create\n"
        );
    }
}
/* }}} */

/* {{{ proto void wxStyledTextCtrl::CreateDocument()
   Create a new document object. */
PHP_METHOD(php_wxStyledTextCtrl, CreateDocument)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CreateDocument\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CreateDocument call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CreateDocument()\n\n");
                #endif

                RETVAL_STRING((char*) ((wxStyledTextCtrl_php*)native_object)->CreateDocument());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CreateDocument\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::Cut()
   Cut the selection to the clipboard. */
PHP_METHOD(php_wxStyledTextCtrl, Cut)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::Cut\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::Cut call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::Cut()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->Cut();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::Cut\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::DelLineLeft()
   Delete back from the current position to the start of the line. */
PHP_METHOD(php_wxStyledTextCtrl, DelLineLeft)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::DelLineLeft\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::DelLineLeft call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::DelLineLeft()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->DelLineLeft();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::DelLineLeft\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::DelLineRight()
   Delete forwards from the current position to the end of the line. */
PHP_METHOD(php_wxStyledTextCtrl, DelLineRight)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::DelLineRight\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::DelLineRight call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::DelLineRight()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->DelLineRight();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::DelLineRight\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::DelWordLeft()
   Delete the word to the left of the caret. */
PHP_METHOD(php_wxStyledTextCtrl, DelWordLeft)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::DelWordLeft\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::DelWordLeft call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::DelWordLeft()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->DelWordLeft();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::DelWordLeft\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::DelWordRight()
   Delete the word to the right of the caret. */
PHP_METHOD(php_wxStyledTextCtrl, DelWordRight)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::DelWordRight\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::DelWordRight call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::DelWordRight()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->DelWordRight();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::DelWordRight\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::DeleteBack()
   Delete the selection or if no selection, the character before the caret. */
PHP_METHOD(php_wxStyledTextCtrl, DeleteBack)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::DeleteBack\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::DeleteBack call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::DeleteBack()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->DeleteBack();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::DeleteBack\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::DeleteBackNotLine()
   Delete the selection or if no selection, the character before the caret. */
PHP_METHOD(php_wxStyledTextCtrl, DeleteBackNotLine)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::DeleteBackNotLine\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::DeleteBackNotLine call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::DeleteBackNotLine()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->DeleteBackNotLine();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::DeleteBackNotLine\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::DoDropText(int x, int y, string data)
   Allow for simulating a DnD DropText. */
PHP_METHOD(php_wxStyledTextCtrl, DoDropText)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::DoDropText\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::DoDropText call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    char* data0;
    size_t data_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lls' (&x0, &y0, &data0, &data_len0)\n");
        #endif

        char parse_parameters_string[] = "lls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0, &data0, &data_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::DoDropText((long) x0, (long) y0, wxString(data0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->DoDropText((long) x0, (long) y0, wxString(data0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::DoDropText\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::DocLineFromVisible(int displayLine)
   Find the document line of a display line taking hidden lines into account. */
PHP_METHOD(php_wxStyledTextCtrl, DocLineFromVisible)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::DocLineFromVisible\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::DocLineFromVisible call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long displayLine0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&displayLine0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &displayLine0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::DocLineFromVisible((int) displayLine0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->DocLineFromVisible((int) displayLine0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::DocLineFromVisible\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::DocumentEnd()
   Move caret to last position in document. */
PHP_METHOD(php_wxStyledTextCtrl, DocumentEnd)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::DocumentEnd\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::DocumentEnd call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::DocumentEnd()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->DocumentEnd();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::DocumentEnd\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::DocumentEndExtend()
   Move caret to last position in document extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, DocumentEndExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::DocumentEndExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::DocumentEndExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::DocumentEndExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->DocumentEndExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::DocumentEndExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::DocumentStart()
   Move caret to first position in document. */
PHP_METHOD(php_wxStyledTextCtrl, DocumentStart)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::DocumentStart\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::DocumentStart call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::DocumentStart()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->DocumentStart();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::DocumentStart\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::DocumentStartExtend()
   Move caret to first position in document extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, DocumentStartExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::DocumentStartExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::DocumentStartExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::DocumentStartExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->DocumentStartExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::DocumentStartExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::EditToggleOvertype()
   Switch from insert to overtype mode or the reverse. */
PHP_METHOD(php_wxStyledTextCtrl, EditToggleOvertype)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::EditToggleOvertype\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::EditToggleOvertype call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::EditToggleOvertype()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->EditToggleOvertype();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::EditToggleOvertype\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::EmptyUndoBuffer()
   Delete the undo history. */
PHP_METHOD(php_wxStyledTextCtrl, EmptyUndoBuffer)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::EmptyUndoBuffer\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::EmptyUndoBuffer call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::EmptyUndoBuffer()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->EmptyUndoBuffer();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::EmptyUndoBuffer\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::EndUndoAction()
   End a sequence of actions that is undone and redone as a unit. */
PHP_METHOD(php_wxStyledTextCtrl, EndUndoAction)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::EndUndoAction\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::EndUndoAction call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::EndUndoAction()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->EndUndoAction();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::EndUndoAction\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::EnsureCaretVisible()
   Ensure the caret is visible. */
PHP_METHOD(php_wxStyledTextCtrl, EnsureCaretVisible)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::EnsureCaretVisible\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::EnsureCaretVisible call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::EnsureCaretVisible()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->EnsureCaretVisible();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::EnsureCaretVisible\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::EnsureVisible(int line)
   Ensure a particular line is visible by expanding any header line hiding it. */
PHP_METHOD(php_wxStyledTextCtrl, EnsureVisible)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::EnsureVisible\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::EnsureVisible call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::EnsureVisible((int) line0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->EnsureVisible((int) line0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::EnsureVisible\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::EnsureVisibleEnforcePolicy(int line)
   Ensure a particular line is visible by expanding any header line hiding it. */
PHP_METHOD(php_wxStyledTextCtrl, EnsureVisibleEnforcePolicy)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::EnsureVisibleEnforcePolicy\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::EnsureVisibleEnforcePolicy call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::EnsureVisibleEnforcePolicy((int) line0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->EnsureVisibleEnforcePolicy((int) line0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::EnsureVisibleEnforcePolicy\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::FindColumn(int line, int column)
   Find the position of a column on a line taking into account tabs and multi-byte characters. */
PHP_METHOD(php_wxStyledTextCtrl, FindColumn)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::FindColumn\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::FindColumn call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    long column0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&line0, &column0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0, &column0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::FindColumn((int) line0, (int) column0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->FindColumn((int) line0, (int) column0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::FindColumn\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::FindText(int minPos, int maxPos, string text, int flags, int &findEnd)
   Find some text in the document. */
PHP_METHOD(php_wxStyledTextCtrl, FindText)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::FindText\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::FindText call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long minPos0;
    long maxPos0;
    char* text0;
    size_t text_len0;
    long flags0;
    long* findEnd0;
    zval findEnd0_ref;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 3  && arguments_received <= 5)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lls|ll' (&minPos0, &maxPos0, &text0, &text_len0, &flags0, findEnd0)\n");
        #endif

        char parse_parameters_string[] = "lls|ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &minPos0, &maxPos0, &text0, &text_len0, &flags0, findEnd0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zzz|zz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, dummy, dummy, dummy, dummy, findEnd0_ref );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::FindText((int) minPos0, (int) maxPos0, wxString(text0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->FindText((int) minPos0, (int) maxPos0, wxString(text0, wxConvUTF8)));


                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::FindText((int) minPos0, (int) maxPos0, wxString(text0, wxConvUTF8), (int) flags0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->FindText((int) minPos0, (int) maxPos0, wxString(text0, wxConvUTF8), (int) flags0));


                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::FindText((int) minPos0, (int) maxPos0, wxString(text0, wxConvUTF8), (int) flags0, (int*) findEnd0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->FindText((int) minPos0, (int) maxPos0, wxString(text0, wxConvUTF8), (int) flags0, (int*) findEnd0));

                size_t elements_returned0_4 = sizeof(findEnd0)/sizeof(*findEnd0);
                array_init(&findEnd0_ref);
                for(size_t i=0; i<elements_returned0_4; i++)
                {
                    add_next_index_long(&findEnd0_ref, findEnd0[i]);
                }

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::FindText\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::FormFeed()
   Insert a Form Feed character. */
PHP_METHOD(php_wxStyledTextCtrl, FormFeed)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::FormFeed\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::FormFeed call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::FormFeed()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->FormFeed();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::FormFeed\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::FormatRange(bool doDraw, int startPos, int endPos, wxDC &draw, wxDC &target, wxRect renderRect, wxRect pageRect)
   On Windows, will draw the document into a display context such as a printer. */
PHP_METHOD(php_wxStyledTextCtrl, FormatRange)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::FormatRange\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::FormatRange call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool doDraw0;
    long startPos0;
    long endPos0;
    zval* draw0;
    wxDC* object_pointer0_3 = 0;
    zval* target0;
    wxDC* object_pointer0_4 = 0;
    zval* renderRect0;
    wxRect* object_pointer0_5 = 0;
    zval* pageRect0;
    wxRect* object_pointer0_6 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 7)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'bllzzOO' (&doDraw0, &startPos0, &endPos0, &draw0, &target0, &renderRect0, php_wxRect_entry, &pageRect0, php_wxRect_entry)\n");
        #endif

        char parse_parameters_string[] = "bllzzOO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &doDraw0, &startPos0, &endPos0, &draw0, &target0, &renderRect0, php_wxRect_entry, &pageRect0, php_wxRect_entry ) == SUCCESS)
        {
            if(arguments_received >= 4){
                if(Z_TYPE_P(draw0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxDC_P(draw0)->object_type;
                    argument_native_object = (void*) Z_wxDC_P(draw0)->native_object;
                    object_pointer0_3 = (wxDC*) argument_native_object;
                    if (!object_pointer0_3 || (argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'draw' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(draw0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'draw' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 5){
                if(Z_TYPE_P(target0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxDC_P(target0)->object_type;
                    argument_native_object = (void*) Z_wxDC_P(target0)->native_object;
                    object_pointer0_4 = (wxDC*) argument_native_object;
                    if (!object_pointer0_4 || (argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'target' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(target0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'target' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 6){
                if(Z_TYPE_P(renderRect0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRect_P(renderRect0)->object_type;
                    argument_native_object = (void*) Z_wxRect_P(renderRect0)->native_object;
                    object_pointer0_5 = (wxRect*) argument_native_object;
                    if (!object_pointer0_5 )
                    {
                        zend_error(E_ERROR, "Parameter 'renderRect' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(renderRect0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'renderRect' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 7){
                if(Z_TYPE_P(pageRect0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRect_P(pageRect0)->object_type;
                    argument_native_object = (void*) Z_wxRect_P(pageRect0)->native_object;
                    object_pointer0_6 = (wxRect*) argument_native_object;
                    if (!object_pointer0_6 )
                    {
                        zend_error(E_ERROR, "Parameter 'pageRect' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pageRect0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pageRect' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::FormatRange(doDraw0, (int) startPos0, (int) endPos0, (wxDC*) object_pointer0_3, (wxDC*) object_pointer0_4, *(wxRect*) object_pointer0_5, *(wxRect*) object_pointer0_6))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->FormatRange(doDraw0, (int) startPos0, (int) endPos0, (wxDC*) object_pointer0_3, (wxDC*) object_pointer0_4, *(wxRect*) object_pointer0_5, *(wxRect*) object_pointer0_6));

                references->AddReference(draw0, "wxStyledTextCtrl::FormatRange at call 1 with 7 argument(s)");
                references->AddReference(target0, "wxStyledTextCtrl::FormatRange at call 1 with 7 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::FormatRange\n"
        );
    }
}
/* }}} */

/* {{{ proto wxColour wxStyledTextCtrl::GetAdditionalCaretForeground()
   Get the foreground colour of additional carets. */
PHP_METHOD(php_wxStyledTextCtrl, GetAdditionalCaretForeground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetAdditionalCaretForeground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetAdditionalCaretForeground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::GetAdditionalCaretForeground() to return new object\n\n");
                #endif

                wxColour value_to_return0;
                value_to_return0 = ((wxStyledTextCtrl_php*)native_object)->GetAdditionalCaretForeground();
                ((wxRefCounter *) value_to_return0.GetRefData())->IncRef();
                void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
                memcpy(ptr, (void*) &value_to_return0, sizeof(wxColour));
                object_init_ex(return_value, php_wxColour_entry);
                ((wxColour_php*)ptr)->phpObj = *return_value;
                zo_wxColour* zo0 = Z_wxColour_P(return_value);
                zo0->native_object = (wxColour_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetAdditionalCaretForeground\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetAdditionalCaretsBlink()
   Whether additional carets will blink. */
PHP_METHOD(php_wxStyledTextCtrl, GetAdditionalCaretsBlink)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetAdditionalCaretsBlink\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetAdditionalCaretsBlink call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetAdditionalCaretsBlink())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetAdditionalCaretsBlink());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetAdditionalCaretsBlink\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetAdditionalCaretsVisible()
   Whether additional carets are visible. */
PHP_METHOD(php_wxStyledTextCtrl, GetAdditionalCaretsVisible)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetAdditionalCaretsVisible\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetAdditionalCaretsVisible call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetAdditionalCaretsVisible())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetAdditionalCaretsVisible());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetAdditionalCaretsVisible\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetAdditionalSelAlpha()
   Get the alpha of the selection. */
PHP_METHOD(php_wxStyledTextCtrl, GetAdditionalSelAlpha)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetAdditionalSelAlpha\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetAdditionalSelAlpha call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetAdditionalSelAlpha())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetAdditionalSelAlpha());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetAdditionalSelAlpha\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetAdditionalSelectionTyping()
   Whether typing can be performed into multiple selections. */
PHP_METHOD(php_wxStyledTextCtrl, GetAdditionalSelectionTyping)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetAdditionalSelectionTyping\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetAdditionalSelectionTyping call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetAdditionalSelectionTyping())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetAdditionalSelectionTyping());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetAdditionalSelectionTyping\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetAnchor()
   Returns the position of the opposite end of the selection to the caret. */
PHP_METHOD(php_wxStyledTextCtrl, GetAnchor)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetAnchor\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetAnchor call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetAnchor())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetAnchor());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetAnchor\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetBackSpaceUnIndents()
   Does a backspace pressed when caret is within indentation unindent? */
PHP_METHOD(php_wxStyledTextCtrl, GetBackSpaceUnIndents)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetBackSpaceUnIndents\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetBackSpaceUnIndents call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetBackSpaceUnIndents())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetBackSpaceUnIndents());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetBackSpaceUnIndents\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetBufferedDraw()
   Is drawing done first into a buffer or direct to the screen? */
PHP_METHOD(php_wxStyledTextCtrl, GetBufferedDraw)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetBufferedDraw\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetBufferedDraw call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetBufferedDraw())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetBufferedDraw());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetBufferedDraw\n"
        );
    }
}
/* }}} */

/* {{{ proto wxColour wxStyledTextCtrl::GetCaretForeground()
   Get the foreground colour of the caret. */
PHP_METHOD(php_wxStyledTextCtrl, GetCaretForeground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetCaretForeground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetCaretForeground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::GetCaretForeground() to return new object\n\n");
                #endif

                wxColour value_to_return0;
                value_to_return0 = ((wxStyledTextCtrl_php*)native_object)->GetCaretForeground();
                ((wxRefCounter *) value_to_return0.GetRefData())->IncRef();
                void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
                memcpy(ptr, (void*) &value_to_return0, sizeof(wxColour));
                object_init_ex(return_value, php_wxColour_entry);
                ((wxColour_php*)ptr)->phpObj = *return_value;
                zo_wxColour* zo0 = Z_wxColour_P(return_value);
                zo0->native_object = (wxColour_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetCaretForeground\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetCaretLineBackAlpha()
   Get the background alpha of the caret line. */
PHP_METHOD(php_wxStyledTextCtrl, GetCaretLineBackAlpha)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetCaretLineBackAlpha\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetCaretLineBackAlpha call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetCaretLineBackAlpha())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetCaretLineBackAlpha());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetCaretLineBackAlpha\n"
        );
    }
}
/* }}} */

/* {{{ proto wxColour wxStyledTextCtrl::GetCaretLineBackground()
   Get the colour of the background of the line containing the caret. */
PHP_METHOD(php_wxStyledTextCtrl, GetCaretLineBackground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetCaretLineBackground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetCaretLineBackground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::GetCaretLineBackground() to return new object\n\n");
                #endif

                wxColour value_to_return0;
                value_to_return0 = ((wxStyledTextCtrl_php*)native_object)->GetCaretLineBackground();
                ((wxRefCounter *) value_to_return0.GetRefData())->IncRef();
                void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
                memcpy(ptr, (void*) &value_to_return0, sizeof(wxColour));
                object_init_ex(return_value, php_wxColour_entry);
                ((wxColour_php*)ptr)->phpObj = *return_value;
                zo_wxColour* zo0 = Z_wxColour_P(return_value);
                zo0->native_object = (wxColour_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetCaretLineBackground\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetCaretLineVisible()
   Is the background of the line containing the caret in a different colour? */
PHP_METHOD(php_wxStyledTextCtrl, GetCaretLineVisible)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetCaretLineVisible\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetCaretLineVisible call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetCaretLineVisible())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetCaretLineVisible());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetCaretLineVisible\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetCaretPeriod()
   Get the time in milliseconds that the caret is on and off. */
PHP_METHOD(php_wxStyledTextCtrl, GetCaretPeriod)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetCaretPeriod\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetCaretPeriod call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetCaretPeriod())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetCaretPeriod());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetCaretPeriod\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetCaretWidth()
   Returns the width of the insert mode caret. */
PHP_METHOD(php_wxStyledTextCtrl, GetCaretWidth)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetCaretWidth\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetCaretWidth call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetCaretWidth())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetCaretWidth());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetCaretWidth\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetCharAt(int pos)
   Returns the character byte at the position. */
PHP_METHOD(php_wxStyledTextCtrl, GetCharAt)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetCharAt\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetCharAt call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pos0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&pos0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pos0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetCharAt((int) pos0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetCharAt((int) pos0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetCharAt\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetCodePage()
   Get the code page used to interpret the bytes of the document as characters. */
PHP_METHOD(php_wxStyledTextCtrl, GetCodePage)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetCodePage\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetCodePage call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetCodePage())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetCodePage());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetCodePage\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetColumn(int pos)
   Retrieve the column number of a position, taking tab width into account. */
PHP_METHOD(php_wxStyledTextCtrl, GetColumn)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetColumn\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetColumn call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pos0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&pos0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pos0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetColumn((int) pos0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetColumn((int) pos0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetColumn\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetControlCharSymbol()
   Get the way control characters are displayed. */
PHP_METHOD(php_wxStyledTextCtrl, GetControlCharSymbol)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetControlCharSymbol\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetControlCharSymbol call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetControlCharSymbol())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetControlCharSymbol());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetControlCharSymbol\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetCurrentLine()
   Returns the line number of the line with the caret. */
PHP_METHOD(php_wxStyledTextCtrl, GetCurrentLine)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetCurrentLine\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetCurrentLine call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetCurrentLine())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetCurrentLine());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetCurrentLine\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetCurrentPos()
   Returns the position of the caret. */
PHP_METHOD(php_wxStyledTextCtrl, GetCurrentPos)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetCurrentPos\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetCurrentPos call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetCurrentPos())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetCurrentPos());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetCurrentPos\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetEOLMode()
   Retrieve the current end of line mode - one of wxSTC_EOL_CRLF, wxSTC_EOL_CR, or wxSTC_EOL_LF. */
PHP_METHOD(php_wxStyledTextCtrl, GetEOLMode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetEOLMode\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetEOLMode call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetEOLMode())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetEOLMode());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetEOLMode\n"
        );
    }
}
/* }}} */

/* {{{ proto wxColour wxStyledTextCtrl::GetEdgeColour()
   Retrieve the colour used in edge indication. */
PHP_METHOD(php_wxStyledTextCtrl, GetEdgeColour)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetEdgeColour\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetEdgeColour call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::GetEdgeColour() to return new object\n\n");
                #endif

                wxColour value_to_return0;
                value_to_return0 = ((wxStyledTextCtrl_php*)native_object)->GetEdgeColour();
                ((wxRefCounter *) value_to_return0.GetRefData())->IncRef();
                void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
                memcpy(ptr, (void*) &value_to_return0, sizeof(wxColour));
                object_init_ex(return_value, php_wxColour_entry);
                ((wxColour_php*)ptr)->phpObj = *return_value;
                zo_wxColour* zo0 = Z_wxColour_P(return_value);
                zo0->native_object = (wxColour_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetEdgeColour\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetEdgeColumn()
   Retrieve the column number which text should be kept within. */
PHP_METHOD(php_wxStyledTextCtrl, GetEdgeColumn)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetEdgeColumn\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetEdgeColumn call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetEdgeColumn())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetEdgeColumn());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetEdgeColumn\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetEdgeMode()
   Retrieve the edge highlight mode. */
PHP_METHOD(php_wxStyledTextCtrl, GetEdgeMode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetEdgeMode\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetEdgeMode call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetEdgeMode())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetEdgeMode());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetEdgeMode\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetEndAtLastLine()
   Retrieve whether the maximum scroll position has the last line at the bottom of the view. */
PHP_METHOD(php_wxStyledTextCtrl, GetEndAtLastLine)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetEndAtLastLine\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetEndAtLastLine call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetEndAtLastLine())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetEndAtLastLine());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetEndAtLastLine\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetEndStyled()
   Retrieve the position of the last correctly styled character. */
PHP_METHOD(php_wxStyledTextCtrl, GetEndStyled)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetEndStyled\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetEndStyled call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetEndStyled())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetEndStyled());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetEndStyled\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetExtraAscent()
   Get extra ascent for each line. */
PHP_METHOD(php_wxStyledTextCtrl, GetExtraAscent)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetExtraAscent\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetExtraAscent call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetExtraAscent())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetExtraAscent());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetExtraAscent\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetExtraDescent()
   Get extra descent for each line. */
PHP_METHOD(php_wxStyledTextCtrl, GetExtraDescent)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetExtraDescent\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetExtraDescent call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetExtraDescent())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetExtraDescent());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetExtraDescent\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetFirstVisibleLine()
   Retrieve the display line at the top of the display. */
PHP_METHOD(php_wxStyledTextCtrl, GetFirstVisibleLine)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetFirstVisibleLine\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetFirstVisibleLine call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetFirstVisibleLine())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetFirstVisibleLine());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetFirstVisibleLine\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetFoldExpanded(int line)
   Is a header line expanded? */
PHP_METHOD(php_wxStyledTextCtrl, GetFoldExpanded)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetFoldExpanded\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetFoldExpanded call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetFoldExpanded((int) line0))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetFoldExpanded((int) line0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetFoldExpanded\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetFoldLevel(int line)
   Retrieve the fold level of a line. */
PHP_METHOD(php_wxStyledTextCtrl, GetFoldLevel)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetFoldLevel\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetFoldLevel call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetFoldLevel((int) line0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetFoldLevel((int) line0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetFoldLevel\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetFoldParent(int line)
   Find the parent line of a child line. */
PHP_METHOD(php_wxStyledTextCtrl, GetFoldParent)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetFoldParent\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetFoldParent call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetFoldParent((int) line0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetFoldParent((int) line0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetFoldParent\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetHighlightGuide()
   Get the highlighted indentation guide column. */
PHP_METHOD(php_wxStyledTextCtrl, GetHighlightGuide)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetHighlightGuide\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetHighlightGuide call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetHighlightGuide())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetHighlightGuide());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetHighlightGuide\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetIndent()
   Retrieve indentation size. */
PHP_METHOD(php_wxStyledTextCtrl, GetIndent)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetIndent\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetIndent call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetIndent())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetIndent());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetIndent\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetIndentationGuides()
   Are the indentation guides visible? */
PHP_METHOD(php_wxStyledTextCtrl, GetIndentationGuides)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetIndentationGuides\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetIndentationGuides call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetIndentationGuides())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetIndentationGuides());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetIndentationGuides\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetLastChild(int line, int level)
   Find the last child line of a header line. */
PHP_METHOD(php_wxStyledTextCtrl, GetLastChild)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetLastChild\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetLastChild call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    long level0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&line0, &level0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0, &level0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetLastChild((int) line0, (int) level0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetLastChild((int) line0, (int) level0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetLastChild\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetLastKeydownProcessed()
   Can be used to prevent the EVT_CHAR handler from adding the char. */
PHP_METHOD(php_wxStyledTextCtrl, GetLastKeydownProcessed)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetLastKeydownProcessed\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetLastKeydownProcessed call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetLastKeydownProcessed())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetLastKeydownProcessed());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetLastKeydownProcessed\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetLayoutCache()
   Retrieve the degree of caching of layout information. */
PHP_METHOD(php_wxStyledTextCtrl, GetLayoutCache)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetLayoutCache\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetLayoutCache call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetLayoutCache())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetLayoutCache());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetLayoutCache\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetLength()
   Returns the number of bytes in the document. */
PHP_METHOD(php_wxStyledTextCtrl, GetLength)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetLength\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetLength call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetLength())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetLength());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetLength\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetLexer()
   Retrieve the lexing language of the document. */
PHP_METHOD(php_wxStyledTextCtrl, GetLexer)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetLexer\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetLexer call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetLexer())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetLexer());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetLexer\n"
        );
    }
}
/* }}} */

/* {{{ proto wxVersionInfo wxStyledTextCtrl::GetLibraryVersionInfo()
   Returns the version of the Scintilla library used by this control. */
PHP_METHOD(php_wxStyledTextCtrl, GetLibraryVersionInfo)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetLibraryVersionInfo\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetLibraryVersionInfo call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Static ");
                php_printf("Executing wxStyledTextCtrl::GetLibraryVersionInfo() to return new object\n\n");
                #endif

                wxVersionInfo value_to_return0;
                value_to_return0 = wxStyledTextCtrl::GetLibraryVersionInfo();
                void* ptr = safe_emalloc(1, sizeof(wxVersionInfo_php), 0);
                memcpy(ptr, (void*) &value_to_return0, sizeof(wxVersionInfo));
                object_init_ex(return_value, php_wxVersionInfo_entry);
                ((wxVersionInfo_php*)ptr)->phpObj = *return_value;
                zo_wxVersionInfo* zo0 = Z_wxVersionInfo_P(return_value);
                zo0->native_object = (wxVersionInfo_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetLibraryVersionInfo\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::GetLine(int line)
   Retrieve the contents of a line. */
PHP_METHOD(php_wxStyledTextCtrl, GetLine)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetLine\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetLine call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::GetLine((int) line0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = ((wxStyledTextCtrl_php*)native_object)->GetLine((int) line0);
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetLine\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetLineCount()
   Returns the number of lines in the document. */
PHP_METHOD(php_wxStyledTextCtrl, GetLineCount)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetLineCount\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetLineCount call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetLineCount())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetLineCount());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetLineCount\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetLineEndPosition(int line)
   Get the position after the last visible characters on a line. */
PHP_METHOD(php_wxStyledTextCtrl, GetLineEndPosition)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetLineEndPosition\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetLineEndPosition call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetLineEndPosition((int) line0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetLineEndPosition((int) line0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetLineEndPosition\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetLineIndentPosition(int line)
   Retrieve the position before the first non indentation character on a line. */
PHP_METHOD(php_wxStyledTextCtrl, GetLineIndentPosition)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetLineIndentPosition\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetLineIndentPosition call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetLineIndentPosition((int) line0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetLineIndentPosition((int) line0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetLineIndentPosition\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetLineIndentation(int line)
   Retrieve the number of columns that a line is indented. */
PHP_METHOD(php_wxStyledTextCtrl, GetLineIndentation)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetLineIndentation\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetLineIndentation call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetLineIndentation((int) line0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetLineIndentation((int) line0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetLineIndentation\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetLineSelEndPosition(int line)
   Retrieve the position of the end of the selection at the given line (wxSTC_INVALID_POSITION if no selection on this line). */
PHP_METHOD(php_wxStyledTextCtrl, GetLineSelEndPosition)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetLineSelEndPosition\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetLineSelEndPosition call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetLineSelEndPosition((int) line0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetLineSelEndPosition((int) line0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetLineSelEndPosition\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetLineSelStartPosition(int line)
   Retrieve the position of the start of the selection at the given line (wxSTC_INVALID_POSITION if no selection on this line). */
PHP_METHOD(php_wxStyledTextCtrl, GetLineSelStartPosition)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetLineSelStartPosition\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetLineSelStartPosition call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetLineSelStartPosition((int) line0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetLineSelStartPosition((int) line0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetLineSelStartPosition\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetLineState(int line)
   Retrieve the extra styling information for a line. */
PHP_METHOD(php_wxStyledTextCtrl, GetLineState)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetLineState\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetLineState call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetLineState((int) line0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetLineState((int) line0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetLineState\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetLineVisible(int line)
   Is a line visible? */
PHP_METHOD(php_wxStyledTextCtrl, GetLineVisible)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetLineVisible\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetLineVisible call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetLineVisible((int) line0))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetLineVisible((int) line0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetLineVisible\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetMainSelection()
   Which selection is the main selection. */
PHP_METHOD(php_wxStyledTextCtrl, GetMainSelection)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetMainSelection\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetMainSelection call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetMainSelection())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetMainSelection());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetMainSelection\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetMarginLeft()
   Returns the size in pixels of the left margin. */
PHP_METHOD(php_wxStyledTextCtrl, GetMarginLeft)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetMarginLeft\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetMarginLeft call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetMarginLeft())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetMarginLeft());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetMarginLeft\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetMarginMask(int margin)
   Retrieve the marker mask of a margin. */
PHP_METHOD(php_wxStyledTextCtrl, GetMarginMask)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetMarginMask\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetMarginMask call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long margin0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&margin0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &margin0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetMarginMask((int) margin0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetMarginMask((int) margin0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetMarginMask\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetMarginRight()
   Returns the size in pixels of the right margin. */
PHP_METHOD(php_wxStyledTextCtrl, GetMarginRight)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetMarginRight\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetMarginRight call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetMarginRight())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetMarginRight());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetMarginRight\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetMarginSensitive(int margin)
   Retrieve the mouse click sensitivity of a margin. */
PHP_METHOD(php_wxStyledTextCtrl, GetMarginSensitive)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetMarginSensitive\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetMarginSensitive call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long margin0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&margin0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &margin0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetMarginSensitive((int) margin0))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetMarginSensitive((int) margin0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetMarginSensitive\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetMarginType(int margin)
   Retrieve the type of a margin. */
PHP_METHOD(php_wxStyledTextCtrl, GetMarginType)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetMarginType\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetMarginType call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long margin0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&margin0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &margin0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetMarginType((int) margin0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetMarginType((int) margin0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetMarginType\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetMarginWidth(int margin)
   Retrieve the width of a margin in pixels. */
PHP_METHOD(php_wxStyledTextCtrl, GetMarginWidth)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetMarginWidth\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetMarginWidth call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long margin0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&margin0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &margin0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetMarginWidth((int) margin0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetMarginWidth((int) margin0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetMarginWidth\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetMarkerSymbolDefined(int markerNumber)
   Which symbol was defined for markerNumber with MarkerDefine. */
PHP_METHOD(php_wxStyledTextCtrl, GetMarkerSymbolDefined)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetMarkerSymbolDefined\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetMarkerSymbolDefined call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long markerNumber0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&markerNumber0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &markerNumber0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetMarkerSymbolDefined((int) markerNumber0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetMarkerSymbolDefined((int) markerNumber0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetMarkerSymbolDefined\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetMaxLineState()
   Retrieve the last line number that has line state. */
PHP_METHOD(php_wxStyledTextCtrl, GetMaxLineState)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetMaxLineState\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetMaxLineState call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetMaxLineState())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetMaxLineState());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetMaxLineState\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetModEventMask()
   Get which document modification events are sent to the container. */
PHP_METHOD(php_wxStyledTextCtrl, GetModEventMask)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetModEventMask\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetModEventMask call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetModEventMask())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetModEventMask());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetModEventMask\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetModify()
   Is the document different from when it was last saved? */
PHP_METHOD(php_wxStyledTextCtrl, GetModify)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetModify\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetModify call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetModify())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetModify());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetModify\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetMouseDownCaptures()
   Get whether mouse gets captured. */
PHP_METHOD(php_wxStyledTextCtrl, GetMouseDownCaptures)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetMouseDownCaptures\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetMouseDownCaptures call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetMouseDownCaptures())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetMouseDownCaptures());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetMouseDownCaptures\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetMouseDwellTime()
   Retrieve the time the mouse must sit still to generate a mouse dwell event. */
PHP_METHOD(php_wxStyledTextCtrl, GetMouseDwellTime)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetMouseDwellTime\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetMouseDwellTime call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetMouseDwellTime())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetMouseDwellTime());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetMouseDwellTime\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetMultipleSelection()
   Whether multiple selections can be made. */
PHP_METHOD(php_wxStyledTextCtrl, GetMultipleSelection)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetMultipleSelection\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetMultipleSelection call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetMultipleSelection())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetMultipleSelection());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetMultipleSelection\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetOvertype()
   Returns true if overtype mode is active otherwise false is returned. */
PHP_METHOD(php_wxStyledTextCtrl, GetOvertype)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetOvertype\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetOvertype call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetOvertype())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetOvertype());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetOvertype\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetPasteConvertEndings()
   Get convert-on-paste setting. */
PHP_METHOD(php_wxStyledTextCtrl, GetPasteConvertEndings)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetPasteConvertEndings\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetPasteConvertEndings call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetPasteConvertEndings())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetPasteConvertEndings());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetPasteConvertEndings\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetPrintColourMode()
   Returns the print colour mode. */
PHP_METHOD(php_wxStyledTextCtrl, GetPrintColourMode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetPrintColourMode\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetPrintColourMode call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetPrintColourMode())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetPrintColourMode());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetPrintColourMode\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetPrintMagnification()
   Returns the print magnification. */
PHP_METHOD(php_wxStyledTextCtrl, GetPrintMagnification)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetPrintMagnification\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetPrintMagnification call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetPrintMagnification())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetPrintMagnification());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetPrintMagnification\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetPrintWrapMode()
   Is printing line wrapped? */
PHP_METHOD(php_wxStyledTextCtrl, GetPrintWrapMode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetPrintWrapMode\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetPrintWrapMode call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetPrintWrapMode())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetPrintWrapMode());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetPrintWrapMode\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::GetProperty(string key)
   Retrieve a "property" value previously set with SetProperty. */
PHP_METHOD(php_wxStyledTextCtrl, GetProperty)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetProperty\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetProperty call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* key0;
    size_t key_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&key0, &key_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &key0, &key_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::GetProperty(wxString(key0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = ((wxStyledTextCtrl_php*)native_object)->GetProperty(wxString(key0, wxConvUTF8));
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetProperty\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::GetPropertyExpanded(string key)
   Retrieve a "property" value previously set with SetProperty, with "$()" variable replacement on returned buffer. */
PHP_METHOD(php_wxStyledTextCtrl, GetPropertyExpanded)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetPropertyExpanded\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetPropertyExpanded call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* key0;
    size_t key_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&key0, &key_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &key0, &key_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::GetPropertyExpanded(wxString(key0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = ((wxStyledTextCtrl_php*)native_object)->GetPropertyExpanded(wxString(key0, wxConvUTF8));
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetPropertyExpanded\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetPropertyInt(string key, int defaultValue)
   Retrieve a "property" value previously set with SetProperty, interpreted as an int AFTER any "$()" variable replacement. */
PHP_METHOD(php_wxStyledTextCtrl, GetPropertyInt)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetPropertyInt\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetPropertyInt call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* key0;
    size_t key_len0;
    long defaultValue0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's|l' (&key0, &key_len0, &defaultValue0)\n");
        #endif

        char parse_parameters_string[] = "s|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &key0, &key_len0, &defaultValue0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetPropertyInt(wxString(key0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetPropertyInt(wxString(key0, wxConvUTF8)));


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetPropertyInt(wxString(key0, wxConvUTF8), (int) defaultValue0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetPropertyInt(wxString(key0, wxConvUTF8), (int) defaultValue0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetPropertyInt\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetReadOnly()
   In read-only mode? */
PHP_METHOD(php_wxStyledTextCtrl, GetReadOnly)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetReadOnly\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetReadOnly call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetReadOnly())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetReadOnly());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetReadOnly\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetRectangularSelectionAnchor()
   Return the anchor position of the rectangular selection. */
PHP_METHOD(php_wxStyledTextCtrl, GetRectangularSelectionAnchor)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetRectangularSelectionAnchor\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetRectangularSelectionAnchor call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetRectangularSelectionAnchor())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetRectangularSelectionAnchor());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetRectangularSelectionAnchor\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetRectangularSelectionAnchorVirtualSpace()
   Return the virtual space of the anchor of the rectangular selection. */
PHP_METHOD(php_wxStyledTextCtrl, GetRectangularSelectionAnchorVirtualSpace)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetRectangularSelectionAnchorVirtualSpace\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetRectangularSelectionAnchorVirtualSpace call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetRectangularSelectionAnchorVirtualSpace())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetRectangularSelectionAnchorVirtualSpace());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetRectangularSelectionAnchorVirtualSpace\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetRectangularSelectionCaret()
   Return the caret position of the rectangular selection. */
PHP_METHOD(php_wxStyledTextCtrl, GetRectangularSelectionCaret)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetRectangularSelectionCaret\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetRectangularSelectionCaret call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetRectangularSelectionCaret())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetRectangularSelectionCaret());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetRectangularSelectionCaret\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetRectangularSelectionCaretVirtualSpace()
   Return the virtual space of the caret of the rectangular selection. */
PHP_METHOD(php_wxStyledTextCtrl, GetRectangularSelectionCaretVirtualSpace)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetRectangularSelectionCaretVirtualSpace\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetRectangularSelectionCaretVirtualSpace call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetRectangularSelectionCaretVirtualSpace())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetRectangularSelectionCaretVirtualSpace());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetRectangularSelectionCaretVirtualSpace\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetRectangularSelectionModifier()
   Get the modifier key used for rectangular selection. */
PHP_METHOD(php_wxStyledTextCtrl, GetRectangularSelectionModifier)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetRectangularSelectionModifier\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetRectangularSelectionModifier call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetRectangularSelectionModifier())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetRectangularSelectionModifier());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetRectangularSelectionModifier\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetSTCCursor()
   Get cursor type. */
PHP_METHOD(php_wxStyledTextCtrl, GetSTCCursor)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetSTCCursor\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetSTCCursor call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetSTCCursor())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetSTCCursor());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetSTCCursor\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetSTCFocus()
   Get internal focus flag. */
PHP_METHOD(php_wxStyledTextCtrl, GetSTCFocus)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetSTCFocus\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetSTCFocus call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetSTCFocus())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetSTCFocus());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetSTCFocus\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetScrollWidth()
   Retrieve the document width assumed for scrolling. */
PHP_METHOD(php_wxStyledTextCtrl, GetScrollWidth)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetScrollWidth\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetScrollWidth call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetScrollWidth())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetScrollWidth());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetScrollWidth\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetSearchFlags()
   Get the search flags used by SearchInTarget. */
PHP_METHOD(php_wxStyledTextCtrl, GetSearchFlags)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetSearchFlags\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetSearchFlags call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetSearchFlags())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetSearchFlags());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetSearchFlags\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetSelAlpha()
   Get the alpha of the selection. */
PHP_METHOD(php_wxStyledTextCtrl, GetSelAlpha)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetSelAlpha\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetSelAlpha call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetSelAlpha())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetSelAlpha());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetSelAlpha\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::GetSelectedText()
   Retrieve the selected text. */
PHP_METHOD(php_wxStyledTextCtrl, GetSelectedText)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetSelectedText\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetSelectedText call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::GetSelectedText().fn_str(), 1)\n\n");
                #endif

                wxString value_to_return0;
                value_to_return0 = ((wxStyledTextCtrl_php*)native_object)->GetSelectedText();
                RETVAL_STRING(value_to_return0.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetSelectedText\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetSelectionEnd()
   Returns the position at the end of the selection. */
PHP_METHOD(php_wxStyledTextCtrl, GetSelectionEnd)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetSelectionEnd\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetSelectionEnd call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetSelectionEnd())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetSelectionEnd());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetSelectionEnd\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetSelectionMode()
   Get the mode of the current selection. */
PHP_METHOD(php_wxStyledTextCtrl, GetSelectionMode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetSelectionMode\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetSelectionMode call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetSelectionMode())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetSelectionMode());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetSelectionMode\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetSelectionNAnchor(int selection)
   Return the anchor position of the nth selection. */
PHP_METHOD(php_wxStyledTextCtrl, GetSelectionNAnchor)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetSelectionNAnchor\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetSelectionNAnchor call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long selection0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&selection0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &selection0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetSelectionNAnchor((int) selection0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetSelectionNAnchor((int) selection0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetSelectionNAnchor\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetSelectionNAnchorVirtualSpace(int selection)
   Return the virtual space of the anchor of the nth selection. */
PHP_METHOD(php_wxStyledTextCtrl, GetSelectionNAnchorVirtualSpace)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetSelectionNAnchorVirtualSpace\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetSelectionNAnchorVirtualSpace call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long selection0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&selection0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &selection0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetSelectionNAnchorVirtualSpace((int) selection0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetSelectionNAnchorVirtualSpace((int) selection0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetSelectionNAnchorVirtualSpace\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetSelectionNCaret(int selection)
   Return the caret position of the nth selection. */
PHP_METHOD(php_wxStyledTextCtrl, GetSelectionNCaret)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetSelectionNCaret\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetSelectionNCaret call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long selection0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&selection0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &selection0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetSelectionNCaret((int) selection0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetSelectionNCaret((int) selection0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetSelectionNCaret\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetSelectionNCaretVirtualSpace(int selection)
   Return the virtual space of the caret of the nth selection. */
PHP_METHOD(php_wxStyledTextCtrl, GetSelectionNCaretVirtualSpace)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetSelectionNCaretVirtualSpace\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetSelectionNCaretVirtualSpace call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long selection0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&selection0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &selection0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetSelectionNCaretVirtualSpace((int) selection0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetSelectionNCaretVirtualSpace((int) selection0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetSelectionNCaretVirtualSpace\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetSelectionNEnd(int selection)
   Returns the position at the end of the selection. */
PHP_METHOD(php_wxStyledTextCtrl, GetSelectionNEnd)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetSelectionNEnd\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetSelectionNEnd call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long selection0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&selection0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &selection0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetSelectionNEnd((int) selection0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetSelectionNEnd((int) selection0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetSelectionNEnd\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetSelectionNStart(int selection)
   Returns the position at the start of the selection. */
PHP_METHOD(php_wxStyledTextCtrl, GetSelectionNStart)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetSelectionNStart\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetSelectionNStart call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long selection0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&selection0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &selection0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetSelectionNStart((int) selection0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetSelectionNStart((int) selection0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetSelectionNStart\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetSelectionStart()
   Returns the position at the start of the selection. */
PHP_METHOD(php_wxStyledTextCtrl, GetSelectionStart)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetSelectionStart\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetSelectionStart call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetSelectionStart())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetSelectionStart());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetSelectionStart\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetSelections()
   How many selections are there? */
PHP_METHOD(php_wxStyledTextCtrl, GetSelections)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetSelections\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetSelections call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetSelections())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetSelections());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetSelections\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetStatus()
   Get error status. */
PHP_METHOD(php_wxStyledTextCtrl, GetStatus)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetStatus\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetStatus call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetStatus())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetStatus());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetStatus\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetStyleAt(int pos)
   Returns the style byte at the position. */
PHP_METHOD(php_wxStyledTextCtrl, GetStyleAt)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetStyleAt\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetStyleAt call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pos0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&pos0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pos0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetStyleAt((int) pos0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetStyleAt((int) pos0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetStyleAt\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetTabIndents()
   Does a tab pressed when caret is within indentation indent? */
PHP_METHOD(php_wxStyledTextCtrl, GetTabIndents)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetTabIndents\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetTabIndents call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetTabIndents())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetTabIndents());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetTabIndents\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetTabWidth()
   Retrieve the visible size of a tab. */
PHP_METHOD(php_wxStyledTextCtrl, GetTabWidth)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetTabWidth\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetTabWidth call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetTabWidth())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetTabWidth());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetTabWidth\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetTargetEnd()
   Get the position that ends the target. */
PHP_METHOD(php_wxStyledTextCtrl, GetTargetEnd)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetTargetEnd\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetTargetEnd call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetTargetEnd())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetTargetEnd());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetTargetEnd\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetTargetStart()
   Get the position that starts the target. */
PHP_METHOD(php_wxStyledTextCtrl, GetTargetStart)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetTargetStart\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetTargetStart call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetTargetStart())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetTargetStart());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetTargetStart\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::GetText()
   Retrieve all the text in the document. */
PHP_METHOD(php_wxStyledTextCtrl, GetText)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetText\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetText call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::GetText().fn_str(), 1)\n\n");
                #endif

                wxString value_to_return0;
                value_to_return0 = ((wxStyledTextCtrl_php*)native_object)->GetText();
                RETVAL_STRING(value_to_return0.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetText\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetTextLength()
   Retrieve the number of characters in the document. */
PHP_METHOD(php_wxStyledTextCtrl, GetTextLength)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetTextLength\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetTextLength call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetTextLength())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetTextLength());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetTextLength\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::GetTextRange(int startPos, int endPos)
   Retrieve a range of text. */
PHP_METHOD(php_wxStyledTextCtrl, GetTextRange)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetTextRange\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetTextRange call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long startPos0;
    long endPos0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&startPos0, &endPos0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &startPos0, &endPos0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::GetTextRange((int) startPos0, (int) endPos0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return2;
                value_to_return2 = ((wxStyledTextCtrl_php*)native_object)->GetTextRange((int) startPos0, (int) endPos0);
                RETVAL_STRING(value_to_return2.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetTextRange\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetTwoPhaseDraw()
   Is drawing done in two phases with backgrounds drawn before foregrounds? */
PHP_METHOD(php_wxStyledTextCtrl, GetTwoPhaseDraw)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetTwoPhaseDraw\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetTwoPhaseDraw call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetTwoPhaseDraw())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetTwoPhaseDraw());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetTwoPhaseDraw\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetUndoCollection()
   Is undo history being collected? */
PHP_METHOD(php_wxStyledTextCtrl, GetUndoCollection)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetUndoCollection\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetUndoCollection call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetUndoCollection())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetUndoCollection());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetUndoCollection\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetUseHorizontalScrollBar()
   Is the horizontal scroll bar visible? */
PHP_METHOD(php_wxStyledTextCtrl, GetUseHorizontalScrollBar)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetUseHorizontalScrollBar\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetUseHorizontalScrollBar call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetUseHorizontalScrollBar())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetUseHorizontalScrollBar());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetUseHorizontalScrollBar\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetUseTabs()
   Retrieve whether tabs will be used in indentation. */
PHP_METHOD(php_wxStyledTextCtrl, GetUseTabs)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetUseTabs\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetUseTabs call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetUseTabs())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetUseTabs());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetUseTabs\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetUseVerticalScrollBar()
   Is the vertical scroll bar visible? */
PHP_METHOD(php_wxStyledTextCtrl, GetUseVerticalScrollBar)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetUseVerticalScrollBar\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetUseVerticalScrollBar call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetUseVerticalScrollBar())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetUseVerticalScrollBar());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetUseVerticalScrollBar\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetViewEOL()
   Are the end of line characters visible? */
PHP_METHOD(php_wxStyledTextCtrl, GetViewEOL)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetViewEOL\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetViewEOL call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetViewEOL())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetViewEOL());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetViewEOL\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetViewWhiteSpace()
   Are white space characters currently visible? Returns one of wxSTC_WS_* constants. */
PHP_METHOD(php_wxStyledTextCtrl, GetViewWhiteSpace)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetViewWhiteSpace\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetViewWhiteSpace call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetViewWhiteSpace())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetViewWhiteSpace());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetViewWhiteSpace\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetVirtualSpaceOptions()
   Return options for virtual space behaviour. */
PHP_METHOD(php_wxStyledTextCtrl, GetVirtualSpaceOptions)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetVirtualSpaceOptions\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetVirtualSpaceOptions call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetVirtualSpaceOptions())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetVirtualSpaceOptions());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetVirtualSpaceOptions\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetWhitespaceSize()
   Get the size of the dots used to mark space characters. */
PHP_METHOD(php_wxStyledTextCtrl, GetWhitespaceSize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetWhitespaceSize\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetWhitespaceSize call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetWhitespaceSize())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetWhitespaceSize());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetWhitespaceSize\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetWrapIndentMode()
   Retrieve how wrapped sublines are placed. */
PHP_METHOD(php_wxStyledTextCtrl, GetWrapIndentMode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetWrapIndentMode\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetWrapIndentMode call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetWrapIndentMode())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetWrapIndentMode());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetWrapIndentMode\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetWrapMode()
   Retrieve whether text is word wrapped. */
PHP_METHOD(php_wxStyledTextCtrl, GetWrapMode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetWrapMode\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetWrapMode call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetWrapMode())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetWrapMode());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetWrapMode\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetWrapStartIndent()
   Retrieve the start indent for wrapped lines. */
PHP_METHOD(php_wxStyledTextCtrl, GetWrapStartIndent)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetWrapStartIndent\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetWrapStartIndent call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetWrapStartIndent())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetWrapStartIndent());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetWrapStartIndent\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetWrapVisualFlags()
   Retrieve the display mode of visual flags for wrapped lines. */
PHP_METHOD(php_wxStyledTextCtrl, GetWrapVisualFlags)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetWrapVisualFlags\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetWrapVisualFlags call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetWrapVisualFlags())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetWrapVisualFlags());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetWrapVisualFlags\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetWrapVisualFlagsLocation()
   Retrieve the location of visual flags for wrapped lines. */
PHP_METHOD(php_wxStyledTextCtrl, GetWrapVisualFlagsLocation)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetWrapVisualFlagsLocation\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetWrapVisualFlagsLocation call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetWrapVisualFlagsLocation())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetWrapVisualFlagsLocation());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetWrapVisualFlagsLocation\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetXOffset()
   Get the xOffset (ie, horizontal scroll position). */
PHP_METHOD(php_wxStyledTextCtrl, GetXOffset)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetXOffset\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetXOffset call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetXOffset())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetXOffset());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetXOffset\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetZoom()
   Retrieve the zoom level. */
PHP_METHOD(php_wxStyledTextCtrl, GetZoom)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetZoom\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetZoom call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetZoom())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetZoom());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetZoom\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::GotoLine(int line)
   Set caret to start of a line and ensure it is visible. */
PHP_METHOD(php_wxStyledTextCtrl, GotoLine)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GotoLine\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GotoLine call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::GotoLine((int) line0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->GotoLine((int) line0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GotoLine\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::GotoPos(int caret)
   Set caret to a position and ensure it is visible. */
PHP_METHOD(php_wxStyledTextCtrl, GotoPos)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GotoPos\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GotoPos call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long caret0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&caret0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &caret0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::GotoPos((int) caret0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->GotoPos((int) caret0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GotoPos\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::HideLines(int lineStart, int lineEnd)
   Make a range of lines invisible. */
PHP_METHOD(php_wxStyledTextCtrl, HideLines)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::HideLines\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::HideLines call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long lineStart0;
    long lineEnd0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&lineStart0, &lineEnd0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &lineStart0, &lineEnd0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::HideLines((int) lineStart0, (int) lineEnd0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->HideLines((int) lineStart0, (int) lineEnd0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::HideLines\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::HideSelection(bool hide)
   Draw the selection in normal style or with selection highlighted. */
PHP_METHOD(php_wxStyledTextCtrl, HideSelection)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::HideSelection\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::HideSelection call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool hide0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&hide0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &hide0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::HideSelection(hide0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->HideSelection(hide0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::HideSelection\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::Home()
   Move caret to first position on line. */
PHP_METHOD(php_wxStyledTextCtrl, Home)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::Home\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::Home call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::Home()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->Home();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::Home\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::HomeDisplay()
   Move caret to first position on display line. */
PHP_METHOD(php_wxStyledTextCtrl, HomeDisplay)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::HomeDisplay\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::HomeDisplay call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::HomeDisplay()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->HomeDisplay();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::HomeDisplay\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::HomeDisplayExtend()
   Move caret to first position on display line extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, HomeDisplayExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::HomeDisplayExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::HomeDisplayExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::HomeDisplayExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->HomeDisplayExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::HomeDisplayExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::HomeExtend()
   Move caret to first position on line extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, HomeExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::HomeExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::HomeExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::HomeExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->HomeExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::HomeExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::HomeRectExtend()
   Move caret to first position on line, extending rectangular selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, HomeRectExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::HomeRectExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::HomeRectExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::HomeRectExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->HomeRectExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::HomeRectExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::HomeWrap()
   Like Home but when word-wrap is enabled goes first to start of display line HomeDisplay, then to start of document line Home. */
PHP_METHOD(php_wxStyledTextCtrl, HomeWrap)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::HomeWrap\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::HomeWrap call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::HomeWrap()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->HomeWrap();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::HomeWrap\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::HomeWrapExtend()
   Like HomeExtend but when word-wrap is enabled extends first to start of display line HomeDisplayExtend, then to start of document line HomeExtend. */
PHP_METHOD(php_wxStyledTextCtrl, HomeWrapExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::HomeWrapExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::HomeWrapExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::HomeWrapExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->HomeWrapExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::HomeWrapExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::IndicatorGetAlpha(int indicator)
   Get the alpha fill colour of the given indicator. */
PHP_METHOD(php_wxStyledTextCtrl, IndicatorGetAlpha)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::IndicatorGetAlpha\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::IndicatorGetAlpha call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long indicator0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&indicator0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &indicator0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::IndicatorGetAlpha((int) indicator0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->IndicatorGetAlpha((int) indicator0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::IndicatorGetAlpha\n"
        );
    }
}
/* }}} */

/* {{{ proto wxColour wxStyledTextCtrl::IndicatorGetForeground(int indicator)
   Retrieve the foreground colour of an indicator. */
PHP_METHOD(php_wxStyledTextCtrl, IndicatorGetForeground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::IndicatorGetForeground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::IndicatorGetForeground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long indicator0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&indicator0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &indicator0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::IndicatorGetForeground((int) indicator0) to return new object\n\n");
                #endif

                wxColour value_to_return1;
                value_to_return1 = ((wxStyledTextCtrl_php*)native_object)->IndicatorGetForeground((int) indicator0);
                ((wxRefCounter *) value_to_return1.GetRefData())->IncRef();
                void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
                memcpy(ptr, (void*) &value_to_return1, sizeof(wxColour));
                object_init_ex(return_value, php_wxColour_entry);
                ((wxColour_php*)ptr)->phpObj = *return_value;
                zo_wxColour* zo1 = Z_wxColour_P(return_value);
                zo1->native_object = (wxColour_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::IndicatorGetForeground\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::IndicatorGetStyle(int indicator)
   Retrieve the style of an indicator. */
PHP_METHOD(php_wxStyledTextCtrl, IndicatorGetStyle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::IndicatorGetStyle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::IndicatorGetStyle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long indicator0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&indicator0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &indicator0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::IndicatorGetStyle((int) indicator0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->IndicatorGetStyle((int) indicator0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::IndicatorGetStyle\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::IndicatorSetAlpha(int indicator, int alpha)
   Set the alpha fill colour of the given indicator. */
PHP_METHOD(php_wxStyledTextCtrl, IndicatorSetAlpha)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::IndicatorSetAlpha\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::IndicatorSetAlpha call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long indicator0;
    long alpha0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&indicator0, &alpha0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &indicator0, &alpha0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::IndicatorSetAlpha((int) indicator0, (int) alpha0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->IndicatorSetAlpha((int) indicator0, (int) alpha0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::IndicatorSetAlpha\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::IndicatorSetForeground(int indicator, wxColour fore)
   Set the foreground colour of an indicator. */
PHP_METHOD(php_wxStyledTextCtrl, IndicatorSetForeground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::IndicatorSetForeground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::IndicatorSetForeground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long indicator0;
    zval* fore0;
    wxColour* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lO' (&indicator0, &fore0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "lO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &indicator0, &fore0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(fore0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(fore0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(fore0)->native_object;
                    object_pointer0_1 = (wxColour*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'fore' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(fore0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'fore' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::IndicatorSetForeground((int) indicator0, *(wxColour*) object_pointer0_1)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->IndicatorSetForeground((int) indicator0, *(wxColour*) object_pointer0_1);

                references->AddReference(fore0, "wxStyledTextCtrl::IndicatorSetForeground at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::IndicatorSetForeground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::IndicatorSetStyle(int indicator, int indicatorStyle)
   Set an indicator to plain, squiggle or TT. */
PHP_METHOD(php_wxStyledTextCtrl, IndicatorSetStyle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::IndicatorSetStyle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::IndicatorSetStyle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long indicator0;
    long indicatorStyle0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&indicator0, &indicatorStyle0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &indicator0, &indicatorStyle0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::IndicatorSetStyle((int) indicator0, (int) indicatorStyle0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->IndicatorSetStyle((int) indicator0, (int) indicatorStyle0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::IndicatorSetStyle\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::InsertText(int pos, string text)
   Insert string at a position. */
PHP_METHOD(php_wxStyledTextCtrl, InsertText)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::InsertText\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::InsertText call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pos0;
    char* text0;
    size_t text_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ls' (&pos0, &text0, &text_len0)\n");
        #endif

        char parse_parameters_string[] = "ls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pos0, &text0, &text_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::InsertText((int) pos0, wxString(text0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->InsertText((int) pos0, wxString(text0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::InsertText\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::InsertTextRaw(int pos, string text)
   Insert string at a position. */
PHP_METHOD(php_wxStyledTextCtrl, InsertTextRaw)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::InsertTextRaw\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::InsertTextRaw call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pos0;
    char* text0;
    size_t text_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ls' (&pos0, &text0, &text_len0)\n");
        #endif

        char parse_parameters_string[] = "ls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pos0, &text0, &text_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::InsertTextRaw((int) pos0, text0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->InsertTextRaw((int) pos0, text0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::InsertTextRaw\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineCopy()
   Copy the line containing the caret. */
PHP_METHOD(php_wxStyledTextCtrl, LineCopy)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineCopy\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineCopy call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineCopy()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineCopy();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineCopy\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineCut()
   Cut the line containing the caret. */
PHP_METHOD(php_wxStyledTextCtrl, LineCut)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineCut\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineCut call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineCut()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineCut();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineCut\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineDelete()
   Delete the line containing the caret. */
PHP_METHOD(php_wxStyledTextCtrl, LineDelete)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineDelete\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineDelete call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineDelete()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineDelete();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineDelete\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineDown()
   Move caret down one line. */
PHP_METHOD(php_wxStyledTextCtrl, LineDown)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineDown\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineDown call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineDown()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineDown();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineDown\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineDownExtend()
   Move caret down one line extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, LineDownExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineDownExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineDownExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineDownExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineDownExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineDownExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineDownRectExtend()
   Move caret down one line, extending rectangular selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, LineDownRectExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineDownRectExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineDownRectExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineDownRectExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineDownRectExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineDownRectExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineDuplicate()
   Duplicate the current line. */
PHP_METHOD(php_wxStyledTextCtrl, LineDuplicate)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineDuplicate\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineDuplicate call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineDuplicate()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineDuplicate();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineDuplicate\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineEnd()
   Move caret to last position on line. */
PHP_METHOD(php_wxStyledTextCtrl, LineEnd)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineEnd\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineEnd call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineEnd()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineEnd();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineEnd\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineEndDisplay()
   Move caret to last position on display line. */
PHP_METHOD(php_wxStyledTextCtrl, LineEndDisplay)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineEndDisplay\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineEndDisplay call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineEndDisplay()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineEndDisplay();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineEndDisplay\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineEndDisplayExtend()
   Move caret to last position on display line extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, LineEndDisplayExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineEndDisplayExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineEndDisplayExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineEndDisplayExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineEndDisplayExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineEndDisplayExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineEndExtend()
   Move caret to last position on line extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, LineEndExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineEndExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineEndExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineEndExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineEndExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineEndExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineEndRectExtend()
   Move caret to last position on line, extending rectangular selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, LineEndRectExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineEndRectExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineEndRectExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineEndRectExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineEndRectExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineEndRectExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineEndWrap()
   Like LineEnd but when word-wrap is enabled goes first to end of display line LineEndDisplay, then to start of document line LineEnd. */
PHP_METHOD(php_wxStyledTextCtrl, LineEndWrap)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineEndWrap\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineEndWrap call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineEndWrap()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineEndWrap();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineEndWrap\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineEndWrapExtend()
   Like LineEndExtend but when word-wrap is enabled extends first to end of display line LineEndDisplayExtend, then to start of document line LineEndExtend. */
PHP_METHOD(php_wxStyledTextCtrl, LineEndWrapExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineEndWrapExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineEndWrapExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineEndWrapExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineEndWrapExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineEndWrapExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::LineFromPosition(int pos)
   Retrieve the line containing a position. */
PHP_METHOD(php_wxStyledTextCtrl, LineFromPosition)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineFromPosition\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineFromPosition call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pos0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&pos0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pos0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::LineFromPosition((int) pos0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->LineFromPosition((int) pos0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineFromPosition\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::LineLength(int line)
   How many characters are on a line, including end of line characters? */
PHP_METHOD(php_wxStyledTextCtrl, LineLength)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineLength\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineLength call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::LineLength((int) line0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->LineLength((int) line0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineLength\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineScroll(int columns, int lines)
   Scroll horizontally and vertically. */
PHP_METHOD(php_wxStyledTextCtrl, LineScroll)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineScroll\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineScroll call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long columns0;
    long lines0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&columns0, &lines0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &columns0, &lines0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineScroll((int) columns0, (int) lines0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineScroll((int) columns0, (int) lines0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineScroll\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineScrollDown()
   Scroll the document down, keeping the caret visible. */
PHP_METHOD(php_wxStyledTextCtrl, LineScrollDown)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineScrollDown\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineScrollDown call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineScrollDown()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineScrollDown();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineScrollDown\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineScrollUp()
   Scroll the document up, keeping the caret visible. */
PHP_METHOD(php_wxStyledTextCtrl, LineScrollUp)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineScrollUp\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineScrollUp call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineScrollUp()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineScrollUp();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineScrollUp\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineTranspose()
   Switch the current line with the previous. */
PHP_METHOD(php_wxStyledTextCtrl, LineTranspose)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineTranspose\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineTranspose call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineTranspose()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineTranspose();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineTranspose\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineUp()
   Move caret up one line. */
PHP_METHOD(php_wxStyledTextCtrl, LineUp)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineUp\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineUp call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineUp()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineUp();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineUp\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineUpExtend()
   Move caret up one line extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, LineUpExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineUpExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineUpExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineUpExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineUpExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineUpExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LineUpRectExtend()
   Move caret up one line, extending rectangular selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, LineUpRectExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LineUpRectExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LineUpRectExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LineUpRectExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LineUpRectExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LineUpRectExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LinesJoin()
   Join the lines in the target. */
PHP_METHOD(php_wxStyledTextCtrl, LinesJoin)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LinesJoin\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LinesJoin call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LinesJoin()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LinesJoin();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LinesJoin\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::LinesOnScreen()
   Retrieves the number of lines completely visible. */
PHP_METHOD(php_wxStyledTextCtrl, LinesOnScreen)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LinesOnScreen\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LinesOnScreen call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::LinesOnScreen())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->LinesOnScreen());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LinesOnScreen\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LinesSplit(int pixelWidth)
   Split the lines in the target into lines that are less wide than pixelWidth where possible. */
PHP_METHOD(php_wxStyledTextCtrl, LinesSplit)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LinesSplit\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LinesSplit call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pixelWidth0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&pixelWidth0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pixelWidth0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LinesSplit((int) pixelWidth0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LinesSplit((int) pixelWidth0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LinesSplit\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::LowerCase()
   Transform the selection to lower case. */
PHP_METHOD(php_wxStyledTextCtrl, LowerCase)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::LowerCase\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::LowerCase call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::LowerCase()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->LowerCase();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::LowerCase\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::MarginGetStyle(int line)
   Get the style number for the text margin for a line. */
PHP_METHOD(php_wxStyledTextCtrl, MarginGetStyle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarginGetStyle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarginGetStyle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::MarginGetStyle((int) line0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->MarginGetStyle((int) line0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarginGetStyle\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::MarginGetStyleOffset()
   Get the start of the range of style numbers used for margin text. */
PHP_METHOD(php_wxStyledTextCtrl, MarginGetStyleOffset)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarginGetStyleOffset\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarginGetStyleOffset call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::MarginGetStyleOffset())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->MarginGetStyleOffset());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarginGetStyleOffset\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::MarginGetStyles(int line)
   Get the styles in the text margin for a line. */
PHP_METHOD(php_wxStyledTextCtrl, MarginGetStyles)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarginGetStyles\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarginGetStyles call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::MarginGetStyles((int) line0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = ((wxStyledTextCtrl_php*)native_object)->MarginGetStyles((int) line0);
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarginGetStyles\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::MarginGetText(int line)
   Get the text in the text margin for a line. */
PHP_METHOD(php_wxStyledTextCtrl, MarginGetText)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarginGetText\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarginGetText call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::MarginGetText((int) line0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = ((wxStyledTextCtrl_php*)native_object)->MarginGetText((int) line0);
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarginGetText\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MarginSetStyle(int line, int style)
   Set the style number for the text margin for a line. */
PHP_METHOD(php_wxStyledTextCtrl, MarginSetStyle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarginSetStyle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarginSetStyle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&line0, &style0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MarginSetStyle((int) line0, (int) style0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MarginSetStyle((int) line0, (int) style0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarginSetStyle\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MarginSetStyleOffset(int style)
   Get the start of the range of style numbers used for margin text. */
PHP_METHOD(php_wxStyledTextCtrl, MarginSetStyleOffset)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarginSetStyleOffset\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarginSetStyleOffset call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&style0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MarginSetStyleOffset((int) style0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MarginSetStyleOffset((int) style0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarginSetStyleOffset\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MarginSetStyles(int line, string styles)
   Set the style in the text margin for a line. */
PHP_METHOD(php_wxStyledTextCtrl, MarginSetStyles)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarginSetStyles\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarginSetStyles call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    char* styles0;
    size_t styles_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ls' (&line0, &styles0, &styles_len0)\n");
        #endif

        char parse_parameters_string[] = "ls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0, &styles0, &styles_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MarginSetStyles((int) line0, wxString(styles0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MarginSetStyles((int) line0, wxString(styles0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarginSetStyles\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MarginSetText(int line, string text)
   Set the text in the text margin for a line. */
PHP_METHOD(php_wxStyledTextCtrl, MarginSetText)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarginSetText\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarginSetText call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    char* text0;
    size_t text_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ls' (&line0, &text0, &text_len0)\n");
        #endif

        char parse_parameters_string[] = "ls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0, &text0, &text_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MarginSetText((int) line0, wxString(text0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MarginSetText((int) line0, wxString(text0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarginSetText\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MarginTextClearAll()
   Clear the margin text on all lines. */
PHP_METHOD(php_wxStyledTextCtrl, MarginTextClearAll)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarginTextClearAll\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarginTextClearAll call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MarginTextClearAll()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MarginTextClearAll();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarginTextClearAll\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::MarkerAdd(int line, int markerNumber)
   Add a marker to a line, returning an ID which can be used to find or delete the marker. */
PHP_METHOD(php_wxStyledTextCtrl, MarkerAdd)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarkerAdd\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarkerAdd call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    long markerNumber0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&line0, &markerNumber0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0, &markerNumber0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::MarkerAdd((int) line0, (int) markerNumber0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->MarkerAdd((int) line0, (int) markerNumber0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarkerAdd\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MarkerAddSet(int line, int markerSet)
   Add a set of markers to a line. */
PHP_METHOD(php_wxStyledTextCtrl, MarkerAddSet)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarkerAddSet\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarkerAddSet call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    long markerSet0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&line0, &markerSet0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0, &markerSet0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MarkerAddSet((int) line0, (int) markerSet0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MarkerAddSet((int) line0, (int) markerSet0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarkerAddSet\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MarkerDefine(int markerNumber, int markerSymbol, wxColour foreground, wxColour background)
   Set the symbol used for a particular marker number, and optionally the fore and background colours. */
PHP_METHOD(php_wxStyledTextCtrl, MarkerDefine)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarkerDefine\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarkerDefine call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long markerNumber0;
    long markerSymbol0;
    zval* foreground0;
    wxColour* object_pointer0_2 = 0;
    zval* background0;
    wxColour* object_pointer0_3 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 2  && arguments_received <= 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll|OO' (&markerNumber0, &markerSymbol0, &foreground0, php_wxColour_entry, &background0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "ll|OO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &markerNumber0, &markerSymbol0, &foreground0, php_wxColour_entry, &background0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 3){
                if(Z_TYPE_P(foreground0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(foreground0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(foreground0)->native_object;
                    object_pointer0_2 = (wxColour*) argument_native_object;
                    if (!object_pointer0_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'foreground' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(foreground0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'foreground' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(background0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(background0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(background0)->native_object;
                    object_pointer0_3 = (wxColour*) argument_native_object;
                    if (!object_pointer0_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'background' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(background0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'background' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MarkerDefine((int) markerNumber0, (int) markerSymbol0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MarkerDefine((int) markerNumber0, (int) markerSymbol0);


                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MarkerDefine((int) markerNumber0, (int) markerSymbol0, *(wxColour*) object_pointer0_2)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MarkerDefine((int) markerNumber0, (int) markerSymbol0, *(wxColour*) object_pointer0_2);

                references->AddReference(foreground0, "wxStyledTextCtrl::MarkerDefine at call 3 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MarkerDefine((int) markerNumber0, (int) markerSymbol0, *(wxColour*) object_pointer0_2, *(wxColour*) object_pointer0_3)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MarkerDefine((int) markerNumber0, (int) markerSymbol0, *(wxColour*) object_pointer0_2, *(wxColour*) object_pointer0_3);

                references->AddReference(foreground0, "wxStyledTextCtrl::MarkerDefine at call 3 with 4 argument(s)");
                references->AddReference(background0, "wxStyledTextCtrl::MarkerDefine at call 3 with 4 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarkerDefine\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MarkerDefineBitmap(int markerNumber, wxBitmap bmp)
   Define a marker with a wxBitmap. */
PHP_METHOD(php_wxStyledTextCtrl, MarkerDefineBitmap)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarkerDefineBitmap\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarkerDefineBitmap call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long markerNumber0;
    zval* bmp0;
    wxBitmap* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lO' (&markerNumber0, &bmp0, php_wxBitmap_entry)\n");
        #endif

        char parse_parameters_string[] = "lO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &markerNumber0, &bmp0, php_wxBitmap_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(bmp0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bmp0)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bmp0)->native_object;
                    object_pointer0_1 = (wxBitmap*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'bmp' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(bmp0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'bmp' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MarkerDefineBitmap((int) markerNumber0, *(wxBitmap*) object_pointer0_1)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MarkerDefineBitmap((int) markerNumber0, *(wxBitmap*) object_pointer0_1);

                references->AddReference(bmp0, "wxStyledTextCtrl::MarkerDefineBitmap at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarkerDefineBitmap\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MarkerDelete(int line, int markerNumber)
   Delete a marker from a line. */
PHP_METHOD(php_wxStyledTextCtrl, MarkerDelete)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarkerDelete\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarkerDelete call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    long markerNumber0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&line0, &markerNumber0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0, &markerNumber0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MarkerDelete((int) line0, (int) markerNumber0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MarkerDelete((int) line0, (int) markerNumber0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarkerDelete\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MarkerDeleteAll(int markerNumber)
   Delete all markers with a particular number from all lines. */
PHP_METHOD(php_wxStyledTextCtrl, MarkerDeleteAll)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarkerDeleteAll\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarkerDeleteAll call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long markerNumber0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&markerNumber0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &markerNumber0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MarkerDeleteAll((int) markerNumber0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MarkerDeleteAll((int) markerNumber0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarkerDeleteAll\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MarkerDeleteHandle(int markerHandle)
   Delete a marker. */
PHP_METHOD(php_wxStyledTextCtrl, MarkerDeleteHandle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarkerDeleteHandle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarkerDeleteHandle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long markerHandle0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&markerHandle0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &markerHandle0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MarkerDeleteHandle((int) markerHandle0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MarkerDeleteHandle((int) markerHandle0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarkerDeleteHandle\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::MarkerGet(int line)
   Get a bit mask of all the markers set on a line. */
PHP_METHOD(php_wxStyledTextCtrl, MarkerGet)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarkerGet\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarkerGet call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::MarkerGet((int) line0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->MarkerGet((int) line0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarkerGet\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::MarkerLineFromHandle(int markerHandle)
   Retrieve the line number at which a particular marker is located. */
PHP_METHOD(php_wxStyledTextCtrl, MarkerLineFromHandle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarkerLineFromHandle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarkerLineFromHandle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long markerHandle0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&markerHandle0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &markerHandle0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::MarkerLineFromHandle((int) markerHandle0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->MarkerLineFromHandle((int) markerHandle0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarkerLineFromHandle\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::MarkerNext(int lineStart, int markerMask)
   Find the next line at or after lineStart that includes a marker in mask. */
PHP_METHOD(php_wxStyledTextCtrl, MarkerNext)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarkerNext\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarkerNext call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long lineStart0;
    long markerMask0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&lineStart0, &markerMask0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &lineStart0, &markerMask0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::MarkerNext((int) lineStart0, (int) markerMask0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->MarkerNext((int) lineStart0, (int) markerMask0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarkerNext\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::MarkerPrevious(int lineStart, int markerMask)
   Find the previous line before lineStart that includes a marker in mask. */
PHP_METHOD(php_wxStyledTextCtrl, MarkerPrevious)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarkerPrevious\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarkerPrevious call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long lineStart0;
    long markerMask0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&lineStart0, &markerMask0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &lineStart0, &markerMask0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::MarkerPrevious((int) lineStart0, (int) markerMask0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->MarkerPrevious((int) lineStart0, (int) markerMask0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarkerPrevious\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MarkerSetAlpha(int markerNumber, int alpha)
   Set the alpha used for a marker that is drawn in the text area, not the margin. */
PHP_METHOD(php_wxStyledTextCtrl, MarkerSetAlpha)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarkerSetAlpha\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarkerSetAlpha call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long markerNumber0;
    long alpha0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&markerNumber0, &alpha0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &markerNumber0, &alpha0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MarkerSetAlpha((int) markerNumber0, (int) alpha0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MarkerSetAlpha((int) markerNumber0, (int) alpha0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarkerSetAlpha\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MarkerSetBackground(int markerNumber, wxColour back)
   Set the background colour used for a particular marker number. */
PHP_METHOD(php_wxStyledTextCtrl, MarkerSetBackground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarkerSetBackground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarkerSetBackground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long markerNumber0;
    zval* back0;
    wxColour* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lO' (&markerNumber0, &back0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "lO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &markerNumber0, &back0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(back0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(back0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(back0)->native_object;
                    object_pointer0_1 = (wxColour*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'back' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(back0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'back' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MarkerSetBackground((int) markerNumber0, *(wxColour*) object_pointer0_1)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MarkerSetBackground((int) markerNumber0, *(wxColour*) object_pointer0_1);

                references->AddReference(back0, "wxStyledTextCtrl::MarkerSetBackground at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarkerSetBackground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MarkerSetForeground(int markerNumber, wxColour fore)
   Set the foreground colour used for a particular marker number. */
PHP_METHOD(php_wxStyledTextCtrl, MarkerSetForeground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarkerSetForeground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarkerSetForeground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long markerNumber0;
    zval* fore0;
    wxColour* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lO' (&markerNumber0, &fore0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "lO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &markerNumber0, &fore0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(fore0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(fore0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(fore0)->native_object;
                    object_pointer0_1 = (wxColour*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'fore' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(fore0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'fore' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MarkerSetForeground((int) markerNumber0, *(wxColour*) object_pointer0_1)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MarkerSetForeground((int) markerNumber0, *(wxColour*) object_pointer0_1);

                references->AddReference(fore0, "wxStyledTextCtrl::MarkerSetForeground at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarkerSetForeground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MoveCaretInsideView()
   Move the caret inside current view if it's not there already. */
PHP_METHOD(php_wxStyledTextCtrl, MoveCaretInsideView)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MoveCaretInsideView\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MoveCaretInsideView call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MoveCaretInsideView()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MoveCaretInsideView();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MoveCaretInsideView\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::NewLine()
   Insert a new line, may use a CRLF, CR or LF depending on EOL mode. */
PHP_METHOD(php_wxStyledTextCtrl, NewLine)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::NewLine\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::NewLine call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::NewLine()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->NewLine();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::NewLine\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::PageDown()
   Move caret one page down. */
PHP_METHOD(php_wxStyledTextCtrl, PageDown)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::PageDown\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::PageDown call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::PageDown()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->PageDown();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::PageDown\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::PageDownExtend()
   Move caret one page down extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, PageDownExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::PageDownExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::PageDownExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::PageDownExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->PageDownExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::PageDownExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::PageDownRectExtend()
   Move caret one page down, extending rectangular selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, PageDownRectExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::PageDownRectExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::PageDownRectExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::PageDownRectExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->PageDownRectExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::PageDownRectExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::PageUp()
   Move caret one page up. */
PHP_METHOD(php_wxStyledTextCtrl, PageUp)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::PageUp\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::PageUp call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::PageUp()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->PageUp();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::PageUp\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::PageUpExtend()
   Move caret one page up extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, PageUpExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::PageUpExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::PageUpExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::PageUpExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->PageUpExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::PageUpExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::PageUpRectExtend()
   Move caret one page up, extending rectangular selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, PageUpRectExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::PageUpRectExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::PageUpRectExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::PageUpRectExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->PageUpRectExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::PageUpRectExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ParaDown()
   Move caret down one paragraph (delimited by empty lines). */
PHP_METHOD(php_wxStyledTextCtrl, ParaDown)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ParaDown\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ParaDown call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ParaDown()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ParaDown();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ParaDown\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ParaDownExtend()
   Extend selection down one paragraph (delimited by empty lines). */
PHP_METHOD(php_wxStyledTextCtrl, ParaDownExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ParaDownExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ParaDownExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ParaDownExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ParaDownExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ParaDownExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ParaUp()
   Move caret up one paragraph (delimited by empty lines). */
PHP_METHOD(php_wxStyledTextCtrl, ParaUp)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ParaUp\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ParaUp call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ParaUp()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ParaUp();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ParaUp\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ParaUpExtend()
   Extend selection up one paragraph (delimited by empty lines). */
PHP_METHOD(php_wxStyledTextCtrl, ParaUpExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ParaUpExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ParaUpExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ParaUpExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ParaUpExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ParaUpExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::Paste()
   Paste the contents of the clipboard into the document replacing the selection. */
PHP_METHOD(php_wxStyledTextCtrl, Paste)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::Paste\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::Paste call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::Paste()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->Paste();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::Paste\n"
        );
    }
}
/* }}} */

/* {{{ proto wxPoint wxStyledTextCtrl::PointFromPosition(int pos)
   Retrieve the point in the window where a position is displayed. */
PHP_METHOD(php_wxStyledTextCtrl, PointFromPosition)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::PointFromPosition\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::PointFromPosition call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pos0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&pos0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pos0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::PointFromPosition((int) pos0) to return new object\n\n");
                #endif

                wxPoint value_to_return1;
                value_to_return1 = ((wxStyledTextCtrl_php*)native_object)->PointFromPosition((int) pos0);
                void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                memcpy(ptr, (void*) &value_to_return1, sizeof(wxPoint));
                object_init_ex(return_value, php_wxPoint_entry);
                ((wxPoint_php*)ptr)->phpObj = *return_value;
                zo_wxPoint* zo1 = Z_wxPoint_P(return_value);
                zo1->native_object = (wxPoint_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::PointFromPosition\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::PositionAfter(int pos)
   Given a valid document position, return the next position taking code page into account. */
PHP_METHOD(php_wxStyledTextCtrl, PositionAfter)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::PositionAfter\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::PositionAfter call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pos0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&pos0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pos0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::PositionAfter((int) pos0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->PositionAfter((int) pos0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::PositionAfter\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::PositionBefore(int pos)
   Given a valid document position, return the previous position taking code page into account. */
PHP_METHOD(php_wxStyledTextCtrl, PositionBefore)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::PositionBefore\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::PositionBefore call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pos0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&pos0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pos0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::PositionBefore((int) pos0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->PositionBefore((int) pos0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::PositionBefore\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::PositionFromLine(int line)
   Retrieve the position at the start of a line. */
PHP_METHOD(php_wxStyledTextCtrl, PositionFromLine)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::PositionFromLine\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::PositionFromLine call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::PositionFromLine((int) line0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->PositionFromLine((int) line0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::PositionFromLine\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::PositionFromPoint(wxPoint pt)
   Find the position from a point within the window. */
PHP_METHOD(php_wxStyledTextCtrl, PositionFromPoint)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::PositionFromPoint\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::PositionFromPoint call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* pt0;
    wxPoint* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&pt0, php_wxPoint_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pt0, php_wxPoint_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(pt0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pt0)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pt0)->native_object;
                    object_pointer0_0 = (wxPoint*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'pt' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pt0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pt' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::PositionFromPoint(*(wxPoint*) object_pointer0_0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->PositionFromPoint(*(wxPoint*) object_pointer0_0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::PositionFromPoint\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::PositionFromPointClose(int x, int y)
   Find the position from a point within the window but return wxSTC_INVALID_POSITION if not close to text. */
PHP_METHOD(php_wxStyledTextCtrl, PositionFromPointClose)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::PositionFromPointClose\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::PositionFromPointClose call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&x0, &y0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::PositionFromPointClose((int) x0, (int) y0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->PositionFromPointClose((int) x0, (int) y0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::PositionFromPointClose\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::Redo()
   Redoes the next action on the undo history. */
PHP_METHOD(php_wxStyledTextCtrl, Redo)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::Redo\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::Redo call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::Redo()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->Redo();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::Redo\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::RegisterImage(int type, wxBitmap bmp)
   Register an image for use in autocompletion lists. */
PHP_METHOD(php_wxStyledTextCtrl, RegisterImage)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::RegisterImage\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::RegisterImage call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long type0;
    zval* bmp0;
    wxBitmap* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lO' (&type0, &bmp0, php_wxBitmap_entry)\n");
        #endif

        char parse_parameters_string[] = "lO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &type0, &bmp0, php_wxBitmap_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(bmp0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bmp0)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bmp0)->native_object;
                    object_pointer0_1 = (wxBitmap*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'bmp' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(bmp0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'bmp' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::RegisterImage((int) type0, *(wxBitmap*) object_pointer0_1)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->RegisterImage((int) type0, *(wxBitmap*) object_pointer0_1);

                references->AddReference(bmp0, "wxStyledTextCtrl::RegisterImage at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::RegisterImage\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ReplaceSelection(string text)
   Replace the selected text with the argument text. */
PHP_METHOD(php_wxStyledTextCtrl, ReplaceSelection)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ReplaceSelection\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ReplaceSelection call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* text0;
    size_t text_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&text0, &text_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &text0, &text_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ReplaceSelection(wxString(text0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ReplaceSelection(wxString(text0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ReplaceSelection\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::ReplaceTarget(string text)
   Replace the target text with the argument text. */
PHP_METHOD(php_wxStyledTextCtrl, ReplaceTarget)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ReplaceTarget\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ReplaceTarget call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* text0;
    size_t text_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&text0, &text_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &text0, &text_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::ReplaceTarget(wxString(text0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->ReplaceTarget(wxString(text0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ReplaceTarget\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::ReplaceTargetRE(string text)
   Replace the target text with the argument text after \d processing. */
PHP_METHOD(php_wxStyledTextCtrl, ReplaceTargetRE)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ReplaceTargetRE\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ReplaceTargetRE call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* text0;
    size_t text_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&text0, &text_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &text0, &text_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::ReplaceTargetRE(wxString(text0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->ReplaceTargetRE(wxString(text0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ReplaceTargetRE\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::RotateSelection()
   Set the main selection to the next selection. */
PHP_METHOD(php_wxStyledTextCtrl, RotateSelection)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::RotateSelection\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::RotateSelection call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::RotateSelection()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->RotateSelection();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::RotateSelection\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ScrollToColumn(int column)
   Scroll enough to make the given column visible. */
PHP_METHOD(php_wxStyledTextCtrl, ScrollToColumn)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ScrollToColumn\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ScrollToColumn call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long column0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&column0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &column0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ScrollToColumn((int) column0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ScrollToColumn((int) column0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ScrollToColumn\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ScrollToLine(int line)
   Scroll enough to make the given line visible. */
PHP_METHOD(php_wxStyledTextCtrl, ScrollToLine)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ScrollToLine\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ScrollToLine call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ScrollToLine((int) line0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ScrollToLine((int) line0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ScrollToLine\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SearchAnchor()
   Sets the current caret position to be the search anchor. */
PHP_METHOD(php_wxStyledTextCtrl, SearchAnchor)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SearchAnchor\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SearchAnchor call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SearchAnchor()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SearchAnchor();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SearchAnchor\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::SearchInTarget(string text)
   Search for a counted string in the target and set the target to the found range. */
PHP_METHOD(php_wxStyledTextCtrl, SearchInTarget)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SearchInTarget\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SearchInTarget call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* text0;
    size_t text_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&text0, &text_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &text0, &text_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::SearchInTarget(wxString(text0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->SearchInTarget(wxString(text0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SearchInTarget\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::SearchNext(int searchFlags, string text)
   Find some text starting at the search anchor. */
PHP_METHOD(php_wxStyledTextCtrl, SearchNext)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SearchNext\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SearchNext call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long searchFlags0;
    char* text0;
    size_t text_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ls' (&searchFlags0, &text0, &text_len0)\n");
        #endif

        char parse_parameters_string[] = "ls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &searchFlags0, &text0, &text_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::SearchNext((int) searchFlags0, wxString(text0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->SearchNext((int) searchFlags0, wxString(text0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SearchNext\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::SearchPrev(int searchFlags, string text)
   Find some text starting at the search anchor and moving backwards. */
PHP_METHOD(php_wxStyledTextCtrl, SearchPrev)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SearchPrev\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SearchPrev call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long searchFlags0;
    char* text0;
    size_t text_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ls' (&searchFlags0, &text0, &text_len0)\n");
        #endif

        char parse_parameters_string[] = "ls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &searchFlags0, &text0, &text_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::SearchPrev((int) searchFlags0, wxString(text0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->SearchPrev((int) searchFlags0, wxString(text0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SearchPrev\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SelectAll()
   Select all the text in the document. */
PHP_METHOD(php_wxStyledTextCtrl, SelectAll)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SelectAll\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SelectAll call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SelectAll()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SelectAll();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SelectAll\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SelectionDuplicate()
   Duplicate the selection. */
PHP_METHOD(php_wxStyledTextCtrl, SelectionDuplicate)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SelectionDuplicate\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SelectionDuplicate call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SelectionDuplicate()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SelectionDuplicate();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SelectionDuplicate\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::SelectionIsRectangle()
   Is the selection rectangular? The alternative is the more common stream selection. */
PHP_METHOD(php_wxStyledTextCtrl, SelectionIsRectangle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SelectionIsRectangle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SelectionIsRectangle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::SelectionIsRectangle())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->SelectionIsRectangle());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SelectionIsRectangle\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetAdditionalCaretForeground(wxColour fore)
   Set the foreground colour of additional carets. */
PHP_METHOD(php_wxStyledTextCtrl, SetAdditionalCaretForeground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetAdditionalCaretForeground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetAdditionalCaretForeground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* fore0;
    wxColour* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&fore0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &fore0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(fore0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(fore0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(fore0)->native_object;
                    object_pointer0_0 = (wxColour*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'fore' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(fore0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'fore' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetAdditionalCaretForeground(*(wxColour*) object_pointer0_0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetAdditionalCaretForeground(*(wxColour*) object_pointer0_0);

                references->AddReference(fore0, "wxStyledTextCtrl::SetAdditionalCaretForeground at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetAdditionalCaretForeground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetAdditionalCaretsBlink(bool additionalCaretsBlink)
   Set whether additional carets will blink. */
PHP_METHOD(php_wxStyledTextCtrl, SetAdditionalCaretsBlink)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetAdditionalCaretsBlink\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetAdditionalCaretsBlink call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool additionalCaretsBlink0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&additionalCaretsBlink0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &additionalCaretsBlink0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetAdditionalCaretsBlink(additionalCaretsBlink0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetAdditionalCaretsBlink(additionalCaretsBlink0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetAdditionalCaretsBlink\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetAdditionalCaretsVisible(bool additionalCaretsVisible)
   Set whether additional carets are visible. */
PHP_METHOD(php_wxStyledTextCtrl, SetAdditionalCaretsVisible)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetAdditionalCaretsVisible\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetAdditionalCaretsVisible call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool additionalCaretsVisible0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&additionalCaretsVisible0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &additionalCaretsVisible0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetAdditionalCaretsVisible(additionalCaretsVisible0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetAdditionalCaretsVisible(additionalCaretsVisible0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetAdditionalCaretsVisible\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetAdditionalSelAlpha(int alpha)
   Set the alpha of the selection. */
PHP_METHOD(php_wxStyledTextCtrl, SetAdditionalSelAlpha)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetAdditionalSelAlpha\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetAdditionalSelAlpha call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long alpha0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&alpha0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &alpha0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetAdditionalSelAlpha((int) alpha0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetAdditionalSelAlpha((int) alpha0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetAdditionalSelAlpha\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetAdditionalSelBackground(wxColour back)
   Set the background colour of additional selections. */
PHP_METHOD(php_wxStyledTextCtrl, SetAdditionalSelBackground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetAdditionalSelBackground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetAdditionalSelBackground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* back0;
    wxColour* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&back0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &back0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(back0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(back0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(back0)->native_object;
                    object_pointer0_0 = (wxColour*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'back' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(back0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'back' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetAdditionalSelBackground(*(wxColour*) object_pointer0_0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetAdditionalSelBackground(*(wxColour*) object_pointer0_0);

                references->AddReference(back0, "wxStyledTextCtrl::SetAdditionalSelBackground at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetAdditionalSelBackground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetAdditionalSelForeground(wxColour fore)
   Set the foreground colour of additional selections. */
PHP_METHOD(php_wxStyledTextCtrl, SetAdditionalSelForeground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetAdditionalSelForeground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetAdditionalSelForeground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* fore0;
    wxColour* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&fore0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &fore0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(fore0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(fore0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(fore0)->native_object;
                    object_pointer0_0 = (wxColour*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'fore' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(fore0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'fore' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetAdditionalSelForeground(*(wxColour*) object_pointer0_0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetAdditionalSelForeground(*(wxColour*) object_pointer0_0);

                references->AddReference(fore0, "wxStyledTextCtrl::SetAdditionalSelForeground at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetAdditionalSelForeground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetAdditionalSelectionTyping(bool additionalSelectionTyping)
   Set whether typing can be performed into multiple selections. */
PHP_METHOD(php_wxStyledTextCtrl, SetAdditionalSelectionTyping)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetAdditionalSelectionTyping\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetAdditionalSelectionTyping call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool additionalSelectionTyping0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&additionalSelectionTyping0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &additionalSelectionTyping0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetAdditionalSelectionTyping(additionalSelectionTyping0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetAdditionalSelectionTyping(additionalSelectionTyping0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetAdditionalSelectionTyping\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetAnchor(int anchor)
   Set the selection anchor to a position. */
PHP_METHOD(php_wxStyledTextCtrl, SetAnchor)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetAnchor\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetAnchor call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long anchor0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&anchor0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &anchor0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetAnchor((int) anchor0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetAnchor((int) anchor0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetAnchor\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetBackSpaceUnIndents(bool bsUnIndents)
   Sets whether a backspace pressed when caret is within indentation unindents. */
PHP_METHOD(php_wxStyledTextCtrl, SetBackSpaceUnIndents)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetBackSpaceUnIndents\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetBackSpaceUnIndents call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool bsUnIndents0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&bsUnIndents0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &bsUnIndents0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetBackSpaceUnIndents(bsUnIndents0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetBackSpaceUnIndents(bsUnIndents0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetBackSpaceUnIndents\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetBufferedDraw(bool buffered)
   If drawing is buffered then each line of text is drawn into a bitmap buffer before drawing it to the screen to avoid flicker. */
PHP_METHOD(php_wxStyledTextCtrl, SetBufferedDraw)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetBufferedDraw\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetBufferedDraw call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool buffered0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&buffered0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &buffered0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetBufferedDraw(buffered0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetBufferedDraw(buffered0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetBufferedDraw\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetCaretForeground(wxColour fore)
   Set the foreground colour of the caret. */
PHP_METHOD(php_wxStyledTextCtrl, SetCaretForeground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetCaretForeground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetCaretForeground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* fore0;
    wxColour* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&fore0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &fore0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(fore0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(fore0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(fore0)->native_object;
                    object_pointer0_0 = (wxColour*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'fore' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(fore0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'fore' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetCaretForeground(*(wxColour*) object_pointer0_0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetCaretForeground(*(wxColour*) object_pointer0_0);

                references->AddReference(fore0, "wxStyledTextCtrl::SetCaretForeground at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetCaretForeground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetCaretLineBackAlpha(int alpha)
   Set background alpha of the caret line. */
PHP_METHOD(php_wxStyledTextCtrl, SetCaretLineBackAlpha)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetCaretLineBackAlpha\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetCaretLineBackAlpha call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long alpha0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&alpha0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &alpha0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetCaretLineBackAlpha((int) alpha0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetCaretLineBackAlpha((int) alpha0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetCaretLineBackAlpha\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetCaretLineBackground(wxColour back)
   Set the colour of the background of the line containing the caret. */
PHP_METHOD(php_wxStyledTextCtrl, SetCaretLineBackground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetCaretLineBackground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetCaretLineBackground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* back0;
    wxColour* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&back0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &back0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(back0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(back0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(back0)->native_object;
                    object_pointer0_0 = (wxColour*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'back' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(back0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'back' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetCaretLineBackground(*(wxColour*) object_pointer0_0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetCaretLineBackground(*(wxColour*) object_pointer0_0);

                references->AddReference(back0, "wxStyledTextCtrl::SetCaretLineBackground at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetCaretLineBackground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetCaretLineVisible(bool show)
   Display the background of the line containing the caret in a different colour. */
PHP_METHOD(php_wxStyledTextCtrl, SetCaretLineVisible)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetCaretLineVisible\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetCaretLineVisible call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool show0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&show0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &show0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetCaretLineVisible(show0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetCaretLineVisible(show0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetCaretLineVisible\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetCaretPeriod(int periodMilliseconds)
   Get the time in milliseconds that the caret is on and off. */
PHP_METHOD(php_wxStyledTextCtrl, SetCaretPeriod)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetCaretPeriod\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetCaretPeriod call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long periodMilliseconds0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&periodMilliseconds0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &periodMilliseconds0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetCaretPeriod((int) periodMilliseconds0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetCaretPeriod((int) periodMilliseconds0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetCaretPeriod\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetCaretWidth(int pixelWidth)
   Set the width of the insert mode caret. */
PHP_METHOD(php_wxStyledTextCtrl, SetCaretWidth)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetCaretWidth\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetCaretWidth call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pixelWidth0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&pixelWidth0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pixelWidth0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetCaretWidth((int) pixelWidth0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetCaretWidth((int) pixelWidth0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetCaretWidth\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetCharsDefault()
   Reset the set of characters for whitespace and word characters to the defaults. */
PHP_METHOD(php_wxStyledTextCtrl, SetCharsDefault)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetCharsDefault\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetCharsDefault call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetCharsDefault()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetCharsDefault();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetCharsDefault\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetCodePage(int codePage)
   Set the code page used to interpret the bytes of the document as characters. */
PHP_METHOD(php_wxStyledTextCtrl, SetCodePage)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetCodePage\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetCodePage call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long codePage0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&codePage0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &codePage0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetCodePage((int) codePage0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetCodePage((int) codePage0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetCodePage\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetControlCharSymbol(int symbol)
   Change the way control characters are displayed: If symbol is < 32, keep the drawn way, else, use the given character. */
PHP_METHOD(php_wxStyledTextCtrl, SetControlCharSymbol)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetControlCharSymbol\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetControlCharSymbol call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long symbol0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&symbol0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &symbol0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetControlCharSymbol((int) symbol0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetControlCharSymbol((int) symbol0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetControlCharSymbol\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetCurrentPos(int caret)
   Sets the position of the caret. */
PHP_METHOD(php_wxStyledTextCtrl, SetCurrentPos)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetCurrentPos\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetCurrentPos call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long caret0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&caret0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &caret0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetCurrentPos((int) caret0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetCurrentPos((int) caret0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetCurrentPos\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetEOLMode(int eolMode)
   Set the current end of line mode. */
PHP_METHOD(php_wxStyledTextCtrl, SetEOLMode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetEOLMode\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetEOLMode call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long eolMode0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&eolMode0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &eolMode0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetEOLMode((int) eolMode0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetEOLMode((int) eolMode0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetEOLMode\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetEdgeColour(wxColour edgeColour)
   Change the colour used in edge indication. */
PHP_METHOD(php_wxStyledTextCtrl, SetEdgeColour)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetEdgeColour\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetEdgeColour call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* edgeColour0;
    wxColour* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&edgeColour0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &edgeColour0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(edgeColour0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(edgeColour0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(edgeColour0)->native_object;
                    object_pointer0_0 = (wxColour*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'edgeColour' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(edgeColour0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'edgeColour' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetEdgeColour(*(wxColour*) object_pointer0_0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetEdgeColour(*(wxColour*) object_pointer0_0);

                references->AddReference(edgeColour0, "wxStyledTextCtrl::SetEdgeColour at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetEdgeColour\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetEdgeColumn(int column)
   Set the column number of the edge. */
PHP_METHOD(php_wxStyledTextCtrl, SetEdgeColumn)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetEdgeColumn\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetEdgeColumn call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long column0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&column0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &column0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetEdgeColumn((int) column0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetEdgeColumn((int) column0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetEdgeColumn\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetEdgeMode(int edgeMode)
   The edge may be displayed by a line (wxSTC_EDGE_LINE/wxSTC_EDGE_MULTILINE) or by highlighting text that goes beyond it (wxSTC_EDGE_BACKGROUND) or not displayed at all (wxSTC_EDGE_NONE). */
PHP_METHOD(php_wxStyledTextCtrl, SetEdgeMode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetEdgeMode\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetEdgeMode call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long edgeMode0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&edgeMode0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &edgeMode0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetEdgeMode((int) edgeMode0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetEdgeMode((int) edgeMode0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetEdgeMode\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetEndAtLastLine(bool endAtLastLine)
   Sets the scroll range so that maximum scroll position has the last line at the bottom of the view (default). */
PHP_METHOD(php_wxStyledTextCtrl, SetEndAtLastLine)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetEndAtLastLine\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetEndAtLastLine call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool endAtLastLine0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&endAtLastLine0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &endAtLastLine0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetEndAtLastLine(endAtLastLine0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetEndAtLastLine(endAtLastLine0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetEndAtLastLine\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetExtraAscent(int extraAscent)
   Set extra ascent for each line. */
PHP_METHOD(php_wxStyledTextCtrl, SetExtraAscent)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetExtraAscent\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetExtraAscent call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long extraAscent0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&extraAscent0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &extraAscent0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetExtraAscent((int) extraAscent0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetExtraAscent((int) extraAscent0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetExtraAscent\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetExtraDescent(int extraDescent)
   Set extra descent for each line. */
PHP_METHOD(php_wxStyledTextCtrl, SetExtraDescent)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetExtraDescent\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetExtraDescent call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long extraDescent0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&extraDescent0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &extraDescent0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetExtraDescent((int) extraDescent0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetExtraDescent((int) extraDescent0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetExtraDescent\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetFirstVisibleLine(int displayLine)
   Scroll so that a display line is at the top of the display. */
PHP_METHOD(php_wxStyledTextCtrl, SetFirstVisibleLine)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetFirstVisibleLine\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetFirstVisibleLine call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long displayLine0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&displayLine0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &displayLine0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetFirstVisibleLine((int) displayLine0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetFirstVisibleLine((int) displayLine0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetFirstVisibleLine\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetFoldExpanded(int line, bool expanded)
   Show the children of a header line. */
PHP_METHOD(php_wxStyledTextCtrl, SetFoldExpanded)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetFoldExpanded\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetFoldExpanded call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool expanded0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lb' (&line0, &expanded0)\n");
        #endif

        char parse_parameters_string[] = "lb";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0, &expanded0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetFoldExpanded((int) line0, expanded0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetFoldExpanded((int) line0, expanded0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetFoldExpanded\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetFoldFlags(int flags)
   Set some style options for folding. */
PHP_METHOD(php_wxStyledTextCtrl, SetFoldFlags)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetFoldFlags\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetFoldFlags call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long flags0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&flags0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &flags0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetFoldFlags((int) flags0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetFoldFlags((int) flags0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetFoldFlags\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetFoldLevel(int line, int level)
   Set the fold level of a line. */
PHP_METHOD(php_wxStyledTextCtrl, SetFoldLevel)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetFoldLevel\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetFoldLevel call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    long level0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&line0, &level0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0, &level0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetFoldLevel((int) line0, (int) level0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetFoldLevel((int) line0, (int) level0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetFoldLevel\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetFoldMarginColour(bool useSetting, wxColour back)
   Set one of the colours used as a chequerboard pattern in the fold margin. */
PHP_METHOD(php_wxStyledTextCtrl, SetFoldMarginColour)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetFoldMarginColour\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetFoldMarginColour call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool useSetting0;
    zval* back0;
    wxColour* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'bO' (&useSetting0, &back0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "bO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &useSetting0, &back0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(back0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(back0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(back0)->native_object;
                    object_pointer0_1 = (wxColour*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'back' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(back0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'back' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetFoldMarginColour(useSetting0, *(wxColour*) object_pointer0_1)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetFoldMarginColour(useSetting0, *(wxColour*) object_pointer0_1);

                references->AddReference(back0, "wxStyledTextCtrl::SetFoldMarginColour at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetFoldMarginColour\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetFoldMarginHiColour(bool useSetting, wxColour fore)
   Set the other colour used as a chequerboard pattern in the fold margin. */
PHP_METHOD(php_wxStyledTextCtrl, SetFoldMarginHiColour)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetFoldMarginHiColour\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetFoldMarginHiColour call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool useSetting0;
    zval* fore0;
    wxColour* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'bO' (&useSetting0, &fore0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "bO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &useSetting0, &fore0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(fore0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(fore0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(fore0)->native_object;
                    object_pointer0_1 = (wxColour*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'fore' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(fore0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'fore' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetFoldMarginHiColour(useSetting0, *(wxColour*) object_pointer0_1)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetFoldMarginHiColour(useSetting0, *(wxColour*) object_pointer0_1);

                references->AddReference(fore0, "wxStyledTextCtrl::SetFoldMarginHiColour at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetFoldMarginHiColour\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetHScrollBar(wxScrollBar &bar)
   Set the horizontal scrollbar to use instead of the one that's built-in. */
PHP_METHOD(php_wxStyledTextCtrl, SetHScrollBar)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetHScrollBar\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetHScrollBar call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* bar0;
    wxScrollBar* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&bar0)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &bar0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(bar0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxScrollBar_P(bar0)->object_type;
                    argument_native_object = (void*) Z_wxScrollBar_P(bar0)->native_object;
                    object_pointer0_0 = (wxScrollBar*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXSCROLLBAR_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'bar' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(bar0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'bar' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetHScrollBar((wxScrollBar*) object_pointer0_0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetHScrollBar((wxScrollBar*) object_pointer0_0);

                references->AddReference(bar0, "wxStyledTextCtrl::SetHScrollBar at call 1 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetHScrollBar\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetHighlightGuide(int column)
   Set the highlighted indentation guide column. */
PHP_METHOD(php_wxStyledTextCtrl, SetHighlightGuide)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetHighlightGuide\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetHighlightGuide call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long column0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&column0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &column0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetHighlightGuide((int) column0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetHighlightGuide((int) column0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetHighlightGuide\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetHotspotActiveBackground(bool useSetting, wxColour back)
   Set a back colour for active hotspots. */
PHP_METHOD(php_wxStyledTextCtrl, SetHotspotActiveBackground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetHotspotActiveBackground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetHotspotActiveBackground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool useSetting0;
    zval* back0;
    wxColour* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'bO' (&useSetting0, &back0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "bO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &useSetting0, &back0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(back0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(back0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(back0)->native_object;
                    object_pointer0_1 = (wxColour*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'back' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(back0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'back' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetHotspotActiveBackground(useSetting0, *(wxColour*) object_pointer0_1)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetHotspotActiveBackground(useSetting0, *(wxColour*) object_pointer0_1);

                references->AddReference(back0, "wxStyledTextCtrl::SetHotspotActiveBackground at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetHotspotActiveBackground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetHotspotActiveForeground(bool useSetting, wxColour fore)
   Set a fore colour for active hotspots. */
PHP_METHOD(php_wxStyledTextCtrl, SetHotspotActiveForeground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetHotspotActiveForeground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetHotspotActiveForeground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool useSetting0;
    zval* fore0;
    wxColour* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'bO' (&useSetting0, &fore0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "bO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &useSetting0, &fore0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(fore0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(fore0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(fore0)->native_object;
                    object_pointer0_1 = (wxColour*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'fore' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(fore0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'fore' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetHotspotActiveForeground(useSetting0, *(wxColour*) object_pointer0_1)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetHotspotActiveForeground(useSetting0, *(wxColour*) object_pointer0_1);

                references->AddReference(fore0, "wxStyledTextCtrl::SetHotspotActiveForeground at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetHotspotActiveForeground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetHotspotActiveUnderline(bool underline)
   Enable / Disable underlining active hotspots. */
PHP_METHOD(php_wxStyledTextCtrl, SetHotspotActiveUnderline)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetHotspotActiveUnderline\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetHotspotActiveUnderline call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool underline0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&underline0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &underline0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetHotspotActiveUnderline(underline0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetHotspotActiveUnderline(underline0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetHotspotActiveUnderline\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetHotspotSingleLine(bool singleLine)
   Limit hotspots to single line so hotspots on two lines don't merge. */
PHP_METHOD(php_wxStyledTextCtrl, SetHotspotSingleLine)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetHotspotSingleLine\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetHotspotSingleLine call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool singleLine0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&singleLine0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &singleLine0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetHotspotSingleLine(singleLine0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetHotspotSingleLine(singleLine0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetHotspotSingleLine\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetIndent(int indentSize)
   Set the number of spaces used for one level of indentation. */
PHP_METHOD(php_wxStyledTextCtrl, SetIndent)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetIndent\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetIndent call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long indentSize0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&indentSize0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &indentSize0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetIndent((int) indentSize0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetIndent((int) indentSize0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetIndent\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetIndentationGuides(int indentView)
   Show or hide indentation guides. */
PHP_METHOD(php_wxStyledTextCtrl, SetIndentationGuides)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetIndentationGuides\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetIndentationGuides call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long indentView0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&indentView0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &indentView0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetIndentationGuides((int) indentView0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetIndentationGuides((int) indentView0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetIndentationGuides\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetKeyWords(int keyWordSet, string keyWords)
   Set up the key words used by the lexer. */
PHP_METHOD(php_wxStyledTextCtrl, SetKeyWords)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetKeyWords\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetKeyWords call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long keyWordSet0;
    char* keyWords0;
    size_t keyWords_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ls' (&keyWordSet0, &keyWords0, &keyWords_len0)\n");
        #endif

        char parse_parameters_string[] = "ls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &keyWordSet0, &keyWords0, &keyWords_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetKeyWords((int) keyWordSet0, wxString(keyWords0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetKeyWords((int) keyWordSet0, wxString(keyWords0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetKeyWords\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetLastKeydownProcessed(bool val)
   Returns the line number of the line with the caret. */
PHP_METHOD(php_wxStyledTextCtrl, SetLastKeydownProcessed)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetLastKeydownProcessed\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetLastKeydownProcessed call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool val0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&val0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &val0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetLastKeydownProcessed(val0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetLastKeydownProcessed(val0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetLastKeydownProcessed\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetLayoutCache(int cacheMode)
   Sets the degree of caching of layout information. */
PHP_METHOD(php_wxStyledTextCtrl, SetLayoutCache)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetLayoutCache\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetLayoutCache call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long cacheMode0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&cacheMode0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &cacheMode0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetLayoutCache((int) cacheMode0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetLayoutCache((int) cacheMode0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetLayoutCache\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetLexer(int lexer)
   Set the lexing language of the document. */
PHP_METHOD(php_wxStyledTextCtrl, SetLexer)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetLexer\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetLexer call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long lexer0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&lexer0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &lexer0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetLexer((int) lexer0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetLexer((int) lexer0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetLexer\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetLexerLanguage(string language)
   Set the lexing language of the document based on string name. */
PHP_METHOD(php_wxStyledTextCtrl, SetLexerLanguage)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetLexerLanguage\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetLexerLanguage call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* language0;
    size_t language_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&language0, &language_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &language0, &language_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetLexerLanguage(wxString(language0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetLexerLanguage(wxString(language0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetLexerLanguage\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetLineIndentation(int line, int indentation)
   Change the indentation of a line to a number of columns. */
PHP_METHOD(php_wxStyledTextCtrl, SetLineIndentation)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetLineIndentation\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetLineIndentation call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    long indentation0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&line0, &indentation0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0, &indentation0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetLineIndentation((int) line0, (int) indentation0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetLineIndentation((int) line0, (int) indentation0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetLineIndentation\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetLineState(int line, int state)
   Used to hold extra styling information for each line. */
PHP_METHOD(php_wxStyledTextCtrl, SetLineState)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetLineState\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetLineState call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    long state0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&line0, &state0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0, &state0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetLineState((int) line0, (int) state0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetLineState((int) line0, (int) state0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetLineState\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetMainSelection(int selection)
   Set the main selection. */
PHP_METHOD(php_wxStyledTextCtrl, SetMainSelection)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetMainSelection\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetMainSelection call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long selection0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&selection0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &selection0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetMainSelection((int) selection0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetMainSelection((int) selection0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetMainSelection\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetMarginLeft(int pixelWidth)
   Sets the size in pixels of the left margin. */
PHP_METHOD(php_wxStyledTextCtrl, SetMarginLeft)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetMarginLeft\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetMarginLeft call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pixelWidth0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&pixelWidth0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pixelWidth0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetMarginLeft((int) pixelWidth0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetMarginLeft((int) pixelWidth0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetMarginLeft\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetMarginMask(int margin, int mask)
   Set a mask that determines which markers are displayed in a margin. */
PHP_METHOD(php_wxStyledTextCtrl, SetMarginMask)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetMarginMask\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetMarginMask call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long margin0;
    long mask0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&margin0, &mask0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &margin0, &mask0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetMarginMask((int) margin0, (int) mask0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetMarginMask((int) margin0, (int) mask0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetMarginMask\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetMarginRight(int pixelWidth)
   Sets the size in pixels of the right margin. */
PHP_METHOD(php_wxStyledTextCtrl, SetMarginRight)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetMarginRight\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetMarginRight call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pixelWidth0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&pixelWidth0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pixelWidth0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetMarginRight((int) pixelWidth0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetMarginRight((int) pixelWidth0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetMarginRight\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetMarginSensitive(int margin, bool sensitive)
   Make a margin sensitive or insensitive to mouse clicks. */
PHP_METHOD(php_wxStyledTextCtrl, SetMarginSensitive)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetMarginSensitive\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetMarginSensitive call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long margin0;
    bool sensitive0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lb' (&margin0, &sensitive0)\n");
        #endif

        char parse_parameters_string[] = "lb";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &margin0, &sensitive0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetMarginSensitive((int) margin0, sensitive0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetMarginSensitive((int) margin0, sensitive0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetMarginSensitive\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetMarginType(int margin, int marginType)
   Set a margin to be either numeric or symbolic. */
PHP_METHOD(php_wxStyledTextCtrl, SetMarginType)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetMarginType\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetMarginType call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long margin0;
    long marginType0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&margin0, &marginType0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &margin0, &marginType0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetMarginType((int) margin0, (int) marginType0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetMarginType((int) margin0, (int) marginType0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetMarginType\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetMarginWidth(int margin, int pixelWidth)
   Set the width of a margin to a width expressed in pixels. */
PHP_METHOD(php_wxStyledTextCtrl, SetMarginWidth)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetMarginWidth\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetMarginWidth call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long margin0;
    long pixelWidth0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&margin0, &pixelWidth0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &margin0, &pixelWidth0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetMarginWidth((int) margin0, (int) pixelWidth0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetMarginWidth((int) margin0, (int) pixelWidth0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetMarginWidth\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetMargins(int left, int right)
   Set the left and right margin in the edit area, measured in pixels. */
PHP_METHOD(php_wxStyledTextCtrl, SetMargins)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetMargins\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetMargins call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long left0;
    long right0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&left0, &right0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &left0, &right0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetMargins((int) left0, (int) right0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetMargins((int) left0, (int) right0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetMargins\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetModEventMask(int eventMask)
   Set which document modification events are sent to the container. */
PHP_METHOD(php_wxStyledTextCtrl, SetModEventMask)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetModEventMask\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetModEventMask call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long eventMask0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&eventMask0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &eventMask0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetModEventMask((int) eventMask0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetModEventMask((int) eventMask0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetModEventMask\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetMouseDownCaptures(bool captures)
   Set whether the mouse is captured when its button is pressed. */
PHP_METHOD(php_wxStyledTextCtrl, SetMouseDownCaptures)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetMouseDownCaptures\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetMouseDownCaptures call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool captures0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&captures0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &captures0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetMouseDownCaptures(captures0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetMouseDownCaptures(captures0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetMouseDownCaptures\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetMouseDwellTime(int periodMilliseconds)
   Sets the time the mouse must sit still to generate a mouse dwell event. */
PHP_METHOD(php_wxStyledTextCtrl, SetMouseDwellTime)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetMouseDwellTime\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetMouseDwellTime call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long periodMilliseconds0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&periodMilliseconds0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &periodMilliseconds0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetMouseDwellTime((int) periodMilliseconds0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetMouseDwellTime((int) periodMilliseconds0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetMouseDwellTime\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetMultipleSelection(bool multipleSelection)
   Set whether multiple selections can be made. */
PHP_METHOD(php_wxStyledTextCtrl, SetMultipleSelection)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetMultipleSelection\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetMultipleSelection call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool multipleSelection0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&multipleSelection0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &multipleSelection0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetMultipleSelection(multipleSelection0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetMultipleSelection(multipleSelection0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetMultipleSelection\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetOvertype(bool overType)
   Set to overtype (true) or insert mode. */
PHP_METHOD(php_wxStyledTextCtrl, SetOvertype)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetOvertype\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetOvertype call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overType0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&overType0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &overType0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetOvertype(overType0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetOvertype(overType0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetOvertype\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetPasteConvertEndings(bool convert)
   Enable/Disable convert-on-paste for line endings. */
PHP_METHOD(php_wxStyledTextCtrl, SetPasteConvertEndings)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetPasteConvertEndings\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetPasteConvertEndings call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool convert0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&convert0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &convert0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetPasteConvertEndings(convert0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetPasteConvertEndings(convert0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetPasteConvertEndings\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetPrintColourMode(int mode)
   Modify colours when printing for clearer printed text. */
PHP_METHOD(php_wxStyledTextCtrl, SetPrintColourMode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetPrintColourMode\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetPrintColourMode call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long mode0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&mode0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &mode0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetPrintColourMode((int) mode0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetPrintColourMode((int) mode0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetPrintColourMode\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetPrintMagnification(int magnification)
   Sets the print magnification added to the point size of each style for printing. */
PHP_METHOD(php_wxStyledTextCtrl, SetPrintMagnification)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetPrintMagnification\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetPrintMagnification call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long magnification0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&magnification0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &magnification0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetPrintMagnification((int) magnification0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetPrintMagnification((int) magnification0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetPrintMagnification\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetPrintWrapMode(int wrapMode)
   Set printing to line wrapped (wxSTC_WRAP_WORD) or not line wrapped (wxSTC_WRAP_NONE). */
PHP_METHOD(php_wxStyledTextCtrl, SetPrintWrapMode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetPrintWrapMode\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetPrintWrapMode call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long wrapMode0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&wrapMode0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &wrapMode0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetPrintWrapMode((int) wrapMode0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetPrintWrapMode((int) wrapMode0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetPrintWrapMode\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetProperty(string key, string value)
   Set up a value that may be used by a lexer for some optional feature. */
PHP_METHOD(php_wxStyledTextCtrl, SetProperty)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetProperty\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetProperty call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* key0;
    size_t key_len0;
    char* value0;
    size_t value_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss' (&key0, &key_len0, &value0, &value_len0)\n");
        #endif

        char parse_parameters_string[] = "ss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &key0, &key_len0, &value0, &value_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetProperty(wxString(key0, wxConvUTF8), wxString(value0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetProperty(wxString(key0, wxConvUTF8), wxString(value0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetProperty\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetReadOnly(bool readOnly)
   Set to read only or read write. */
PHP_METHOD(php_wxStyledTextCtrl, SetReadOnly)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetReadOnly\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetReadOnly call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool readOnly0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&readOnly0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &readOnly0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetReadOnly(readOnly0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetReadOnly(readOnly0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetReadOnly\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetRectangularSelectionAnchor(int anchor)
   Set the anchor position of the rectangular selection. */
PHP_METHOD(php_wxStyledTextCtrl, SetRectangularSelectionAnchor)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetRectangularSelectionAnchor\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetRectangularSelectionAnchor call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long anchor0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&anchor0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &anchor0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetRectangularSelectionAnchor((int) anchor0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetRectangularSelectionAnchor((int) anchor0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetRectangularSelectionAnchor\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetRectangularSelectionAnchorVirtualSpace(int space)
   Set the virtual space of the anchor of the rectangular selection. */
PHP_METHOD(php_wxStyledTextCtrl, SetRectangularSelectionAnchorVirtualSpace)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetRectangularSelectionAnchorVirtualSpace\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetRectangularSelectionAnchorVirtualSpace call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long space0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&space0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &space0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetRectangularSelectionAnchorVirtualSpace((int) space0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetRectangularSelectionAnchorVirtualSpace((int) space0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetRectangularSelectionAnchorVirtualSpace\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetRectangularSelectionCaret(int caret)
   Set the caret position of the rectangular selection. */
PHP_METHOD(php_wxStyledTextCtrl, SetRectangularSelectionCaret)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetRectangularSelectionCaret\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetRectangularSelectionCaret call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long caret0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&caret0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &caret0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetRectangularSelectionCaret((int) caret0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetRectangularSelectionCaret((int) caret0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetRectangularSelectionCaret\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetRectangularSelectionCaretVirtualSpace(int space)
   Set the virtual space of the caret of the rectangular selection. */
PHP_METHOD(php_wxStyledTextCtrl, SetRectangularSelectionCaretVirtualSpace)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetRectangularSelectionCaretVirtualSpace\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetRectangularSelectionCaretVirtualSpace call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long space0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&space0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &space0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetRectangularSelectionCaretVirtualSpace((int) space0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetRectangularSelectionCaretVirtualSpace((int) space0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetRectangularSelectionCaretVirtualSpace\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetRectangularSelectionModifier(int modifier)
   On GTK+, allow selecting the modifier key to use for mouse-based rectangular selection. */
PHP_METHOD(php_wxStyledTextCtrl, SetRectangularSelectionModifier)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetRectangularSelectionModifier\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetRectangularSelectionModifier call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long modifier0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&modifier0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &modifier0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetRectangularSelectionModifier((int) modifier0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetRectangularSelectionModifier((int) modifier0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetRectangularSelectionModifier\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetSTCCursor(int cursorType)
   Sets the cursor to one of the wxSTC_CURSOR* values. */
PHP_METHOD(php_wxStyledTextCtrl, SetSTCCursor)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetSTCCursor\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetSTCCursor call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long cursorType0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&cursorType0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &cursorType0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetSTCCursor((int) cursorType0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetSTCCursor((int) cursorType0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetSTCCursor\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetSTCFocus(bool focus)
   Change internal focus flag. */
PHP_METHOD(php_wxStyledTextCtrl, SetSTCFocus)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetSTCFocus\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetSTCFocus call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool focus0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&focus0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &focus0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetSTCFocus(focus0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetSTCFocus(focus0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetSTCFocus\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetSavePoint()
   Remember the current position in the undo history as the position at which the document was saved. */
PHP_METHOD(php_wxStyledTextCtrl, SetSavePoint)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetSavePoint\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetSavePoint call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetSavePoint()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetSavePoint();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetSavePoint\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetScrollWidth(int pixelWidth)
   Sets the document width assumed for scrolling. */
PHP_METHOD(php_wxStyledTextCtrl, SetScrollWidth)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetScrollWidth\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetScrollWidth call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pixelWidth0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&pixelWidth0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pixelWidth0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetScrollWidth((int) pixelWidth0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetScrollWidth((int) pixelWidth0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetScrollWidth\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetSearchFlags(int searchFlags)
   Set the search flags used by SearchInTarget. */
PHP_METHOD(php_wxStyledTextCtrl, SetSearchFlags)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetSearchFlags\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetSearchFlags call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long searchFlags0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&searchFlags0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &searchFlags0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetSearchFlags((int) searchFlags0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetSearchFlags((int) searchFlags0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetSearchFlags\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetSelAlpha(int alpha)
   Set the alpha of the selection. */
PHP_METHOD(php_wxStyledTextCtrl, SetSelAlpha)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetSelAlpha\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetSelAlpha call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long alpha0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&alpha0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &alpha0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetSelAlpha((int) alpha0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetSelAlpha((int) alpha0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetSelAlpha\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetSelBackground(bool useSetting, wxColour back)
   Set the background colour of the main and additional selections and whether to use this setting. */
PHP_METHOD(php_wxStyledTextCtrl, SetSelBackground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetSelBackground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetSelBackground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool useSetting0;
    zval* back0;
    wxColour* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'bO' (&useSetting0, &back0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "bO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &useSetting0, &back0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(back0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(back0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(back0)->native_object;
                    object_pointer0_1 = (wxColour*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'back' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(back0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'back' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetSelBackground(useSetting0, *(wxColour*) object_pointer0_1)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetSelBackground(useSetting0, *(wxColour*) object_pointer0_1);

                references->AddReference(back0, "wxStyledTextCtrl::SetSelBackground at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetSelBackground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetSelForeground(bool useSetting, wxColour fore)
   Set the foreground colour of the main and additional selections and whether to use this setting. */
PHP_METHOD(php_wxStyledTextCtrl, SetSelForeground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetSelForeground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetSelForeground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool useSetting0;
    zval* fore0;
    wxColour* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'bO' (&useSetting0, &fore0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "bO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &useSetting0, &fore0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(fore0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(fore0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(fore0)->native_object;
                    object_pointer0_1 = (wxColour*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'fore' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(fore0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'fore' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetSelForeground(useSetting0, *(wxColour*) object_pointer0_1)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetSelForeground(useSetting0, *(wxColour*) object_pointer0_1);

                references->AddReference(fore0, "wxStyledTextCtrl::SetSelForeground at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetSelForeground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetSelection(int from, int to)
   Selects the text starting at the first position up to (but not including) the character at the last position. */
PHP_METHOD(php_wxStyledTextCtrl, SetSelection)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetSelection\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetSelection call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long from0;
    long to0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&from0, &to0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &from0, &to0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetSelection((long) from0, (long) to0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetSelection((long) from0, (long) to0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetSelection\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetSelectionEnd(int caret)
   Sets the position that ends the selection - this becomes the caret. */
PHP_METHOD(php_wxStyledTextCtrl, SetSelectionEnd)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetSelectionEnd\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetSelectionEnd call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long caret0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&caret0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &caret0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetSelectionEnd((int) caret0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetSelectionEnd((int) caret0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetSelectionEnd\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetSelectionMode(int selectionMode)
   Set the selection mode to stream (wxSTC_SEL_STREAM) or rectangular (wxSTC_SEL_RECTANGLE/wxSTC_SEL_THIN) or by lines (wxSTC_SEL_LINES). */
PHP_METHOD(php_wxStyledTextCtrl, SetSelectionMode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetSelectionMode\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetSelectionMode call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long selectionMode0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&selectionMode0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &selectionMode0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetSelectionMode((int) selectionMode0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetSelectionMode((int) selectionMode0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetSelectionMode\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetSelectionNAnchor(int selection, int anchor)
   Set the anchor position of the nth selection. */
PHP_METHOD(php_wxStyledTextCtrl, SetSelectionNAnchor)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetSelectionNAnchor\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetSelectionNAnchor call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long selection0;
    long anchor0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&selection0, &anchor0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &selection0, &anchor0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetSelectionNAnchor((int) selection0, (int) anchor0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetSelectionNAnchor((int) selection0, (int) anchor0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetSelectionNAnchor\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetSelectionNAnchorVirtualSpace(int selection, int space)
   Set the virtual space of the anchor of the nth selection. */
PHP_METHOD(php_wxStyledTextCtrl, SetSelectionNAnchorVirtualSpace)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetSelectionNAnchorVirtualSpace\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetSelectionNAnchorVirtualSpace call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long selection0;
    long space0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&selection0, &space0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &selection0, &space0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetSelectionNAnchorVirtualSpace((int) selection0, (int) space0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetSelectionNAnchorVirtualSpace((int) selection0, (int) space0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetSelectionNAnchorVirtualSpace\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetSelectionNCaret(int selection, int caret)
   Set the caret position of the nth selection. */
PHP_METHOD(php_wxStyledTextCtrl, SetSelectionNCaret)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetSelectionNCaret\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetSelectionNCaret call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long selection0;
    long caret0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&selection0, &caret0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &selection0, &caret0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetSelectionNCaret((int) selection0, (int) caret0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetSelectionNCaret((int) selection0, (int) caret0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetSelectionNCaret\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetSelectionNCaretVirtualSpace(int selection, int space)
   Set the virtual space of the caret of the nth selection. */
PHP_METHOD(php_wxStyledTextCtrl, SetSelectionNCaretVirtualSpace)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetSelectionNCaretVirtualSpace\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetSelectionNCaretVirtualSpace call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long selection0;
    long space0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&selection0, &space0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &selection0, &space0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetSelectionNCaretVirtualSpace((int) selection0, (int) space0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetSelectionNCaretVirtualSpace((int) selection0, (int) space0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetSelectionNCaretVirtualSpace\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetSelectionNEnd(int selection, int caret)
   Sets the position that ends the selection - this becomes the currentPosition. */
PHP_METHOD(php_wxStyledTextCtrl, SetSelectionNEnd)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetSelectionNEnd\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetSelectionNEnd call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long selection0;
    long caret0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&selection0, &caret0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &selection0, &caret0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetSelectionNEnd((int) selection0, (int) caret0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetSelectionNEnd((int) selection0, (int) caret0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetSelectionNEnd\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetSelectionNStart(int selection, int anchor)
   Sets the position that starts the selection - this becomes the anchor. */
PHP_METHOD(php_wxStyledTextCtrl, SetSelectionNStart)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetSelectionNStart\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetSelectionNStart call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long selection0;
    long anchor0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&selection0, &anchor0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &selection0, &anchor0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetSelectionNStart((int) selection0, (int) anchor0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetSelectionNStart((int) selection0, (int) anchor0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetSelectionNStart\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetSelectionStart(int anchor)
   Sets the position that starts the selection - this becomes the anchor. */
PHP_METHOD(php_wxStyledTextCtrl, SetSelectionStart)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetSelectionStart\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetSelectionStart call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long anchor0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&anchor0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &anchor0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetSelectionStart((int) anchor0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetSelectionStart((int) anchor0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetSelectionStart\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetStatus(int status)
   Change error status - 0 = OK. */
PHP_METHOD(php_wxStyledTextCtrl, SetStatus)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetStatus\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetStatus call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long status0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&status0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &status0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetStatus((int) status0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetStatus((int) status0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetStatus\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetStyling(int length, int style)
   Change style from current styling position for length characters to a style and move the current styling position to after this newly styled segment. */
PHP_METHOD(php_wxStyledTextCtrl, SetStyling)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetStyling\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetStyling call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long length0;
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&length0, &style0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &length0, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetStyling((int) length0, (int) style0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetStyling((int) length0, (int) style0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetStyling\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetTabIndents(bool tabIndents)
   Sets whether a tab pressed when caret is within indentation indents. */
PHP_METHOD(php_wxStyledTextCtrl, SetTabIndents)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetTabIndents\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetTabIndents call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool tabIndents0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&tabIndents0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &tabIndents0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetTabIndents(tabIndents0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetTabIndents(tabIndents0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetTabIndents\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetTabWidth(int tabWidth)
   Change the visible size of a tab to be a multiple of the width of a space character. */
PHP_METHOD(php_wxStyledTextCtrl, SetTabWidth)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetTabWidth\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetTabWidth call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long tabWidth0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&tabWidth0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &tabWidth0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetTabWidth((int) tabWidth0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetTabWidth((int) tabWidth0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetTabWidth\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetTargetEnd(int end)
   Sets the position that ends the target which is used for updating the document without affecting the scroll position. */
PHP_METHOD(php_wxStyledTextCtrl, SetTargetEnd)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetTargetEnd\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetTargetEnd call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long end0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&end0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &end0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetTargetEnd((int) end0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetTargetEnd((int) end0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetTargetEnd\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetTargetStart(int start)
   Sets the position that starts the target which is used for updating the document without affecting the scroll position. */
PHP_METHOD(php_wxStyledTextCtrl, SetTargetStart)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetTargetStart\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetTargetStart call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long start0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&start0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &start0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetTargetStart((int) start0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetTargetStart((int) start0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetTargetStart\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetText(string text)
   Replace the contents of the document with the argument text. */
PHP_METHOD(php_wxStyledTextCtrl, SetText)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetText\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetText call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* text0;
    size_t text_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&text0, &text_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &text0, &text_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetText(wxString(text0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetText(wxString(text0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetText\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetTextRaw(string text)
   Replace the contents of the document with the argument text. */
PHP_METHOD(php_wxStyledTextCtrl, SetTextRaw)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetTextRaw\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetTextRaw call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* text0;
    size_t text_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&text0, &text_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &text0, &text_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetTextRaw(text0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetTextRaw(text0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetTextRaw\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetTwoPhaseDraw(bool twoPhase)
   In twoPhaseDraw mode, drawing is performed in two phases, first the background and then the foreground. */
PHP_METHOD(php_wxStyledTextCtrl, SetTwoPhaseDraw)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetTwoPhaseDraw\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetTwoPhaseDraw call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool twoPhase0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&twoPhase0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &twoPhase0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetTwoPhaseDraw(twoPhase0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetTwoPhaseDraw(twoPhase0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetTwoPhaseDraw\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetUndoCollection(bool collectUndo)
   Choose between collecting actions into the undo history and discarding them. */
PHP_METHOD(php_wxStyledTextCtrl, SetUndoCollection)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetUndoCollection\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetUndoCollection call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool collectUndo0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&collectUndo0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &collectUndo0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetUndoCollection(collectUndo0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetUndoCollection(collectUndo0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetUndoCollection\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetUseHorizontalScrollBar(bool visible)
   Show or hide the horizontal scroll bar. */
PHP_METHOD(php_wxStyledTextCtrl, SetUseHorizontalScrollBar)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetUseHorizontalScrollBar\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetUseHorizontalScrollBar call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool visible0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&visible0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &visible0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetUseHorizontalScrollBar(visible0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetUseHorizontalScrollBar(visible0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetUseHorizontalScrollBar\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetUseTabs(bool useTabs)
   Indentation will only use space characters if useTabs is false, otherwise it will use a combination of tabs and spaces. */
PHP_METHOD(php_wxStyledTextCtrl, SetUseTabs)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetUseTabs\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetUseTabs call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool useTabs0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&useTabs0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &useTabs0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetUseTabs(useTabs0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetUseTabs(useTabs0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetUseTabs\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetUseVerticalScrollBar(bool visible)
   Show or hide the vertical scroll bar. */
PHP_METHOD(php_wxStyledTextCtrl, SetUseVerticalScrollBar)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetUseVerticalScrollBar\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetUseVerticalScrollBar call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool visible0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&visible0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &visible0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetUseVerticalScrollBar(visible0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetUseVerticalScrollBar(visible0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetUseVerticalScrollBar\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetVScrollBar(wxScrollBar &bar)
   Set the vertical scrollbar to use instead of the one that's built-in. */
PHP_METHOD(php_wxStyledTextCtrl, SetVScrollBar)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetVScrollBar\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetVScrollBar call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* bar0;
    wxScrollBar* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&bar0)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &bar0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(bar0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxScrollBar_P(bar0)->object_type;
                    argument_native_object = (void*) Z_wxScrollBar_P(bar0)->native_object;
                    object_pointer0_0 = (wxScrollBar*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXSCROLLBAR_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'bar' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(bar0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'bar' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetVScrollBar((wxScrollBar*) object_pointer0_0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetVScrollBar((wxScrollBar*) object_pointer0_0);

                references->AddReference(bar0, "wxStyledTextCtrl::SetVScrollBar at call 1 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetVScrollBar\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetViewEOL(bool visible)
   Make the end of line characters visible or invisible. */
PHP_METHOD(php_wxStyledTextCtrl, SetViewEOL)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetViewEOL\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetViewEOL call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool visible0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&visible0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &visible0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetViewEOL(visible0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetViewEOL(visible0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetViewEOL\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetViewWhiteSpace(int viewWS)
   Make white space characters invisible, always visible or visible outside indentation. */
PHP_METHOD(php_wxStyledTextCtrl, SetViewWhiteSpace)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetViewWhiteSpace\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetViewWhiteSpace call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long viewWS0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&viewWS0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &viewWS0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetViewWhiteSpace((int) viewWS0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetViewWhiteSpace((int) viewWS0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetViewWhiteSpace\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetVirtualSpaceOptions(int virtualSpaceOptions)
   Set options for virtual space behaviour. */
PHP_METHOD(php_wxStyledTextCtrl, SetVirtualSpaceOptions)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetVirtualSpaceOptions\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetVirtualSpaceOptions call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long virtualSpaceOptions0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&virtualSpaceOptions0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &virtualSpaceOptions0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetVirtualSpaceOptions((int) virtualSpaceOptions0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetVirtualSpaceOptions((int) virtualSpaceOptions0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetVirtualSpaceOptions\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetVisiblePolicy(int visiblePolicy, int visibleSlop)
   Set the way the display area is determined when a particular line is to be moved to by Find, FindNext, GotoLine, etc. */
PHP_METHOD(php_wxStyledTextCtrl, SetVisiblePolicy)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetVisiblePolicy\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetVisiblePolicy call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long visiblePolicy0;
    long visibleSlop0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&visiblePolicy0, &visibleSlop0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &visiblePolicy0, &visibleSlop0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetVisiblePolicy((int) visiblePolicy0, (int) visibleSlop0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetVisiblePolicy((int) visiblePolicy0, (int) visibleSlop0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetVisiblePolicy\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetWhitespaceBackground(bool useSetting, wxColour back)
   Set the background colour of all whitespace and whether to use this setting. */
PHP_METHOD(php_wxStyledTextCtrl, SetWhitespaceBackground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetWhitespaceBackground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetWhitespaceBackground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool useSetting0;
    zval* back0;
    wxColour* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'bO' (&useSetting0, &back0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "bO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &useSetting0, &back0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(back0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(back0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(back0)->native_object;
                    object_pointer0_1 = (wxColour*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'back' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(back0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'back' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetWhitespaceBackground(useSetting0, *(wxColour*) object_pointer0_1)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetWhitespaceBackground(useSetting0, *(wxColour*) object_pointer0_1);

                references->AddReference(back0, "wxStyledTextCtrl::SetWhitespaceBackground at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetWhitespaceBackground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetWhitespaceChars(string characters)
   Set the set of characters making up whitespace for when moving or selecting by word. */
PHP_METHOD(php_wxStyledTextCtrl, SetWhitespaceChars)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetWhitespaceChars\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetWhitespaceChars call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* characters0;
    size_t characters_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&characters0, &characters_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &characters0, &characters_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetWhitespaceChars(wxString(characters0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetWhitespaceChars(wxString(characters0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetWhitespaceChars\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetWhitespaceForeground(bool useSetting, wxColour fore)
   Set the foreground colour of all whitespace and whether to use this setting. */
PHP_METHOD(php_wxStyledTextCtrl, SetWhitespaceForeground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetWhitespaceForeground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetWhitespaceForeground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool useSetting0;
    zval* fore0;
    wxColour* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'bO' (&useSetting0, &fore0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "bO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &useSetting0, &fore0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(fore0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(fore0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(fore0)->native_object;
                    object_pointer0_1 = (wxColour*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'fore' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(fore0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'fore' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetWhitespaceForeground(useSetting0, *(wxColour*) object_pointer0_1)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetWhitespaceForeground(useSetting0, *(wxColour*) object_pointer0_1);

                references->AddReference(fore0, "wxStyledTextCtrl::SetWhitespaceForeground at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetWhitespaceForeground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetWhitespaceSize(int size)
   Set the size of the dots used to mark space characters. */
PHP_METHOD(php_wxStyledTextCtrl, SetWhitespaceSize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetWhitespaceSize\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetWhitespaceSize call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long size0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&size0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &size0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetWhitespaceSize((int) size0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetWhitespaceSize((int) size0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetWhitespaceSize\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetWordChars(string characters)
   Set the set of characters making up words for when moving or selecting by word. */
PHP_METHOD(php_wxStyledTextCtrl, SetWordChars)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetWordChars\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetWordChars call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* characters0;
    size_t characters_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&characters0, &characters_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &characters0, &characters_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetWordChars(wxString(characters0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetWordChars(wxString(characters0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetWordChars\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetWrapIndentMode(int wrapIndentMode)
   Sets how wrapped sublines are placed. */
PHP_METHOD(php_wxStyledTextCtrl, SetWrapIndentMode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetWrapIndentMode\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetWrapIndentMode call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long wrapIndentMode0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&wrapIndentMode0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &wrapIndentMode0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetWrapIndentMode((int) wrapIndentMode0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetWrapIndentMode((int) wrapIndentMode0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetWrapIndentMode\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetWrapMode(int wrapMode)
   Sets whether text is word wrapped. */
PHP_METHOD(php_wxStyledTextCtrl, SetWrapMode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetWrapMode\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetWrapMode call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long wrapMode0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&wrapMode0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &wrapMode0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetWrapMode((int) wrapMode0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetWrapMode((int) wrapMode0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetWrapMode\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetWrapStartIndent(int indent)
   Set the start indent for wrapped lines. */
PHP_METHOD(php_wxStyledTextCtrl, SetWrapStartIndent)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetWrapStartIndent\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetWrapStartIndent call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long indent0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&indent0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &indent0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetWrapStartIndent((int) indent0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetWrapStartIndent((int) indent0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetWrapStartIndent\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetWrapVisualFlags(int wrapVisualFlags)
   Set the display mode of visual flags for wrapped lines. */
PHP_METHOD(php_wxStyledTextCtrl, SetWrapVisualFlags)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetWrapVisualFlags\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetWrapVisualFlags call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long wrapVisualFlags0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&wrapVisualFlags0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &wrapVisualFlags0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetWrapVisualFlags((int) wrapVisualFlags0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetWrapVisualFlags((int) wrapVisualFlags0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetWrapVisualFlags\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetWrapVisualFlagsLocation(int wrapVisualFlagsLocation)
   Set the location of visual flags for wrapped lines. */
PHP_METHOD(php_wxStyledTextCtrl, SetWrapVisualFlagsLocation)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetWrapVisualFlagsLocation\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetWrapVisualFlagsLocation call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long wrapVisualFlagsLocation0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&wrapVisualFlagsLocation0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &wrapVisualFlagsLocation0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetWrapVisualFlagsLocation((int) wrapVisualFlagsLocation0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetWrapVisualFlagsLocation((int) wrapVisualFlagsLocation0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetWrapVisualFlagsLocation\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetXCaretPolicy(int caretPolicy, int caretSlop)
   Set the way the caret is kept visible when going sideways. */
PHP_METHOD(php_wxStyledTextCtrl, SetXCaretPolicy)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetXCaretPolicy\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetXCaretPolicy call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long caretPolicy0;
    long caretSlop0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&caretPolicy0, &caretSlop0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &caretPolicy0, &caretSlop0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetXCaretPolicy((int) caretPolicy0, (int) caretSlop0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetXCaretPolicy((int) caretPolicy0, (int) caretSlop0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetXCaretPolicy\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetXOffset(int xOffset)
   Set the xOffset (ie, horizontal scroll position). */
PHP_METHOD(php_wxStyledTextCtrl, SetXOffset)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetXOffset\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetXOffset call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long xOffset0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&xOffset0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &xOffset0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetXOffset((int) xOffset0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetXOffset((int) xOffset0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetXOffset\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetYCaretPolicy(int caretPolicy, int caretSlop)
   Set the way the line the caret is on is kept visible. */
PHP_METHOD(php_wxStyledTextCtrl, SetYCaretPolicy)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetYCaretPolicy\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetYCaretPolicy call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long caretPolicy0;
    long caretSlop0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&caretPolicy0, &caretSlop0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &caretPolicy0, &caretSlop0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetYCaretPolicy((int) caretPolicy0, (int) caretSlop0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetYCaretPolicy((int) caretPolicy0, (int) caretSlop0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetYCaretPolicy\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetZoom(int zoomInPoints)
   Set the zoom level. */
PHP_METHOD(php_wxStyledTextCtrl, SetZoom)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetZoom\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetZoom call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long zoomInPoints0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&zoomInPoints0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &zoomInPoints0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetZoom((int) zoomInPoints0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetZoom((int) zoomInPoints0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetZoom\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ShowLines(int lineStart, int lineEnd)
   Make a range of lines visible. */
PHP_METHOD(php_wxStyledTextCtrl, ShowLines)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ShowLines\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ShowLines call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long lineStart0;
    long lineEnd0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&lineStart0, &lineEnd0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &lineStart0, &lineEnd0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ShowLines((int) lineStart0, (int) lineEnd0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ShowLines((int) lineStart0, (int) lineEnd0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ShowLines\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StartRecord()
   Start notifying the container of all key presses and commands. */
PHP_METHOD(php_wxStyledTextCtrl, StartRecord)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StartRecord\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StartRecord call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StartRecord()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StartRecord();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StartRecord\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StartStyling(int start)
   Set the current styling position to start. */
PHP_METHOD(php_wxStyledTextCtrl, StartStyling)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StartStyling\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StartStyling call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long start0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&start0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &start0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StartStyling((int) start0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StartStyling((int) start0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StartStyling\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StopRecord()
   Stop notifying the container of all key presses and commands. */
PHP_METHOD(php_wxStyledTextCtrl, StopRecord)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StopRecord\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StopRecord call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StopRecord()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StopRecord();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StopRecord\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StutteredPageDown()
   Move caret to bottom of page, or one page down if already at bottom of page. */
PHP_METHOD(php_wxStyledTextCtrl, StutteredPageDown)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StutteredPageDown\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StutteredPageDown call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StutteredPageDown()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StutteredPageDown();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StutteredPageDown\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StutteredPageDownExtend()
   Move caret to bottom of page, or one page down if already at bottom of page, extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, StutteredPageDownExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StutteredPageDownExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StutteredPageDownExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StutteredPageDownExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StutteredPageDownExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StutteredPageDownExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StutteredPageUp()
   Move caret to top of page, or one page up if already at top of page. */
PHP_METHOD(php_wxStyledTextCtrl, StutteredPageUp)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StutteredPageUp\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StutteredPageUp call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StutteredPageUp()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StutteredPageUp();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StutteredPageUp\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StutteredPageUpExtend()
   Move caret to top of page, or one page up if already at top of page, extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, StutteredPageUpExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StutteredPageUpExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StutteredPageUpExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StutteredPageUpExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StutteredPageUpExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StutteredPageUpExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleClearAll()
   Clear all the styles and make equivalent to the global default style. */
PHP_METHOD(php_wxStyledTextCtrl, StyleClearAll)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleClearAll\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleClearAll call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleClearAll()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleClearAll();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleClearAll\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleResetDefault()
   Reset the default style to its state at startup. */
PHP_METHOD(php_wxStyledTextCtrl, StyleResetDefault)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleResetDefault\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleResetDefault call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleResetDefault()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleResetDefault();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleResetDefault\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleSetBackground(int style, wxColour back)
   Set the background colour of a style. */
PHP_METHOD(php_wxStyledTextCtrl, StyleSetBackground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleSetBackground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleSetBackground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    zval* back0;
    wxColour* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lO' (&style0, &back0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "lO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0, &back0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(back0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(back0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(back0)->native_object;
                    object_pointer0_1 = (wxColour*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'back' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(back0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'back' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleSetBackground((int) style0, *(wxColour*) object_pointer0_1)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleSetBackground((int) style0, *(wxColour*) object_pointer0_1);

                references->AddReference(back0, "wxStyledTextCtrl::StyleSetBackground at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleSetBackground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleSetBold(int style, bool bold)
   Set a style to be bold or not. */
PHP_METHOD(php_wxStyledTextCtrl, StyleSetBold)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleSetBold\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleSetBold call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool bold0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lb' (&style0, &bold0)\n");
        #endif

        char parse_parameters_string[] = "lb";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0, &bold0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleSetBold((int) style0, bold0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleSetBold((int) style0, bold0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleSetBold\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleSetCase(int style, int caseVisible)
   Set a style to be mixed case, or to force upper or lower case. */
PHP_METHOD(php_wxStyledTextCtrl, StyleSetCase)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleSetCase\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleSetCase call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    long caseVisible0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&style0, &caseVisible0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0, &caseVisible0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleSetCase((int) style0, (int) caseVisible0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleSetCase((int) style0, (int) caseVisible0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleSetCase\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleSetChangeable(int style, bool changeable)
   Set a style to be changeable or not (read only). */
PHP_METHOD(php_wxStyledTextCtrl, StyleSetChangeable)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleSetChangeable\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleSetChangeable call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool changeable0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lb' (&style0, &changeable0)\n");
        #endif

        char parse_parameters_string[] = "lb";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0, &changeable0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleSetChangeable((int) style0, changeable0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleSetChangeable((int) style0, changeable0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleSetChangeable\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleSetCharacterSet(int style, int characterSet)
   Set the character set of the font in a style. */
PHP_METHOD(php_wxStyledTextCtrl, StyleSetCharacterSet)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleSetCharacterSet\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleSetCharacterSet call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    long characterSet0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&style0, &characterSet0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0, &characterSet0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleSetCharacterSet((int) style0, (int) characterSet0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleSetCharacterSet((int) style0, (int) characterSet0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleSetCharacterSet\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleSetEOLFilled(int style, bool eolFilled)
   Set a style to have its end of line filled or not. */
PHP_METHOD(php_wxStyledTextCtrl, StyleSetEOLFilled)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleSetEOLFilled\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleSetEOLFilled call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool eolFilled0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lb' (&style0, &eolFilled0)\n");
        #endif

        char parse_parameters_string[] = "lb";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0, &eolFilled0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleSetEOLFilled((int) style0, eolFilled0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleSetEOLFilled((int) style0, eolFilled0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleSetEOLFilled\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleSetFaceName(int style, string fontName)
   Set the font of a style. */
PHP_METHOD(php_wxStyledTextCtrl, StyleSetFaceName)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleSetFaceName\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleSetFaceName call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    char* fontName0;
    size_t fontName_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ls' (&style0, &fontName0, &fontName_len0)\n");
        #endif

        char parse_parameters_string[] = "ls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0, &fontName0, &fontName_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleSetFaceName((int) style0, wxString(fontName0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleSetFaceName((int) style0, wxString(fontName0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleSetFaceName\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleSetFont(int styleNum, wxFont &font)
   Set style size, face, bold, italic, and underline attributes from a wxFont's attributes. */
PHP_METHOD(php_wxStyledTextCtrl, StyleSetFont)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleSetFont\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleSetFont call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long styleNum0;
    zval* font0;
    wxFont* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lO' (&styleNum0, &font0, php_wxFont_entry)\n");
        #endif

        char parse_parameters_string[] = "lO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &styleNum0, &font0, php_wxFont_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(font0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxFont_P(font0)->object_type;
                    argument_native_object = (void*) Z_wxFont_P(font0)->native_object;
                    object_pointer0_1 = (wxFont*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'font' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(font0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'font' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleSetFont((int) styleNum0, *(wxFont*) object_pointer0_1)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleSetFont((int) styleNum0, *(wxFont*) object_pointer0_1);

                references->AddReference(font0, "wxStyledTextCtrl::StyleSetFont at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleSetFont\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleSetFontAttr(int styleNum, int size, string faceName, bool bold, bool italic, bool underline, wxFontEncoding encoding)
   Set all font style attributes at once. */
PHP_METHOD(php_wxStyledTextCtrl, StyleSetFontAttr)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleSetFontAttr\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleSetFontAttr call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long styleNum0;
    long size0;
    char* faceName0;
    size_t faceName_len0;
    bool bold0;
    bool italic0;
    bool underline0;
    long encoding0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 6  && arguments_received <= 7)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'llsbbb|l' (&styleNum0, &size0, &faceName0, &faceName_len0, &bold0, &italic0, &underline0, &encoding0)\n");
        #endif

        char parse_parameters_string[] = "llsbbb|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &styleNum0, &size0, &faceName0, &faceName_len0, &bold0, &italic0, &underline0, &encoding0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleSetFontAttr((int) styleNum0, (int) size0, wxString(faceName0, wxConvUTF8), bold0, italic0, underline0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleSetFontAttr((int) styleNum0, (int) size0, wxString(faceName0, wxConvUTF8), bold0, italic0, underline0);


                return;
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleSetFontAttr((int) styleNum0, (int) size0, wxString(faceName0, wxConvUTF8), bold0, italic0, underline0, (wxFontEncoding) encoding0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleSetFontAttr((int) styleNum0, (int) size0, wxString(faceName0, wxConvUTF8), bold0, italic0, underline0, (wxFontEncoding) encoding0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleSetFontAttr\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleSetFontEncoding(int style, wxFontEncoding encoding)
   Set the font encoding to be used by a style. */
PHP_METHOD(php_wxStyledTextCtrl, StyleSetFontEncoding)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleSetFontEncoding\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleSetFontEncoding call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    long encoding0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&style0, &encoding0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0, &encoding0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleSetFontEncoding((int) style0, (wxFontEncoding) encoding0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleSetFontEncoding((int) style0, (wxFontEncoding) encoding0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleSetFontEncoding\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleSetForeground(int style, wxColour fore)
   Set the foreground colour of a style. */
PHP_METHOD(php_wxStyledTextCtrl, StyleSetForeground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleSetForeground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleSetForeground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    zval* fore0;
    wxColour* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lO' (&style0, &fore0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "lO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0, &fore0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(fore0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(fore0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(fore0)->native_object;
                    object_pointer0_1 = (wxColour*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'fore' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(fore0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'fore' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleSetForeground((int) style0, *(wxColour*) object_pointer0_1)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleSetForeground((int) style0, *(wxColour*) object_pointer0_1);

                references->AddReference(fore0, "wxStyledTextCtrl::StyleSetForeground at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleSetForeground\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleSetHotSpot(int style, bool hotspot)
   Set a style to be a hotspot or not. */
PHP_METHOD(php_wxStyledTextCtrl, StyleSetHotSpot)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleSetHotSpot\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleSetHotSpot call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool hotspot0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lb' (&style0, &hotspot0)\n");
        #endif

        char parse_parameters_string[] = "lb";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0, &hotspot0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleSetHotSpot((int) style0, hotspot0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleSetHotSpot((int) style0, hotspot0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleSetHotSpot\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleSetItalic(int style, bool italic)
   Set a style to be italic or not. */
PHP_METHOD(php_wxStyledTextCtrl, StyleSetItalic)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleSetItalic\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleSetItalic call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool italic0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lb' (&style0, &italic0)\n");
        #endif

        char parse_parameters_string[] = "lb";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0, &italic0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleSetItalic((int) style0, italic0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleSetItalic((int) style0, italic0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleSetItalic\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleSetSize(int style, int sizePoints)
   Set the size of characters of a style. */
PHP_METHOD(php_wxStyledTextCtrl, StyleSetSize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleSetSize\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleSetSize call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    long sizePoints0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&style0, &sizePoints0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0, &sizePoints0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleSetSize((int) style0, (int) sizePoints0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleSetSize((int) style0, (int) sizePoints0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleSetSize\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleSetSpec(int styleNum, string spec)
   Extract style settings from a spec-string which is composed of one or more of the following comma separated elements: */
PHP_METHOD(php_wxStyledTextCtrl, StyleSetSpec)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleSetSpec\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleSetSpec call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long styleNum0;
    char* spec0;
    size_t spec_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ls' (&styleNum0, &spec0, &spec_len0)\n");
        #endif

        char parse_parameters_string[] = "ls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &styleNum0, &spec0, &spec_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleSetSpec((int) styleNum0, wxString(spec0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleSetSpec((int) styleNum0, wxString(spec0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleSetSpec\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleSetUnderline(int style, bool underline)
   Set a style to be underlined or not. */
PHP_METHOD(php_wxStyledTextCtrl, StyleSetUnderline)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleSetUnderline\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleSetUnderline call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool underline0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lb' (&style0, &underline0)\n");
        #endif

        char parse_parameters_string[] = "lb";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0, &underline0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleSetUnderline((int) style0, underline0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleSetUnderline((int) style0, underline0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleSetUnderline\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleSetVisible(int style, bool visible)
   Set a style to be visible or not. */
PHP_METHOD(php_wxStyledTextCtrl, StyleSetVisible)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleSetVisible\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleSetVisible call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool visible0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lb' (&style0, &visible0)\n");
        #endif

        char parse_parameters_string[] = "lb";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0, &visible0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleSetVisible((int) style0, visible0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleSetVisible((int) style0, visible0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleSetVisible\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SwapMainAnchorCaret()
   Swap that caret and anchor of the main selection. */
PHP_METHOD(php_wxStyledTextCtrl, SwapMainAnchorCaret)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SwapMainAnchorCaret\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SwapMainAnchorCaret call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SwapMainAnchorCaret()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SwapMainAnchorCaret();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SwapMainAnchorCaret\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::Tab()
   If selection is empty or all on one line replace the selection with a tab character. */
PHP_METHOD(php_wxStyledTextCtrl, Tab)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::Tab\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::Tab call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::Tab()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->Tab();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::Tab\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::TargetFromSelection()
   Make the target range start and end be the same as the selection range start and end. */
PHP_METHOD(php_wxStyledTextCtrl, TargetFromSelection)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::TargetFromSelection\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::TargetFromSelection call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::TargetFromSelection()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->TargetFromSelection();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::TargetFromSelection\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::TextHeight(int line)
   Retrieve the height of a particular line of text in pixels. */
PHP_METHOD(php_wxStyledTextCtrl, TextHeight)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::TextHeight\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::TextHeight call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::TextHeight((int) line0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->TextHeight((int) line0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::TextHeight\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::TextWidth(int style, string text)
   Measure the pixel width of some text in a particular style. */
PHP_METHOD(php_wxStyledTextCtrl, TextWidth)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::TextWidth\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::TextWidth call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    char* text0;
    size_t text_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ls' (&style0, &text0, &text_len0)\n");
        #endif

        char parse_parameters_string[] = "ls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0, &text0, &text_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::TextWidth((int) style0, wxString(text0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->TextWidth((int) style0, wxString(text0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::TextWidth\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ToggleCaretSticky()
   Switch between sticky and non-sticky: meant to be bound to a key. */
PHP_METHOD(php_wxStyledTextCtrl, ToggleCaretSticky)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ToggleCaretSticky\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ToggleCaretSticky call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ToggleCaretSticky()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ToggleCaretSticky();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ToggleCaretSticky\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ToggleFold(int line)
   Switch a header line between expanded and contracted. */
PHP_METHOD(php_wxStyledTextCtrl, ToggleFold)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ToggleFold\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ToggleFold call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ToggleFold((int) line0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ToggleFold((int) line0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ToggleFold\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::Undo()
   Undo one action in the undo history. */
PHP_METHOD(php_wxStyledTextCtrl, Undo)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::Undo\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::Undo call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::Undo()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->Undo();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::Undo\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::UpperCase()
   Transform the selection to upper case. */
PHP_METHOD(php_wxStyledTextCtrl, UpperCase)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::UpperCase\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::UpperCase call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::UpperCase()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->UpperCase();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::UpperCase\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::UsePopUp(int popUpMode)
   Set whether a pop up menu is displayed automatically when the user presses the wrong mouse button on certain areas. */
PHP_METHOD(php_wxStyledTextCtrl, UsePopUp)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::UsePopUp\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::UsePopUp call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long popUpMode0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&popUpMode0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &popUpMode0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::UsePopUp((int) popUpMode0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->UsePopUp((int) popUpMode0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::UsePopUp\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::UserListShow(int listType, string itemList)
   Display a list of strings and send notification when user chooses one. */
PHP_METHOD(php_wxStyledTextCtrl, UserListShow)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::UserListShow\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::UserListShow call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long listType0;
    char* itemList0;
    size_t itemList_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ls' (&listType0, &itemList0, &itemList_len0)\n");
        #endif

        char parse_parameters_string[] = "ls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &listType0, &itemList0, &itemList_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::UserListShow((int) listType0, wxString(itemList0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->UserListShow((int) listType0, wxString(itemList0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::UserListShow\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::VCHome()
   Move caret to before first visible character on line. */
PHP_METHOD(php_wxStyledTextCtrl, VCHome)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::VCHome\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::VCHome call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::VCHome()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->VCHome();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::VCHome\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::VCHomeExtend()
   Like VCHome but extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, VCHomeExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::VCHomeExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::VCHomeExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::VCHomeExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->VCHomeExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::VCHomeExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::VCHomeRectExtend()
   Move caret to before first visible character on line. */
PHP_METHOD(php_wxStyledTextCtrl, VCHomeRectExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::VCHomeRectExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::VCHomeRectExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::VCHomeRectExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->VCHomeRectExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::VCHomeRectExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::VCHomeWrap()
   Like VCHome but when word-wrap is enabled goes first to start of display line VCHomeDisplay, then behaves like VCHome. */
PHP_METHOD(php_wxStyledTextCtrl, VCHomeWrap)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::VCHomeWrap\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::VCHomeWrap call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::VCHomeWrap()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->VCHomeWrap();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::VCHomeWrap\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::VCHomeWrapExtend()
   Like VCHomeExtend but when word-wrap is enabled extends first to start of display line VCHomeDisplayExtend, then behaves like VCHomeExtend. */
PHP_METHOD(php_wxStyledTextCtrl, VCHomeWrapExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::VCHomeWrapExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::VCHomeWrapExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::VCHomeWrapExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->VCHomeWrapExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::VCHomeWrapExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::VisibleFromDocLine(int docLine)
   Find the display line of a document line taking hidden lines into account. */
PHP_METHOD(php_wxStyledTextCtrl, VisibleFromDocLine)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::VisibleFromDocLine\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::VisibleFromDocLine call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long docLine0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&docLine0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &docLine0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::VisibleFromDocLine((int) docLine0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->VisibleFromDocLine((int) docLine0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::VisibleFromDocLine\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::WordEndPosition(int pos, bool onlyWordCharacters)
   Get position of end of word. */
PHP_METHOD(php_wxStyledTextCtrl, WordEndPosition)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::WordEndPosition\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::WordEndPosition call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pos0;
    bool onlyWordCharacters0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lb' (&pos0, &onlyWordCharacters0)\n");
        #endif

        char parse_parameters_string[] = "lb";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pos0, &onlyWordCharacters0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::WordEndPosition((int) pos0, onlyWordCharacters0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->WordEndPosition((int) pos0, onlyWordCharacters0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::WordEndPosition\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::WordLeft()
   Move caret left one word. */
PHP_METHOD(php_wxStyledTextCtrl, WordLeft)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::WordLeft\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::WordLeft call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::WordLeft()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->WordLeft();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::WordLeft\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::WordLeftEnd()
   Move caret left one word, position cursor at end of word. */
PHP_METHOD(php_wxStyledTextCtrl, WordLeftEnd)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::WordLeftEnd\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::WordLeftEnd call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::WordLeftEnd()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->WordLeftEnd();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::WordLeftEnd\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::WordLeftEndExtend()
   Move caret left one word, position cursor at end of word, extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, WordLeftEndExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::WordLeftEndExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::WordLeftEndExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::WordLeftEndExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->WordLeftEndExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::WordLeftEndExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::WordLeftExtend()
   Move caret left one word extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, WordLeftExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::WordLeftExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::WordLeftExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::WordLeftExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->WordLeftExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::WordLeftExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::WordPartLeft()
   Move to the previous change in capitalisation. */
PHP_METHOD(php_wxStyledTextCtrl, WordPartLeft)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::WordPartLeft\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::WordPartLeft call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::WordPartLeft()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->WordPartLeft();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::WordPartLeft\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::WordPartLeftExtend()
   Move to the previous change in capitalisation extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, WordPartLeftExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::WordPartLeftExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::WordPartLeftExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::WordPartLeftExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->WordPartLeftExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::WordPartLeftExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::WordPartRight()
   Move to the change next in capitalisation. */
PHP_METHOD(php_wxStyledTextCtrl, WordPartRight)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::WordPartRight\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::WordPartRight call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::WordPartRight()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->WordPartRight();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::WordPartRight\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::WordPartRightExtend()
   Move to the next change in capitalisation extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, WordPartRightExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::WordPartRightExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::WordPartRightExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::WordPartRightExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->WordPartRightExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::WordPartRightExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::WordRight()
   Move caret right one word. */
PHP_METHOD(php_wxStyledTextCtrl, WordRight)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::WordRight\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::WordRight call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::WordRight()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->WordRight();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::WordRight\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::WordRightEnd()
   Move caret right one word, position cursor at end of word. */
PHP_METHOD(php_wxStyledTextCtrl, WordRightEnd)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::WordRightEnd\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::WordRightEnd call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::WordRightEnd()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->WordRightEnd();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::WordRightEnd\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::WordRightEndExtend()
   Move caret right one word, position cursor at end of word, extending selection to new caret position. */
PHP_METHOD(php_wxStyledTextCtrl, WordRightEndExtend)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::WordRightEndExtend\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::WordRightEndExtend call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::WordRightEndExtend()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->WordRightEndExtend();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::WordRightEndExtend\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AppendTextRaw(string text, int length)
   Append a string to the end of the document without changing the selection. */
PHP_METHOD(php_wxStyledTextCtrl, AppendTextRaw)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AppendTextRaw\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AppendTextRaw call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* text0;
    size_t text_len0;
    long length0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's|l' (&text0, &text_len0, &length0)\n");
        #endif

        char parse_parameters_string[] = "s|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &text0, &text_len0, &length0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AppendTextRaw(text0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AppendTextRaw(text0);


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AppendTextRaw(text0, (int) length0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AppendTextRaw(text0, (int) length0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AppendTextRaw\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AddTextRaw(string text, int length)
   Add text to the document at current position. */
PHP_METHOD(php_wxStyledTextCtrl, AddTextRaw)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AddTextRaw\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AddTextRaw call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* text0;
    size_t text_len0;
    long length0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's|l' (&text0, &text_len0, &length0)\n");
        #endif

        char parse_parameters_string[] = "s|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &text0, &text_len0, &length0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AddTextRaw(text0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AddTextRaw(text0);


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AddTextRaw(text0, (int) length0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AddTextRaw(text0, (int) length0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AddTextRaw\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ScrollToEnd()
   Scroll to end of document. */
PHP_METHOD(php_wxStyledTextCtrl, ScrollToEnd)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ScrollToEnd\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ScrollToEnd call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ScrollToEnd()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ScrollToEnd();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ScrollToEnd\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ScrollToStart()
   Scroll to start of document. */
PHP_METHOD(php_wxStyledTextCtrl, ScrollToStart)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ScrollToStart\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ScrollToStart call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ScrollToStart()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ScrollToStart();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ScrollToStart\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MarkerEnableHighlight(bool enabled)
   Enable/disable highlight for current folding block (smallest one that contains the caret) */
PHP_METHOD(php_wxStyledTextCtrl, MarkerEnableHighlight)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarkerEnableHighlight\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarkerEnableHighlight call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool enabled0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&enabled0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &enabled0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MarkerEnableHighlight(enabled0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MarkerEnableHighlight(enabled0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarkerEnableHighlight\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MarkerDefineRGBAImage(int markerNumber, array pixels)
   Define a marker from RGBA data. */
PHP_METHOD(php_wxStyledTextCtrl, MarkerDefineRGBAImage)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarkerDefineRGBAImage\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarkerDefineRGBAImage call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long markerNumber0;
    zval* pixels0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'la' (&markerNumber0, &pixels0)\n");
        #endif

        char parse_parameters_string[] = "la";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &markerNumber0, &pixels0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        int array_count0_1 = 1;
        HashTable* arr_hash0_1;
        if(arguments_received > 1)
        {
            arr_hash0_1 = Z_ARRVAL_P(pixels0);
            array_count0_1 = zend_hash_num_elements(arr_hash0_1);
        }
        unsigned char* integers_array0_1 = new unsigned char[array_count0_1];
        bool integers_continue0_1 = true;

        switch(arguments_received)
        {
            case 2:
            {
                int array_index0_1 = 0;
                zval* temp_array_value0_1 = 0;
                while(integers_continue0_1)
                {
                    if((temp_array_value0_1 = zend_hash_index_find(HASH_OF(pixels0), array_index0_1)) != NULL)
                    {
                        convert_to_long_ex(temp_array_value0_1);
                        integers_array0_1[array_index0_1] = (unsigned char) Z_LVAL_P(temp_array_value0_1);
                        array_index0_1++;
                    }
                    else
                    {
                        integers_continue0_1 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MarkerDefineRGBAImage((int) markerNumber0, (const unsigned char*) integers_array0_1)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MarkerDefineRGBAImage((int) markerNumber0, (const unsigned char*) integers_array0_1);

                delete[] integers_array0_1;

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarkerDefineRGBAImage\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AnnotationClearLine(int line)
   Clear annotations from the given line. */
PHP_METHOD(php_wxStyledTextCtrl, AnnotationClearLine)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AnnotationClearLine\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AnnotationClearLine call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long line0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&line0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &line0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AnnotationClearLine((int) line0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AnnotationClearLine((int) line0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AnnotationClearLine\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::AutoCompGetCaseInsensitiveBehaviour()
   Get auto-completion case insensitive behaviour. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompGetCaseInsensitiveBehaviour)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompGetCaseInsensitiveBehaviour\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompGetCaseInsensitiveBehaviour call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::AutoCompGetCaseInsensitiveBehaviour())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->AutoCompGetCaseInsensitiveBehaviour());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompGetCaseInsensitiveBehaviour\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::AutoCompSetCaseInsensitiveBehaviour(int behaviour)
   Set auto-completion case insensitive behaviour to either prefer case-sensitive matches or have no preference. */
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSetCaseInsensitiveBehaviour)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::AutoCompSetCaseInsensitiveBehaviour\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::AutoCompSetCaseInsensitiveBehaviour call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long behaviour0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&behaviour0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &behaviour0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::AutoCompSetCaseInsensitiveBehaviour((int) behaviour0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->AutoCompSetCaseInsensitiveBehaviour((int) behaviour0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::AutoCompSetCaseInsensitiveBehaviour\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::BraceBadLightIndicator(bool useSetting, int indicator)
   Use specified indicator to highlight non matching brace instead of changing its style. */
PHP_METHOD(php_wxStyledTextCtrl, BraceBadLightIndicator)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::BraceBadLightIndicator\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::BraceBadLightIndicator call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool useSetting0;
    long indicator0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'bl' (&useSetting0, &indicator0)\n");
        #endif

        char parse_parameters_string[] = "bl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &useSetting0, &indicator0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::BraceBadLightIndicator(useSetting0, (int) indicator0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->BraceBadLightIndicator(useSetting0, (int) indicator0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::BraceBadLightIndicator\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::BraceHighlightIndicator(bool useSetting, int indicator)
   Use specified indicator to highlight matching braces instead of changing their style. */
PHP_METHOD(php_wxStyledTextCtrl, BraceHighlightIndicator)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::BraceHighlightIndicator\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::BraceHighlightIndicator call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool useSetting0;
    long indicator0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'bl' (&useSetting0, &indicator0)\n");
        #endif

        char parse_parameters_string[] = "bl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &useSetting0, &indicator0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::BraceHighlightIndicator(useSetting0, (int) indicator0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->BraceHighlightIndicator(useSetting0, (int) indicator0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::BraceHighlightIndicator\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::CallTipSetPosition(bool above)
   Set position of calltip, above or below text. */
PHP_METHOD(php_wxStyledTextCtrl, CallTipSetPosition)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CallTipSetPosition\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CallTipSetPosition call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool above0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&above0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &above0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::CallTipSetPosition(above0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->CallTipSetPosition(above0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CallTipSetPosition\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::ChangeLexerState(int start, int end)
   Indicate that the internal state of a lexer has changed over a range and therefore there may be a need to redraw. */
PHP_METHOD(php_wxStyledTextCtrl, ChangeLexerState)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ChangeLexerState\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ChangeLexerState call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long start0;
    long end0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&start0, &end0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &start0, &end0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::ChangeLexerState((int) start0, (int) end0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->ChangeLexerState((int) start0, (int) end0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ChangeLexerState\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::ContractedFoldNext(int lineStart)
   Find the next line at or after lineStart that is a contracted fold header line. */
PHP_METHOD(php_wxStyledTextCtrl, ContractedFoldNext)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ContractedFoldNext\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ContractedFoldNext call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long lineStart0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&lineStart0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &lineStart0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::ContractedFoldNext((int) lineStart0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->ContractedFoldNext((int) lineStart0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ContractedFoldNext\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::CountCharacters(int start, int end)
   Count characters between two positions. */
PHP_METHOD(php_wxStyledTextCtrl, CountCharacters)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::CountCharacters\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::CountCharacters call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long start0;
    long end0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&start0, &end0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &start0, &end0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::CountCharacters((int) start0, (int) end0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->CountCharacters((int) start0, (int) end0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::CountCharacters\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::DelWordRightEnd()
   Delete the word to the right of the caret, but not the trailing non-word characters. */
PHP_METHOD(php_wxStyledTextCtrl, DelWordRightEnd)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::DelWordRightEnd\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::DelWordRightEnd call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::DelWordRightEnd()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->DelWordRightEnd();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::DelWordRightEnd\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::DeleteRange(int start, int lengthDelete)
   Delete a range of text in the document. */
PHP_METHOD(php_wxStyledTextCtrl, DeleteRange)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::DeleteRange\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::DeleteRange call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long start0;
    long lengthDelete0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&start0, &lengthDelete0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &start0, &lengthDelete0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::DeleteRange((int) start0, (int) lengthDelete0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->DeleteRange((int) start0, (int) lengthDelete0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::DeleteRange\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::DescribeKeyWordSets()
   Retrieve a '\n' separated list of descriptions of the keyword sets understood by the current lexer. */
PHP_METHOD(php_wxStyledTextCtrl, DescribeKeyWordSets)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::DescribeKeyWordSets\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::DescribeKeyWordSets call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::DescribeKeyWordSets().fn_str(), 1)\n\n");
                #endif

                wxString value_to_return0;
                value_to_return0 = ((wxStyledTextCtrl_php*)native_object)->DescribeKeyWordSets();
                RETVAL_STRING(value_to_return0.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::DescribeKeyWordSets\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::DescribeProperty(string name)
   Describe a property. */
PHP_METHOD(php_wxStyledTextCtrl, DescribeProperty)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::DescribeProperty\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::DescribeProperty call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* name0;
    size_t name_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&name0, &name_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &name0, &name_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::DescribeProperty(wxString(name0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = ((wxStyledTextCtrl_php*)native_object)->DescribeProperty(wxString(name0, wxConvUTF8));
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::DescribeProperty\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::DiscardEdits()
   Resets the internal modified flag as if the current changes had been saved. */
PHP_METHOD(php_wxStyledTextCtrl, DiscardEdits)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::DiscardEdits\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::DiscardEdits call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::DiscardEdits()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->DiscardEdits();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::DiscardEdits\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetAllLinesVisible()
   Are all lines visible? */
PHP_METHOD(php_wxStyledTextCtrl, GetAllLinesVisible)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetAllLinesVisible\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetAllLinesVisible call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetAllLinesVisible())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetAllLinesVisible());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetAllLinesVisible\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetCaretStyle()
   Returns the current style of the caret. */
PHP_METHOD(php_wxStyledTextCtrl, GetCaretStyle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetCaretStyle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetCaretStyle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetCaretStyle())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetCaretStyle());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetCaretStyle\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::GetCurLine(int &linePos)
   Retrieve the text of the line containing the caret. */
PHP_METHOD(php_wxStyledTextCtrl, GetCurLine)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetCurLine\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetCurLine call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long* linePos0;
    zval linePos0_ref;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 0  && arguments_received <= 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '|l' (linePos0)\n");
        #endif

        char parse_parameters_string[] = "|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, linePos0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "|z";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, linePos0_ref );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::GetCurLine().fn_str(), 1)\n\n");
                #endif

                wxString value_to_return0;
                value_to_return0 = ((wxStyledTextCtrl_php*)native_object)->GetCurLine();
                RETVAL_STRING(value_to_return0.ToUTF8().data());


                return;
                break;
            }
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::GetCurLine((int*) linePos0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = ((wxStyledTextCtrl_php*)native_object)->GetCurLine((int*) linePos0);
                RETVAL_STRING(value_to_return1.ToUTF8().data());

                size_t elements_returned0_0 = sizeof(linePos0)/sizeof(*linePos0);
                array_init(&linePos0_ref);
                for(size_t i=0; i<elements_returned0_0; i++)
                {
                    add_next_index_long(&linePos0_ref, linePos0[i]);
                }

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetCurLine\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetGapPosition()
   Return a position which, to avoid performance costs, should not be within the range of a call to GetRangePointer. */
PHP_METHOD(php_wxStyledTextCtrl, GetGapPosition)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetGapPosition\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetGapPosition call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetGapPosition())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetGapPosition());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetGapPosition\n"
        );
    }
}
/* }}} */

/* {{{ proto wxColour wxStyledTextCtrl::GetHotspotActiveBackground()
   Get the back colour for active hotspots. */
PHP_METHOD(php_wxStyledTextCtrl, GetHotspotActiveBackground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetHotspotActiveBackground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetHotspotActiveBackground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::GetHotspotActiveBackground() to return new object\n\n");
                #endif

                wxColour value_to_return0;
                value_to_return0 = ((wxStyledTextCtrl_php*)native_object)->GetHotspotActiveBackground();
                ((wxRefCounter *) value_to_return0.GetRefData())->IncRef();
                void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
                memcpy(ptr, (void*) &value_to_return0, sizeof(wxColour));
                object_init_ex(return_value, php_wxColour_entry);
                ((wxColour_php*)ptr)->phpObj = *return_value;
                zo_wxColour* zo0 = Z_wxColour_P(return_value);
                zo0->native_object = (wxColour_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetHotspotActiveBackground\n"
        );
    }
}
/* }}} */

/* {{{ proto wxColour wxStyledTextCtrl::GetHotspotActiveForeground()
   Get the fore colour for active hotspots. */
PHP_METHOD(php_wxStyledTextCtrl, GetHotspotActiveForeground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetHotspotActiveForeground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetHotspotActiveForeground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::GetHotspotActiveForeground() to return new object\n\n");
                #endif

                wxColour value_to_return0;
                value_to_return0 = ((wxStyledTextCtrl_php*)native_object)->GetHotspotActiveForeground();
                ((wxRefCounter *) value_to_return0.GetRefData())->IncRef();
                void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
                memcpy(ptr, (void*) &value_to_return0, sizeof(wxColour));
                object_init_ex(return_value, php_wxColour_entry);
                ((wxColour_php*)ptr)->phpObj = *return_value;
                zo_wxColour* zo0 = Z_wxColour_P(return_value);
                zo0->native_object = (wxColour_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetHotspotActiveForeground\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetHotspotActiveUnderline()
   Get whether underlining for active hotspots. */
PHP_METHOD(php_wxStyledTextCtrl, GetHotspotActiveUnderline)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetHotspotActiveUnderline\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetHotspotActiveUnderline call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetHotspotActiveUnderline())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetHotspotActiveUnderline());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetHotspotActiveUnderline\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetHotspotSingleLine()
   Get the HotspotSingleLine property. */
PHP_METHOD(php_wxStyledTextCtrl, GetHotspotSingleLine)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetHotspotSingleLine\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetHotspotSingleLine call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetHotspotSingleLine())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetHotspotSingleLine());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetHotspotSingleLine\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetIdentifier()
   Get the identifier. */
PHP_METHOD(php_wxStyledTextCtrl, GetIdentifier)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetIdentifier\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetIdentifier call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetIdentifier())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetIdentifier());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetIdentifier\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetIndicatorCurrent()
   Get the current indicator. */
PHP_METHOD(php_wxStyledTextCtrl, GetIndicatorCurrent)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetIndicatorCurrent\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetIndicatorCurrent call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetIndicatorCurrent())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetIndicatorCurrent());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetIndicatorCurrent\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetIndicatorValue()
   Get the current indicator value. */
PHP_METHOD(php_wxStyledTextCtrl, GetIndicatorValue)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetIndicatorValue\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetIndicatorValue call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetIndicatorValue())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetIndicatorValue());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetIndicatorValue\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetInsertionPoint()
   Returns the insertion point, or cursor, position. */
PHP_METHOD(php_wxStyledTextCtrl, GetInsertionPoint)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetInsertionPoint\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetInsertionPoint call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetInsertionPoint())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetInsertionPoint());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetInsertionPoint\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetLineLength(int lineNo)
   Gets the length of the specified line, not including any trailing newline character(s). */
PHP_METHOD(php_wxStyledTextCtrl, GetLineLength)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetLineLength\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetLineLength call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long lineNo0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&lineNo0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &lineNo0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetLineLength((long) lineNo0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetLineLength((long) lineNo0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetLineLength\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::GetLineText(int lineNo)
   Returns the contents of a given line in the text control, not including any trailing newline character(s). */
PHP_METHOD(php_wxStyledTextCtrl, GetLineText)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetLineText\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetLineText call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long lineNo0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&lineNo0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &lineNo0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::GetLineText((long) lineNo0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = ((wxStyledTextCtrl_php*)native_object)->GetLineText((long) lineNo0);
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetLineText\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetMarginCursor(int margin)
   Retrieve the cursor shown in a margin. */
PHP_METHOD(php_wxStyledTextCtrl, GetMarginCursor)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetMarginCursor\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetMarginCursor call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long margin0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&margin0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &margin0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetMarginCursor((int) margin0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetMarginCursor((int) margin0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetMarginCursor\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetMarginOptions()
   Get the margin options. */
PHP_METHOD(php_wxStyledTextCtrl, GetMarginOptions)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetMarginOptions\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetMarginOptions call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetMarginOptions())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetMarginOptions());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetMarginOptions\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetMultiPaste()
   Retrieve the effect of pasting when there are multiple selections. */
PHP_METHOD(php_wxStyledTextCtrl, GetMultiPaste)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetMultiPaste\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetMultiPaste call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetMultiPaste())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetMultiPaste());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetMultiPaste\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetNumberOfLines()
   Returns the number of lines in the text control buffer. */
PHP_METHOD(php_wxStyledTextCtrl, GetNumberOfLines)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetNumberOfLines\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetNumberOfLines call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetNumberOfLines())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetNumberOfLines());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetNumberOfLines\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetPositionCacheSize()
   How many entries are allocated to the position cache? */
PHP_METHOD(php_wxStyledTextCtrl, GetPositionCacheSize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetPositionCacheSize\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetPositionCacheSize call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetPositionCacheSize())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetPositionCacheSize());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetPositionCacheSize\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::GetPunctuationChars()
   Get the set of characters making up punctuation characters. */
PHP_METHOD(php_wxStyledTextCtrl, GetPunctuationChars)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetPunctuationChars\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetPunctuationChars call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::GetPunctuationChars().fn_str(), 1)\n\n");
                #endif

                wxString value_to_return0;
                value_to_return0 = ((wxStyledTextCtrl_php*)native_object)->GetPunctuationChars();
                RETVAL_STRING(value_to_return0.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetPunctuationChars\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetScrollWidthTracking()
   Retrieve whether the scroll width tracks wide lines. */
PHP_METHOD(php_wxStyledTextCtrl, GetScrollWidthTracking)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetScrollWidthTracking\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetScrollWidthTracking call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetScrollWidthTracking())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetScrollWidthTracking());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetScrollWidthTracking\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetSelEOLFilled()
   Is the selection end of line filled? */
PHP_METHOD(php_wxStyledTextCtrl, GetSelEOLFilled)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetSelEOLFilled\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetSelEOLFilled call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetSelEOLFilled())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetSelEOLFilled());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetSelEOLFilled\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::GetSelection(int &from, int &to)
   Gets the current selection span. */
PHP_METHOD(php_wxStyledTextCtrl, GetSelection)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetSelection\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetSelection call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long* from0;
    zval from0_ref;
    long* to0;
    zval to0_ref;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (from0, to0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, from0, to0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, from0_ref, to0_ref );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::GetSelection((long*) from0, (long*) to0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->GetSelection((long*) from0, (long*) to0);

                size_t elements_returned0_0 = sizeof(from0)/sizeof(*from0);
                array_init(&from0_ref);
                for(size_t i=0; i<elements_returned0_0; i++)
                {
                    add_next_index_long(&from0_ref, from0[i]);
                }
                size_t elements_returned0_1 = sizeof(to0)/sizeof(*to0);
                array_init(&to0_ref);
                for(size_t i=0; i<elements_returned0_1; i++)
                {
                    add_next_index_long(&to0_ref, to0[i]);
                }

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetSelection\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::GetTag(int tagNumber)
   Retrieve the value of a tag from a regular expression search. */
PHP_METHOD(php_wxStyledTextCtrl, GetTag)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetTag\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetTag call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long tagNumber0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&tagNumber0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &tagNumber0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::GetTag((int) tagNumber0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = ((wxStyledTextCtrl_php*)native_object)->GetTag((int) tagNumber0);
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetTag\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetTechnology()
   Get the tech. */
PHP_METHOD(php_wxStyledTextCtrl, GetTechnology)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetTechnology\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetTechnology call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetTechnology())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetTechnology());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetTechnology\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::GetWhitespaceChars()
   Get the set of characters making up whitespace for when moving or selecting by word. */
PHP_METHOD(php_wxStyledTextCtrl, GetWhitespaceChars)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetWhitespaceChars\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetWhitespaceChars call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::GetWhitespaceChars().fn_str(), 1)\n\n");
                #endif

                wxString value_to_return0;
                value_to_return0 = ((wxStyledTextCtrl_php*)native_object)->GetWhitespaceChars();
                RETVAL_STRING(value_to_return0.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetWhitespaceChars\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::GetWordChars()
   Get the set of characters making up words for when moving or selecting by word. */
PHP_METHOD(php_wxStyledTextCtrl, GetWordChars)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetWordChars\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetWordChars call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::GetWordChars().fn_str(), 1)\n\n");
                #endif

                wxString value_to_return0;
                value_to_return0 = ((wxStyledTextCtrl_php*)native_object)->GetWordChars();
                RETVAL_STRING(value_to_return0.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetWordChars\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::IndicatorAllOnFor(int pos)
   Are any indicators present at pos? */
PHP_METHOD(php_wxStyledTextCtrl, IndicatorAllOnFor)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::IndicatorAllOnFor\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::IndicatorAllOnFor call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pos0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&pos0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pos0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::IndicatorAllOnFor((int) pos0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->IndicatorAllOnFor((int) pos0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::IndicatorAllOnFor\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::IndicatorClearRange(int start, int lengthClear)
   Turn an indicator off over a range. */
PHP_METHOD(php_wxStyledTextCtrl, IndicatorClearRange)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::IndicatorClearRange\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::IndicatorClearRange call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long start0;
    long lengthClear0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&start0, &lengthClear0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &start0, &lengthClear0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::IndicatorClearRange((int) start0, (int) lengthClear0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->IndicatorClearRange((int) start0, (int) lengthClear0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::IndicatorClearRange\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::IndicatorEnd(int indicator, int pos)
   Where does a particular indicator end? */
PHP_METHOD(php_wxStyledTextCtrl, IndicatorEnd)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::IndicatorEnd\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::IndicatorEnd call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long indicator0;
    long pos0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&indicator0, &pos0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &indicator0, &pos0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::IndicatorEnd((int) indicator0, (int) pos0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->IndicatorEnd((int) indicator0, (int) pos0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::IndicatorEnd\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::IndicatorFillRange(int start, int lengthFill)
   Turn an indicator on over a range. */
PHP_METHOD(php_wxStyledTextCtrl, IndicatorFillRange)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::IndicatorFillRange\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::IndicatorFillRange call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long start0;
    long lengthFill0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&start0, &lengthFill0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &start0, &lengthFill0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::IndicatorFillRange((int) start0, (int) lengthFill0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->IndicatorFillRange((int) start0, (int) lengthFill0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::IndicatorFillRange\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::IndicatorGetOutlineAlpha(int indicator)
   Get the alpha outline colour of the given indicator. */
PHP_METHOD(php_wxStyledTextCtrl, IndicatorGetOutlineAlpha)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::IndicatorGetOutlineAlpha\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::IndicatorGetOutlineAlpha call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long indicator0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&indicator0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &indicator0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::IndicatorGetOutlineAlpha((int) indicator0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->IndicatorGetOutlineAlpha((int) indicator0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::IndicatorGetOutlineAlpha\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::IndicatorGetUnder(int indicator)
   Retrieve whether indicator drawn under or over text. */
PHP_METHOD(php_wxStyledTextCtrl, IndicatorGetUnder)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::IndicatorGetUnder\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::IndicatorGetUnder call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long indicator0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&indicator0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &indicator0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::IndicatorGetUnder((int) indicator0))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->IndicatorGetUnder((int) indicator0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::IndicatorGetUnder\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::IndicatorSetOutlineAlpha(int indicator, int alpha)
   Set the alpha outline colour of the given indicator. */
PHP_METHOD(php_wxStyledTextCtrl, IndicatorSetOutlineAlpha)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::IndicatorSetOutlineAlpha\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::IndicatorSetOutlineAlpha call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long indicator0;
    long alpha0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&indicator0, &alpha0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &indicator0, &alpha0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::IndicatorSetOutlineAlpha((int) indicator0, (int) alpha0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->IndicatorSetOutlineAlpha((int) indicator0, (int) alpha0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::IndicatorSetOutlineAlpha\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::IndicatorSetUnder(int indicator, bool under)
   Set an indicator to draw under text or over(default). */
PHP_METHOD(php_wxStyledTextCtrl, IndicatorSetUnder)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::IndicatorSetUnder\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::IndicatorSetUnder call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long indicator0;
    bool under0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lb' (&indicator0, &under0)\n");
        #endif

        char parse_parameters_string[] = "lb";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &indicator0, &under0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::IndicatorSetUnder((int) indicator0, under0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->IndicatorSetUnder((int) indicator0, under0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::IndicatorSetUnder\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::IndicatorStart(int indicator, int pos)
   Where does a particular indicator start? */
PHP_METHOD(php_wxStyledTextCtrl, IndicatorStart)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::IndicatorStart\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::IndicatorStart call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long indicator0;
    long pos0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&indicator0, &pos0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &indicator0, &pos0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::IndicatorStart((int) indicator0, (int) pos0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->IndicatorStart((int) indicator0, (int) pos0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::IndicatorStart\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::IndicatorValueAt(int indicator, int pos)
   What value does a particular indicator have at a position? */
PHP_METHOD(php_wxStyledTextCtrl, IndicatorValueAt)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::IndicatorValueAt\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::IndicatorValueAt call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long indicator0;
    long pos0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&indicator0, &pos0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &indicator0, &pos0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::IndicatorValueAt((int) indicator0, (int) pos0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->IndicatorValueAt((int) indicator0, (int) pos0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::IndicatorValueAt\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::IsEditable()
   Returns true if the controls contents may be edited by user (note that it always can be changed by the program). */
PHP_METHOD(php_wxStyledTextCtrl, IsEditable)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::IsEditable\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::IsEditable call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::IsEditable())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->IsEditable());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::IsEditable\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::IsModified()
   Returns true if the text has been modified by user. */
PHP_METHOD(php_wxStyledTextCtrl, IsModified)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::IsModified\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::IsModified call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::IsModified())\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->IsModified());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::IsModified\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MarkDirty()
   Mark text as modified (dirty). */
PHP_METHOD(php_wxStyledTextCtrl, MarkDirty)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarkDirty\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarkDirty call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MarkDirty()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MarkDirty();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarkDirty\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MarkerSetBackgroundSelected(int markerNumber, wxColour back)
   Set the background colour used for a particular marker number when its folding block is selected. */
PHP_METHOD(php_wxStyledTextCtrl, MarkerSetBackgroundSelected)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MarkerSetBackgroundSelected\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MarkerSetBackgroundSelected call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long markerNumber0;
    zval* back0;
    wxColour* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lO' (&markerNumber0, &back0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "lO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &markerNumber0, &back0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(back0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(back0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(back0)->native_object;
                    object_pointer0_1 = (wxColour*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'back' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(back0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'back' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MarkerSetBackgroundSelected((int) markerNumber0, *(wxColour*) object_pointer0_1)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MarkerSetBackgroundSelected((int) markerNumber0, *(wxColour*) object_pointer0_1);

                references->AddReference(back0, "wxStyledTextCtrl::MarkerSetBackgroundSelected at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MarkerSetBackgroundSelected\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MoveSelectedLinesDown()
   Move the selected lines down one line, shifting the line below before the selection. */
PHP_METHOD(php_wxStyledTextCtrl, MoveSelectedLinesDown)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MoveSelectedLinesDown\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MoveSelectedLinesDown call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MoveSelectedLinesDown()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MoveSelectedLinesDown();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MoveSelectedLinesDown\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::MoveSelectedLinesUp()
   Move the selected lines up one line, shifting the line above after the selection. */
PHP_METHOD(php_wxStyledTextCtrl, MoveSelectedLinesUp)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::MoveSelectedLinesUp\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::MoveSelectedLinesUp call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::MoveSelectedLinesUp()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->MoveSelectedLinesUp();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::MoveSelectedLinesUp\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::PropertyNames()
   Retrieve a '\n' separated list of properties understood by the current lexer. */
PHP_METHOD(php_wxStyledTextCtrl, PropertyNames)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::PropertyNames\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::PropertyNames call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::PropertyNames().fn_str(), 1)\n\n");
                #endif

                wxString value_to_return0;
                value_to_return0 = ((wxStyledTextCtrl_php*)native_object)->PropertyNames();
                RETVAL_STRING(value_to_return0.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::PropertyNames\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::PropertyType(string name)
   Retrieve the type of a property. */
PHP_METHOD(php_wxStyledTextCtrl, PropertyType)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::PropertyType\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::PropertyType call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* name0;
    size_t name_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&name0, &name_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &name0, &name_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::PropertyType(wxString(name0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->PropertyType(wxString(name0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::PropertyType\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::RGBAImageSetHeight(int height)
   Set the height for future RGBA image data. */
PHP_METHOD(php_wxStyledTextCtrl, RGBAImageSetHeight)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::RGBAImageSetHeight\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::RGBAImageSetHeight call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long height0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&height0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &height0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::RGBAImageSetHeight((int) height0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->RGBAImageSetHeight((int) height0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::RGBAImageSetHeight\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::RGBAImageSetWidth(int width)
   Set the width for future RGBA image data. */
PHP_METHOD(php_wxStyledTextCtrl, RGBAImageSetWidth)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::RGBAImageSetWidth\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::RGBAImageSetWidth call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long width0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&width0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &width0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::RGBAImageSetWidth((int) width0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->RGBAImageSetWidth((int) width0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::RGBAImageSetWidth\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::RegisterRGBAImage(int type, array pixels)
   Register an RGBA image for use in autocompletion lists. */
PHP_METHOD(php_wxStyledTextCtrl, RegisterRGBAImage)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::RegisterRGBAImage\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::RegisterRGBAImage call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long type0;
    zval* pixels0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'la' (&type0, &pixels0)\n");
        #endif

        char parse_parameters_string[] = "la";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &type0, &pixels0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        int array_count0_1 = 1;
        HashTable* arr_hash0_1;
        if(arguments_received > 1)
        {
            arr_hash0_1 = Z_ARRVAL_P(pixels0);
            array_count0_1 = zend_hash_num_elements(arr_hash0_1);
        }
        unsigned char* integers_array0_1 = new unsigned char[array_count0_1];
        bool integers_continue0_1 = true;

        switch(arguments_received)
        {
            case 2:
            {
                int array_index0_1 = 0;
                zval* temp_array_value0_1 = 0;
                while(integers_continue0_1)
                {
                    if((temp_array_value0_1 = zend_hash_index_find(HASH_OF(pixels0), array_index0_1)) != NULL)
                    {
                        convert_to_long_ex(temp_array_value0_1);
                        integers_array0_1[array_index0_1] = (unsigned char) Z_LVAL_P(temp_array_value0_1);
                        array_index0_1++;
                    }
                    else
                    {
                        integers_continue0_1 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::RegisterRGBAImage((int) type0, (const unsigned char*) integers_array0_1)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->RegisterRGBAImage((int) type0, (const unsigned char*) integers_array0_1);

                delete[] integers_array0_1;

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::RegisterRGBAImage\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::Remove(int from, int to)
   Removes the text starting at the first given position up to (but not including) the character at the last position. */
PHP_METHOD(php_wxStyledTextCtrl, Remove)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::Remove\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::Remove call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long from0;
    long to0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&from0, &to0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &from0, &to0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::Remove((long) from0, (long) to0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->Remove((long) from0, (long) to0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::Remove\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::Replace(int from, int to, string value)
   Replaces the text starting at the first position up to (but not including) the character at the last position with the given text. */
PHP_METHOD(php_wxStyledTextCtrl, Replace)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::Replace\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::Replace call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long from0;
    long to0;
    char* value0;
    size_t value_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lls' (&from0, &to0, &value0, &value_len0)\n");
        #endif

        char parse_parameters_string[] = "lls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &from0, &to0, &value0, &value_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::Replace((long) from0, (long) to0, wxString(value0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->Replace((long) from0, (long) to0, wxString(value0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::Replace\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SelectNone()
   Deselects selected text in the control. */
PHP_METHOD(php_wxStyledTextCtrl, SelectNone)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SelectNone\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SelectNone call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SelectNone()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SelectNone();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SelectNone\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetCaretStyle(int caretStyle)
   Set the style of the caret to be drawn. */
PHP_METHOD(php_wxStyledTextCtrl, SetCaretStyle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetCaretStyle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetCaretStyle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long caretStyle0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&caretStyle0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &caretStyle0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetCaretStyle((int) caretStyle0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetCaretStyle((int) caretStyle0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetCaretStyle\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::WriteText(string text)
   Writes the text into the text control at the current insertion position. */
PHP_METHOD(php_wxStyledTextCtrl, WriteText)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::WriteText\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::WriteText call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* text0;
    size_t text_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&text0, &text_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &text0, &text_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::WriteText(wxString(text0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->WriteText(wxString(text0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::WriteText\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::XYToPosition(int x, int y)
   Converts the given zero based column and line number to a position. */
PHP_METHOD(php_wxStyledTextCtrl, XYToPosition)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::XYToPosition\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::XYToPosition call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&x0, &y0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::XYToPosition((long) x0, (long) y0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->XYToPosition((long) x0, (long) y0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::XYToPosition\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::VerticalCentreCaret()
   Centre current line in window. */
PHP_METHOD(php_wxStyledTextCtrl, VerticalCentreCaret)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::VerticalCentreCaret\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::VerticalCentreCaret call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::VerticalCentreCaret()\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->VerticalCentreCaret();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::VerticalCentreCaret\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleSetWeight(int style, int weight)
   Set the weight of characters of a style. */
PHP_METHOD(php_wxStyledTextCtrl, StyleSetWeight)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleSetWeight\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleSetWeight call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    long weight0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&style0, &weight0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0, &weight0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleSetWeight((int) style0, (int) weight0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleSetWeight((int) style0, (int) weight0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleSetWeight\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::StyleSetSizeFractional(int style, int sizeHundredthPoints)
   Set the size of characters of a style. */
PHP_METHOD(php_wxStyledTextCtrl, StyleSetSizeFractional)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleSetSizeFractional\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleSetSizeFractional call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    long sizeHundredthPoints0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&style0, &sizeHundredthPoints0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0, &sizeHundredthPoints0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleSetSizeFractional((int) style0, (int) sizeHundredthPoints0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->StyleSetSizeFractional((int) style0, (int) sizeHundredthPoints0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleSetSizeFractional\n"
        );
    }
}
/* }}} */

/* {{{ proto wxColour wxStyledTextCtrl::StyleGetBackground(int style)
   Get the background colour of a style. */
PHP_METHOD(php_wxStyledTextCtrl, StyleGetBackground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleGetBackground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleGetBackground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&style0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleGetBackground((int) style0) to return new object\n\n");
                #endif

                wxColour value_to_return1;
                value_to_return1 = ((wxStyledTextCtrl_php*)native_object)->StyleGetBackground((int) style0);
                ((wxRefCounter *) value_to_return1.GetRefData())->IncRef();
                void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
                memcpy(ptr, (void*) &value_to_return1, sizeof(wxColour));
                object_init_ex(return_value, php_wxColour_entry);
                ((wxColour_php*)ptr)->phpObj = *return_value;
                zo_wxColour* zo1 = Z_wxColour_P(return_value);
                zo1->native_object = (wxColour_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleGetBackground\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::StyleGetBold(int style)
   Get is a style bold or not. */
PHP_METHOD(php_wxStyledTextCtrl, StyleGetBold)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleGetBold\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleGetBold call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&style0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::StyleGetBold((int) style0))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->StyleGetBold((int) style0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleGetBold\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::StyleGetCase(int style)
   Get is a style mixed case, or to force upper or lower case. */
PHP_METHOD(php_wxStyledTextCtrl, StyleGetCase)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleGetCase\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleGetCase call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&style0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::StyleGetCase((int) style0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->StyleGetCase((int) style0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleGetCase\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::StyleGetChangeable(int style)
   Get is a style changeable or not (read only). */
PHP_METHOD(php_wxStyledTextCtrl, StyleGetChangeable)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleGetChangeable\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleGetChangeable call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&style0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::StyleGetChangeable((int) style0))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->StyleGetChangeable((int) style0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleGetChangeable\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::StyleGetCharacterSet(int style)
   Get the character get of the font in a style. */
PHP_METHOD(php_wxStyledTextCtrl, StyleGetCharacterSet)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleGetCharacterSet\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleGetCharacterSet call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&style0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::StyleGetCharacterSet((int) style0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->StyleGetCharacterSet((int) style0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleGetCharacterSet\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::StyleGetEOLFilled(int style)
   Get is a style to have its end of line filled or not. */
PHP_METHOD(php_wxStyledTextCtrl, StyleGetEOLFilled)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleGetEOLFilled\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleGetEOLFilled call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&style0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::StyleGetEOLFilled((int) style0))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->StyleGetEOLFilled((int) style0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleGetEOLFilled\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStyledTextCtrl::StyleGetFaceName(int style)
   Get the font facename of a style. */
PHP_METHOD(php_wxStyledTextCtrl, StyleGetFaceName)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleGetFaceName\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleGetFaceName call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&style0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxStyledTextCtrl::StyleGetFaceName((int) style0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = ((wxStyledTextCtrl_php*)native_object)->StyleGetFaceName((int) style0);
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleGetFaceName\n"
        );
    }
}
/* }}} */

/* {{{ proto wxFont wxStyledTextCtrl::StyleGetFont(int style)
   Get the font of a style. */
PHP_METHOD(php_wxStyledTextCtrl, StyleGetFont)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleGetFont\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleGetFont call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&style0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleGetFont((int) style0) to return new object\n\n");
                #endif

                wxFont value_to_return1;
                value_to_return1 = ((wxStyledTextCtrl_php*)native_object)->StyleGetFont((int) style0);
                ((wxRefCounter *) value_to_return1.GetRefData())->IncRef();
                void* ptr = safe_emalloc(1, sizeof(wxFont_php), 0);
                memcpy(ptr, (void*) &value_to_return1, sizeof(wxFont));
                object_init_ex(return_value, php_wxFont_entry);
                ((wxFont_php*)ptr)->phpObj = *return_value;
                zo_wxFont* zo1 = Z_wxFont_P(return_value);
                zo1->native_object = (wxFont_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleGetFont\n"
        );
    }
}
/* }}} */

/* {{{ proto wxColour wxStyledTextCtrl::StyleGetForeground(int style)
   Get the foreground colour of a style. */
PHP_METHOD(php_wxStyledTextCtrl, StyleGetForeground)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleGetForeground\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleGetForeground call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&style0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::StyleGetForeground((int) style0) to return new object\n\n");
                #endif

                wxColour value_to_return1;
                value_to_return1 = ((wxStyledTextCtrl_php*)native_object)->StyleGetForeground((int) style0);
                ((wxRefCounter *) value_to_return1.GetRefData())->IncRef();
                void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
                memcpy(ptr, (void*) &value_to_return1, sizeof(wxColour));
                object_init_ex(return_value, php_wxColour_entry);
                ((wxColour_php*)ptr)->phpObj = *return_value;
                zo_wxColour* zo1 = Z_wxColour_P(return_value);
                zo1->native_object = (wxColour_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleGetForeground\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::StyleGetHotSpot(int style)
   Get is a style a hotspot or not. */
PHP_METHOD(php_wxStyledTextCtrl, StyleGetHotSpot)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleGetHotSpot\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleGetHotSpot call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&style0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::StyleGetHotSpot((int) style0))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->StyleGetHotSpot((int) style0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleGetHotSpot\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::StyleGetItalic(int style)
   Get is a style italic or not. */
PHP_METHOD(php_wxStyledTextCtrl, StyleGetItalic)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleGetItalic\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleGetItalic call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&style0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::StyleGetItalic((int) style0))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->StyleGetItalic((int) style0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleGetItalic\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::StyleGetSize(int style)
   Get the size of characters of a style. */
PHP_METHOD(php_wxStyledTextCtrl, StyleGetSize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleGetSize\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleGetSize call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&style0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::StyleGetSize((int) style0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->StyleGetSize((int) style0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleGetSize\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::StyleGetSizeFractional(int style)
   Get the size of characters of a style in points multiplied by 100. */
PHP_METHOD(php_wxStyledTextCtrl, StyleGetSizeFractional)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleGetSizeFractional\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleGetSizeFractional call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&style0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::StyleGetSizeFractional((int) style0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->StyleGetSizeFractional((int) style0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleGetSizeFractional\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::StyleGetUnderline(int style)
   Get is a style underlined or not. */
PHP_METHOD(php_wxStyledTextCtrl, StyleGetUnderline)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleGetUnderline\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleGetUnderline call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&style0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::StyleGetUnderline((int) style0))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->StyleGetUnderline((int) style0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleGetUnderline\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::StyleGetVisible(int style)
   Get is a style visible or not. */
PHP_METHOD(php_wxStyledTextCtrl, StyleGetVisible)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleGetVisible\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleGetVisible call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&style0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::StyleGetVisible((int) style0))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->StyleGetVisible((int) style0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleGetVisible\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::StyleGetWeight(int style)
   Get the weight of characters of a style. */
PHP_METHOD(php_wxStyledTextCtrl, StyleGetWeight)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::StyleGetWeight\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::StyleGetWeight call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&style0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::StyleGetWeight((int) style0))\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->StyleGetWeight((int) style0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::StyleGetWeight\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::ShowPosition(int pos)
   Makes the line containing the given position visible. */
PHP_METHOD(php_wxStyledTextCtrl, ShowPosition)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::ShowPosition\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::ShowPosition call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pos0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&pos0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pos0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::ShowPosition((long) pos0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->ShowPosition((long) pos0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::ShowPosition\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::SetStyle(int start, int end, wxTextAttr style)
   This method is inherited from wxTextAreaBase but is not implemented in wxStyledTextCtrl. */
PHP_METHOD(php_wxStyledTextCtrl, SetStyle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetStyle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetStyle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long start0;
    long end0;
    zval* style0;
    wxTextAttr* object_pointer0_2 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'llO' (&start0, &end0, &style0, php_wxTextAttr_entry)\n");
        #endif

        char parse_parameters_string[] = "llO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &start0, &end0, &style0, php_wxTextAttr_entry ) == SUCCESS)
        {
            if(arguments_received >= 3){
                if(Z_TYPE_P(style0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxTextAttr_P(style0)->object_type;
                    argument_native_object = (void*) Z_wxTextAttr_P(style0)->native_object;
                    object_pointer0_2 = (wxTextAttr*) argument_native_object;
                    if (!object_pointer0_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'style' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(style0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'style' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::SetStyle((long) start0, (long) end0, *(wxTextAttr*) object_pointer0_2))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->SetStyle((long) start0, (long) end0, *(wxTextAttr*) object_pointer0_2));

                references->AddReference(style0, "wxStyledTextCtrl::SetStyle at call 3 with 3 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetStyle\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetMarginCursor(int margin, int cursor)
   Set the cursor shown when the mouse is inside a margin. */
PHP_METHOD(php_wxStyledTextCtrl, SetMarginCursor)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetMarginCursor\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetMarginCursor call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long margin0;
    long cursor0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&margin0, &cursor0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &margin0, &cursor0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetMarginCursor((int) margin0, (int) cursor0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetMarginCursor((int) margin0, (int) cursor0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetMarginCursor\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetMarginOptions(int marginOptions)
   Set the margin options. */
PHP_METHOD(php_wxStyledTextCtrl, SetMarginOptions)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetMarginOptions\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetMarginOptions call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long marginOptions0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&marginOptions0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &marginOptions0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetMarginOptions((int) marginOptions0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetMarginOptions((int) marginOptions0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetMarginOptions\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetIdentifier(int identifier)
   Set the identifier reported as idFrom in notification messages. */
PHP_METHOD(php_wxStyledTextCtrl, SetIdentifier)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetIdentifier\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetIdentifier call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long identifier0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&identifier0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &identifier0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetIdentifier((int) identifier0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetIdentifier((int) identifier0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetIdentifier\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetIndicatorCurrent(int indicator)
   Set the indicator used for IndicatorFillRange and IndicatorClearRange. */
PHP_METHOD(php_wxStyledTextCtrl, SetIndicatorCurrent)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetIndicatorCurrent\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetIndicatorCurrent call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long indicator0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&indicator0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &indicator0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetIndicatorCurrent((int) indicator0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetIndicatorCurrent((int) indicator0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetIndicatorCurrent\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetIndicatorValue(int value)
   Set the value used for IndicatorFillRange. */
PHP_METHOD(php_wxStyledTextCtrl, SetIndicatorValue)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetIndicatorValue\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetIndicatorValue call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long value0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&value0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &value0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetIndicatorValue((int) value0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetIndicatorValue((int) value0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetIndicatorValue\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetInsertionPoint(int pos)
   Sets the insertion point at the given position. */
PHP_METHOD(php_wxStyledTextCtrl, SetInsertionPoint)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetInsertionPoint\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetInsertionPoint call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pos0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&pos0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pos0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetInsertionPoint((long) pos0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetInsertionPoint((long) pos0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetInsertionPoint\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetEmptySelection(int caret)
   Set caret to a position, while removing any existing selection. */
PHP_METHOD(php_wxStyledTextCtrl, SetEmptySelection)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetEmptySelection\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetEmptySelection call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long caret0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&caret0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &caret0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetEmptySelection((int) caret0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetEmptySelection((int) caret0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetEmptySelection\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetEditable(bool editable)
   Makes the text item editable or read-only, overriding the wxTE_READONLY flag. */
PHP_METHOD(php_wxStyledTextCtrl, SetEditable)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetEditable\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetEditable call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool editable0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&editable0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &editable0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetEditable(editable0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetEditable(editable0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetEditable\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::SetDefaultStyle(wxTextAttr style)
   This method is inherited from wxTextAreaBase but is not implemented in wxStyledTextCtrl. */
PHP_METHOD(php_wxStyledTextCtrl, SetDefaultStyle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetDefaultStyle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetDefaultStyle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* style0;
    wxTextAttr* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&style0, php_wxTextAttr_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &style0, php_wxTextAttr_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(style0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxTextAttr_P(style0)->object_type;
                    argument_native_object = (void*) Z_wxTextAttr_P(style0)->native_object;
                    object_pointer0_0 = (wxTextAttr*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'style' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(style0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'style' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::SetDefaultStyle(*(wxTextAttr*) object_pointer0_0))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->SetDefaultStyle(*(wxTextAttr*) object_pointer0_0));

                references->AddReference(style0, "wxStyledTextCtrl::SetDefaultStyle at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetDefaultStyle\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxStyledTextCtrl::GetStyle(int position, wxTextAttr &style)
   This method is inherited from wxTextAreaBase but is not implemented in wxStyledTextCtrl. */
PHP_METHOD(php_wxStyledTextCtrl, GetStyle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetStyle\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetStyle call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long position0;
    zval* style0;
    wxTextAttr* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lO' (&position0, &style0, php_wxTextAttr_entry)\n");
        #endif

        char parse_parameters_string[] = "lO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &position0, &style0, php_wxTextAttr_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(style0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxTextAttr_P(style0)->object_type;
                    argument_native_object = (void*) Z_wxTextAttr_P(style0)->native_object;
                    object_pointer0_1 = (wxTextAttr*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'style' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(style0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'style' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxStyledTextCtrl::GetStyle((long) position0, *(wxTextAttr*) object_pointer0_1))\n\n");
                #endif

                RETVAL_BOOL(((wxStyledTextCtrl_php*)native_object)->GetStyle((long) position0, *(wxTextAttr*) object_pointer0_1));

                references->AddReference(style0, "wxStyledTextCtrl::GetStyle at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetStyle\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStyledTextCtrl::GetLastPosition()
   Returns the zero based index of the last position in the text control, which is equal to the number of characters in the control. */
PHP_METHOD(php_wxStyledTextCtrl, GetLastPosition)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::GetLastPosition\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::GetLastPosition call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxStyledTextCtrl::GetLastPosition())\n\n");
                #endif

                RETVAL_LONG(((wxStyledTextCtrl_php*)native_object)->GetLastPosition());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::GetLastPosition\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetMultiPaste(int multiPaste)
   Change the effect of pasting when there are multiple selections. */
PHP_METHOD(php_wxStyledTextCtrl, SetMultiPaste)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetMultiPaste\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetMultiPaste call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long multiPaste0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&multiPaste0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &multiPaste0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetMultiPaste((int) multiPaste0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetMultiPaste((int) multiPaste0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetMultiPaste\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetPositionCacheSize(int size)
   Set number of entries in position cache. */
PHP_METHOD(php_wxStyledTextCtrl, SetPositionCacheSize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetPositionCacheSize\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetPositionCacheSize call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long size0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&size0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &size0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetPositionCacheSize((int) size0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetPositionCacheSize((int) size0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetPositionCacheSize\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetPunctuationChars(string characters)
   Set the set of characters making up punctuation characters Should be called after SetWordChars. */
PHP_METHOD(php_wxStyledTextCtrl, SetPunctuationChars)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetPunctuationChars\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetPunctuationChars call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* characters0;
    size_t characters_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&characters0, &characters_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &characters0, &characters_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetPunctuationChars(wxString(characters0, wxConvUTF8))\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetPunctuationChars(wxString(characters0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetPunctuationChars\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetScrollWidthTracking(bool tracking)
   Sets whether the maximum width line displayed is used to set scroll width. */
PHP_METHOD(php_wxStyledTextCtrl, SetScrollWidthTracking)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetScrollWidthTracking\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetScrollWidthTracking call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool tracking0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&tracking0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &tracking0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetScrollWidthTracking(tracking0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetScrollWidthTracking(tracking0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetScrollWidthTracking\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetSelEOLFilled(bool filled)
   Set the selection to have its end of line filled or not. */
PHP_METHOD(php_wxStyledTextCtrl, SetSelEOLFilled)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetSelEOLFilled\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetSelEOLFilled call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool filled0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'b' (&filled0)\n");
        #endif

        char parse_parameters_string[] = "b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &filled0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetSelEOLFilled(filled0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetSelEOLFilled(filled0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetSelEOLFilled\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxStyledTextCtrl::SetTechnology(int technology)
   Set the technology used. */
PHP_METHOD(php_wxStyledTextCtrl, SetTechnology)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxStyledTextCtrl::SetTechnology\n");
    php_printf("===========================================\n");
    #endif

    zo_wxStyledTextCtrl* current_object;
    wxphp_object_type current_object_type;
    wxStyledTextCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxStyledTextCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxStyledTextCtrl::SetTechnology call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE){
                references = &((wxStyledTextCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long technology0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&technology0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &technology0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxStyledTextCtrl::SetTechnology((int) technology0)\n\n");
                #endif

                ((wxStyledTextCtrl_php*)native_object)->SetTechnology((int) technology0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxStyledTextCtrl::SetTechnology\n"
        );
    }
}
/* }}} */

