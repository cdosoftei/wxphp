/*
 * @author Mário Soares
 * @contributors Jefferson González
 * @contributors René Vögeli / Rangee GmbH
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @note
 * This file was auto-generated by the wxPHP source maker
*/

#ifndef WXPHP_CFG_H_GUARD
#define WXPHP_CFG_H_GUARD

#include "references.h"
#include "object_types.h"

ZEND_BEGIN_ARG_INFO_EX(wxphp_cfg_get_args, 0, 0, 1)
    ZEND_ARG_INFO(0, name)
ZEND_END_ARG_INFO()

extern zend_class_entry* php_wxConfigBase_entry;
extern zend_object_handlers wxphp_wxConfigBase_object_handlers;
void php_wxConfigBase_destruction_handler(zend_resource*);

class wxConfigBase_php: public wxConfigBase{
    public:

    
    bool DeleteAll();
    bool DeleteEntry(const wxString& key, bool bDeleteGroupIfEmpty=true);
    bool DeleteGroup(const wxString& key);
    bool Flush(bool bCurrentOnly=false);
    bool GetFirstEntry(wxString& str, long& index) const;
    bool GetFirstGroup(wxString& str, long& index) const;
    bool GetNextEntry(wxString& str, long& index) const;
    bool GetNextGroup(wxString& str, long& index) const;
    size_t GetNumberOfEntries(bool bRecursive=false) const;
    size_t GetNumberOfGroups(bool bRecursive=false) const;
    const wxString& GetPath() const;
    bool HasEntry(const wxString& strName) const;
    bool HasGroup(const wxString& strName) const;
    bool RenameEntry(const wxString& oldName, const wxString& newName);
    bool RenameGroup(const wxString& oldName, const wxString& newName);
    void SetPath(const wxString& strPath);
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxConfigBase{
    wxConfigBase_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxConfigBase;

void php_wxConfigBase_free(void *object);
zend_object* php_wxConfigBase_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxConfigBase_functions[] = {
    PHP_ME(php_wxConfigBase, Create, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxConfigBase, DontCreateOnDemand, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxConfigBase, Exists, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxConfigBase, Get, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxConfigBase, GetAppName, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxConfigBase, GetEntryType, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxConfigBase, GetVendorName, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxConfigBase, IsExpandingEnvVars, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxConfigBase, IsRecordingDefaults, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxConfigBase, Read, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxConfigBase, ReadBool, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxConfigBase, ReadDouble, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxConfigBase, ReadLong, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxConfigBase, Set, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxConfigBase, SetExpandEnvVars, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxConfigBase, SetRecordDefaults, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxConfigBase, Write, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxConfigBase * php_wxConfigBase_fetch_object(zend_object *obj) {
    return (zo_wxConfigBase *)(
        (char *)(obj) - XtOffsetOf(zo_wxConfigBase, zo)
    );
}

#define Z_wxConfigBase_P(zv) \
    php_wxConfigBase_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxDisplay_entry;
extern zend_object_handlers wxphp_wxDisplay_object_handlers;
void php_wxDisplay_destruction_handler(zend_resource*);

class wxDisplay_php: public wxDisplay{
    public:

    wxDisplay_php(unsigned int index=0):wxDisplay(index){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxDisplay{
    wxDisplay_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxDisplay;

void php_wxDisplay_free(void *object);
zend_object* php_wxDisplay_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxDisplay_functions[] = {
    PHP_ME(php_wxDisplay, ChangeMode, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDisplay, GetClientArea, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDisplay, GetCount, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDisplay, GetCurrentMode, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDisplay, GetFromPoint, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDisplay, GetFromWindow, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDisplay, GetGeometry, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDisplay, GetName, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDisplay, IsPrimary, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDisplay, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxDisplay * php_wxDisplay_fetch_object(zend_object *obj) {
    return (zo_wxDisplay *)(
        (char *)(obj) - XtOffsetOf(zo_wxDisplay, zo)
    );
}

#define Z_wxDisplay_P(zv) \
    php_wxDisplay_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxFileConfig_entry;
extern zend_object_handlers wxphp_wxFileConfig_object_handlers;
void php_wxFileConfig_destruction_handler(zend_resource*);

class wxFileConfig_php: public wxFileConfig{
    public:

    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxFileConfig{
    wxFileConfig_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxFileConfig;

void php_wxFileConfig_free(void *object);
zend_object* php_wxFileConfig_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxFileConfig_functions[] = {
    PHP_ME(php_wxFileConfig, DeleteAll, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileConfig, DeleteEntry, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileConfig, DeleteGroup, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileConfig, Flush, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileConfig, GetFirstEntry, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileConfig, GetFirstGroup, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileConfig, GetGlobalFile, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileConfig, GetGlobalFileName, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileConfig, GetLocalFile, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileConfig, GetLocalFileName, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileConfig, GetNextEntry, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileConfig, GetNextGroup, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileConfig, GetNumberOfEntries, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileConfig, GetNumberOfGroups, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileConfig, GetPath, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileConfig, HasEntry, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileConfig, HasGroup, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileConfig, RenameEntry, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileConfig, RenameGroup, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileConfig, SetPath, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileConfig, SetUmask, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxFileConfig * php_wxFileConfig_fetch_object(zend_object *obj) {
    return (zo_wxFileConfig *)(
        (char *)(obj) - XtOffsetOf(zo_wxFileConfig, zo)
    );
}

#define Z_wxFileConfig_P(zv) \
    php_wxFileConfig_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxFontMapper_entry;
extern zend_object_handlers wxphp_wxFontMapper_object_handlers;
void php_wxFontMapper_destruction_handler(zend_resource*);

class wxFontMapper_php: public wxFontMapper{
    public:

    wxFontMapper_php():wxFontMapper(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxFontMapper{
    wxFontMapper_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxFontMapper;

void php_wxFontMapper_free(void *object);
zend_object* php_wxFontMapper_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxFontMapper_functions[] = {
    PHP_ME(php_wxFontMapper, CharsetToEncoding, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontMapper, Get, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontMapper, GetAltForEncoding, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontMapper, GetEncoding, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontMapper, GetEncodingDescription, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontMapper, GetEncodingFromName, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontMapper, GetEncodingName, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontMapper, GetSupportedEncodingsCount, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontMapper, IsEncodingAvailable, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontMapper, Set, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontMapper, SetConfigPath, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontMapper, SetDialogParent, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontMapper, SetDialogTitle, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontMapper, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxFontMapper * php_wxFontMapper_fetch_object(zend_object *obj) {
    return (zo_wxFontMapper *)(
        (char *)(obj) - XtOffsetOf(zo_wxFontMapper, zo)
    );
}

#define Z_wxFontMapper_P(zv) \
    php_wxFontMapper_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxPlatformInfo_entry;
extern zend_object_handlers wxphp_wxPlatformInfo_object_handlers;
void php_wxPlatformInfo_destruction_handler(zend_resource*);

class wxPlatformInfo_php: public wxPlatformInfo{
    public:

    wxPlatformInfo_php():wxPlatformInfo(){}
    wxPlatformInfo_php(wxPortId pid, int tkMajor=-1, int tkMinor=-1, wxOperatingSystemId id=wxOS_UNKNOWN, int osMajor=-1, int osMinor=-1, wxArchitecture arch=wxARCH_INVALID, wxEndianness endian=wxENDIAN_INVALID):wxPlatformInfo(pid, tkMajor, tkMinor, id, osMajor, osMinor, arch, endian){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxPlatformInfo{
    wxPlatformInfo_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxPlatformInfo;

void php_wxPlatformInfo_free(void *object);
zend_object* php_wxPlatformInfo_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxPlatformInfo_functions[] = {
    PHP_ME(php_wxPlatformInfo, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxPlatformInfo, CheckOSVersion, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, CheckToolkitVersion, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, Get, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, GetDesktopEnvironment, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, GetEndianness, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, GetEndiannessName, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, GetOSMajorVersion, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, GetOSMinorVersion, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, GetOperatingSystemDescription, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, GetOperatingSystemDirectory, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, GetOperatingSystemFamilyName, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, GetOperatingSystemId, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, GetOperatingSystemIdName, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, GetPortId, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, GetPortIdName, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, GetPortIdShortName, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, GetToolkitMajorVersion, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, GetToolkitMinorVersion, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, IsOk, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, IsUsingUniversalWidgets, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, SetDesktopEnvironment, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, SetEndianness, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, SetOSVersion, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, SetOperatingSystemDescription, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, SetOperatingSystemId, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, SetPortId, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPlatformInfo, SetToolkitVersion, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxPlatformInfo * php_wxPlatformInfo_fetch_object(zend_object *obj) {
    return (zo_wxPlatformInfo *)(
        (char *)(obj) - XtOffsetOf(zo_wxPlatformInfo, zo)
    );
}

#define Z_wxPlatformInfo_P(zv) \
    php_wxPlatformInfo_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxSystemSettings_entry;
extern zend_object_handlers wxphp_wxSystemSettings_object_handlers;
void php_wxSystemSettings_destruction_handler(zend_resource*);

class wxSystemSettings_php: public wxSystemSettings{
    public:

    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxSystemSettings{
    wxSystemSettings_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxSystemSettings;

void php_wxSystemSettings_free(void *object);
zend_object* php_wxSystemSettings_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxSystemSettings_functions[] = {
    PHP_ME(php_wxSystemSettings, GetColour, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSystemSettings, GetFont, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSystemSettings, GetMetric, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSystemSettings, GetScreenType, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSystemSettings, HasFeature, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxSystemSettings * php_wxSystemSettings_fetch_object(zend_object *obj) {
    return (zo_wxSystemSettings *)(
        (char *)(obj) - XtOffsetOf(zo_wxSystemSettings, zo)
    );
}

#define Z_wxSystemSettings_P(zv) \
    php_wxSystemSettings_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxSystemOptions_entry;
extern zend_object_handlers wxphp_wxSystemOptions_object_handlers;
void php_wxSystemOptions_destruction_handler(zend_resource*);

class wxSystemOptions_php: public wxSystemOptions{
    public:

    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxSystemOptions{
    wxSystemOptions_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxSystemOptions;

void php_wxSystemOptions_free(void *object);
zend_object* php_wxSystemOptions_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxSystemOptions_functions[] = {
    PHP_ME(php_wxSystemOptions, GetOption, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSystemOptions, GetOptionInt, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSystemOptions, HasOption, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSystemOptions, IsFalse, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSystemOptions, SetOption, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxSystemOptions * php_wxSystemOptions_fetch_object(zend_object *obj) {
    return (zo_wxSystemOptions *)(
        (char *)(obj) - XtOffsetOf(zo_wxSystemOptions, zo)
    );
}

#define Z_wxSystemOptions_P(zv) \
    php_wxSystemOptions_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxVideoMode_entry;
extern zend_object_handlers wxphp_wxVideoMode_object_handlers;
void php_wxVideoMode_destruction_handler(zend_resource*);

class wxVideoMode_php: public wxVideoMode{
    public:

    wxVideoMode_php(int width=0, int height=0, int depth=0, int freq=0):wxVideoMode(width, height, depth, freq){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxVideoMode{
    wxVideoMode_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxVideoMode;

void php_wxVideoMode_free(void *object);
zend_object* php_wxVideoMode_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxVideoMode_functions[] = {
    PHP_ME(php_wxVideoMode, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxVideoMode, Matches, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVideoMode, IsOk, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVideoMode, GetWidth, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVideoMode, GetHeight, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxVideoMode, GetDepth, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxVideoMode * php_wxVideoMode_fetch_object(zend_object *obj) {
    return (zo_wxVideoMode *)(
        (char *)(obj) - XtOffsetOf(zo_wxVideoMode, zo)
    );
}

#define Z_wxVideoMode_P(zv) \
    php_wxVideoMode_fetch_object(Z_OBJ_P(zv))
#endif //WXPHP_CFG_H_GUARD
