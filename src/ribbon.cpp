/*
 * @author Mário Soares
 * @contributors Jefferson González
 * @contributors René Vögeli / Rangee GmbH
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @note
 * This file was auto-generated by the wxPHP source maker
*/

#include "php_wxwidgets.h"
#include "appmanagement.h"
#include "cfg.h"
#include "bookctrl.h"
#include "dnd.h"
#include "cmndlg.h"
#include "containers.h"
#include "ctrl.h"
#include "data.h"
#include "dc.h"
#include "docview.h"
#include "events.h"
#include "file.h"
#include "gdi.h"
#include "grid.h"
#include "html.h"
#include "help.h"
#include "logging.h"
#include "managedwnd.h"
#include "menus.h"
#include "misc.h"
#include "miscwnd.h"
#include "media.h"
#include "net.h"
#include "pickers.h"
#include "printing.h"
#include "ribbon.h"
#include "richtext.h"
#include "rtti.h"
#include "stc.h"
#include "streams.h"
#include "threading.h"
#include "validator.h"
#include "vfs.h"
#include "aui.h"
#include "winlayout.h"
#include "xml.h"
#include "xrc.h"
#include "dvc.h"
#include "others.h"


BEGIN_EXTERN_C()
void php_wxRibbonArtProvider_free(void *object)
{
    zo_wxRibbonArtProvider* custom_object = (zo_wxRibbonArtProvider*) object;

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxRibbonArtProvider_free on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    if(custom_object->native_object != NULL)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Pointer not null\n");
        php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
        #endif

        if(custom_object->is_user_initialized)
        {
            #ifdef USE_WXPHP_DEBUG
            php_printf("Deleting pointer with delete\n");
            #endif

            delete custom_object->native_object;
            custom_object->native_object = NULL;
        }

        #ifdef USE_WXPHP_DEBUG
        php_printf("Deletion of wxRibbonArtProvider done\n");
        php_printf("===========================================\n\n");
        #endif
    }
    else
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Not user space initialized\n");
        #endif
    }

    zend_object_std_dtor(&custom_object->zo);
    efree(custom_object);
}

zend_object* php_wxRibbonArtProvider_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxRibbonArtProvider_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonArtProvider* custom_object;

    custom_object = (zo_wxRibbonArtProvider*) ecalloc(
        1,
        sizeof(zo_wxRibbonArtProvider)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    custom_object->zo.handlers = &wxphp_wxRibbonArtProvider_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXRIBBONARTPROVIDER_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto wxRibbonArtProvider wxRibbonArtProvider::Clone()
   Create a new art provider which is a clone of this one. */
wxRibbonArtProvider* wxRibbonArtProvider_php::Clone()const
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::Clone\n");
    php_printf("===========================================\n");
    #endif

    zval* params[1];
    zval arguments[1];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "Clone");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "Clone");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "Clone",
            5,
            &function_return_value,
            0,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::Clone'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    if(Z_TYPE(function_return_value) == IS_OBJECT)
    {
        return_object = (void*) Z_wxRibbonArtProvider_P(&function_return_value)->native_object;
    }

    //Threat it as a normal object on the calling function and not a php user space intiialized one
    Z_wxRibbonArtProvider_P(&function_return_value)->is_user_initialized = 0;
    wxRibbonArtProvider_php* var = (wxRibbonArtProvider_php*) return_object;
    var->references.UnInitialize();

    return (wxRibbonArtProvider*) return_object;

}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::DrawButtonBarBackground(wxDC &dc, wxWindow &wnd, wxRect rect)
   Draw the background for a wxRibbonButtonBar control. */
void wxRibbonArtProvider_php::DrawButtonBarBackground(wxDC& dc, wxWindow* wnd, const wxRect& rect)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::DrawButtonBarBackground\n");
    php_printf("===========================================\n");
    #endif

    zval* params[3];
    zval arguments[3];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "DrawButtonBarBackground");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxWindow_entry);
    Z_wxWindow_P(&arguments[1])->native_object = (wxWindow_php*) &wnd;
    object_init_ex(&arguments[2], php_wxRect_entry);
    Z_wxRect_P(&arguments[2])->native_object = (wxRect_php*) &rect;
    
    for(int i=0; i<3; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "DrawButtonBarBackground");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "DrawButtonBarBackground",
            23,
            &function_return_value,
            3,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<3; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::DrawButtonBarBackground'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return;

}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::DrawGalleryBackground(wxDC &dc, wxRibbonGallery &wnd, wxRect rect)
   Draw the background and chrome for a wxRibbonGallery control. */
void wxRibbonArtProvider_php::DrawGalleryBackground(wxDC& dc, wxRibbonGallery* wnd, const wxRect& rect)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::DrawGalleryBackground\n");
    php_printf("===========================================\n");
    #endif

    zval* params[3];
    zval arguments[3];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "DrawGalleryBackground");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxRibbonGallery_entry);
    Z_wxRibbonGallery_P(&arguments[1])->native_object = (wxRibbonGallery_php*) &wnd;
    object_init_ex(&arguments[2], php_wxRect_entry);
    Z_wxRect_P(&arguments[2])->native_object = (wxRect_php*) &rect;
    
    for(int i=0; i<3; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "DrawGalleryBackground");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "DrawGalleryBackground",
            21,
            &function_return_value,
            3,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<3; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::DrawGalleryBackground'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return;

}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::DrawGalleryItemBackground(wxDC &dc, wxRibbonGallery &wnd, wxRect rect, wxRibbonGalleryItem &item)
   Draw the background of a single item in a wxRibbonGallery control. */
void wxRibbonArtProvider_php::DrawGalleryItemBackground(wxDC& dc, wxRibbonGallery* wnd, const wxRect& rect, wxRibbonGalleryItem* item)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::DrawGalleryItemBackground\n");
    php_printf("===========================================\n");
    #endif

    zval* params[4];
    zval arguments[4];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "DrawGalleryItemBackground");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxRibbonGallery_entry);
    Z_wxRibbonGallery_P(&arguments[1])->native_object = (wxRibbonGallery_php*) &wnd;
    object_init_ex(&arguments[2], php_wxRect_entry);
    Z_wxRect_P(&arguments[2])->native_object = (wxRect_php*) &rect;
    object_init_ex(&arguments[3], php_wxRibbonGalleryItem_entry);
    Z_wxRibbonGalleryItem_P(&arguments[3])->native_object = (wxRibbonGalleryItem_php*) &item;
    
    for(int i=0; i<4; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "DrawGalleryItemBackground");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "DrawGalleryItemBackground",
            25,
            &function_return_value,
            4,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<4; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::DrawGalleryItemBackground'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return;

}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::DrawMinimisedPanel(wxDC &dc, wxRibbonPanel &wnd, wxRect rect, wxBitmap &bitmap)
   Draw a minimised ribbon panel. */
void wxRibbonArtProvider_php::DrawMinimisedPanel(wxDC& dc, wxRibbonPanel* wnd, const wxRect& rect, wxBitmap& bitmap)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::DrawMinimisedPanel\n");
    php_printf("===========================================\n");
    #endif

    zval* params[4];
    zval arguments[4];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "DrawMinimisedPanel");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxRibbonPanel_entry);
    Z_wxRibbonPanel_P(&arguments[1])->native_object = (wxRibbonPanel_php*) &wnd;
    object_init_ex(&arguments[2], php_wxRect_entry);
    Z_wxRect_P(&arguments[2])->native_object = (wxRect_php*) &rect;
    object_init_ex(&arguments[3], php_wxBitmap_entry);
    Z_wxBitmap_P(&arguments[3])->native_object = (wxBitmap_php*) &bitmap;
    
    for(int i=0; i<4; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "DrawMinimisedPanel");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "DrawMinimisedPanel",
            18,
            &function_return_value,
            4,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<4; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::DrawMinimisedPanel'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return;

}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::DrawPageBackground(wxDC &dc, wxWindow &wnd, wxRect rect)
   Draw the background of a ribbon page. */
void wxRibbonArtProvider_php::DrawPageBackground(wxDC& dc, wxWindow* wnd, const wxRect& rect)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::DrawPageBackground\n");
    php_printf("===========================================\n");
    #endif

    zval* params[3];
    zval arguments[3];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "DrawPageBackground");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxWindow_entry);
    Z_wxWindow_P(&arguments[1])->native_object = (wxWindow_php*) &wnd;
    object_init_ex(&arguments[2], php_wxRect_entry);
    Z_wxRect_P(&arguments[2])->native_object = (wxRect_php*) &rect;
    
    for(int i=0; i<3; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "DrawPageBackground");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "DrawPageBackground",
            18,
            &function_return_value,
            3,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<3; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::DrawPageBackground'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return;

}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::DrawPanelBackground(wxDC &dc, wxRibbonPanel &wnd, wxRect rect)
   Draw the background and chrome for a ribbon panel. */
void wxRibbonArtProvider_php::DrawPanelBackground(wxDC& dc, wxRibbonPanel* wnd, const wxRect& rect)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::DrawPanelBackground\n");
    php_printf("===========================================\n");
    #endif

    zval* params[3];
    zval arguments[3];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "DrawPanelBackground");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxRibbonPanel_entry);
    Z_wxRibbonPanel_P(&arguments[1])->native_object = (wxRibbonPanel_php*) &wnd;
    object_init_ex(&arguments[2], php_wxRect_entry);
    Z_wxRect_P(&arguments[2])->native_object = (wxRect_php*) &rect;
    
    for(int i=0; i<3; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "DrawPanelBackground");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "DrawPanelBackground",
            19,
            &function_return_value,
            3,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<3; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::DrawPanelBackground'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return;

}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::DrawScrollButton(wxDC &dc, wxWindow &wnd, wxRect rect, int style)
   Draw a ribbon-style scroll button. */
void wxRibbonArtProvider_php::DrawScrollButton(wxDC& dc, wxWindow* wnd, const wxRect& rect, long style)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::DrawScrollButton\n");
    php_printf("===========================================\n");
    #endif

    zval* params[4];
    zval arguments[4];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "DrawScrollButton");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxWindow_entry);
    Z_wxWindow_P(&arguments[1])->native_object = (wxWindow_php*) &wnd;
    object_init_ex(&arguments[2], php_wxRect_entry);
    Z_wxRect_P(&arguments[2])->native_object = (wxRect_php*) &rect;
    ZVAL_LONG(&arguments[3], style);
    
    for(int i=0; i<4; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "DrawScrollButton");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "DrawScrollButton",
            16,
            &function_return_value,
            4,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<4; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::DrawScrollButton'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return;

}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::DrawTabCtrlBackground(wxDC &dc, wxWindow &wnd, wxRect rect)
   Draw the background of the tab region of a ribbon bar. */
void wxRibbonArtProvider_php::DrawTabCtrlBackground(wxDC& dc, wxWindow* wnd, const wxRect& rect)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::DrawTabCtrlBackground\n");
    php_printf("===========================================\n");
    #endif

    zval* params[3];
    zval arguments[3];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "DrawTabCtrlBackground");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxWindow_entry);
    Z_wxWindow_P(&arguments[1])->native_object = (wxWindow_php*) &wnd;
    object_init_ex(&arguments[2], php_wxRect_entry);
    Z_wxRect_P(&arguments[2])->native_object = (wxRect_php*) &rect;
    
    for(int i=0; i<3; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "DrawTabCtrlBackground");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "DrawTabCtrlBackground",
            21,
            &function_return_value,
            3,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<3; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::DrawTabCtrlBackground'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return;

}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::DrawTabSeparator(wxDC &dc, wxWindow &wnd, wxRect rect, float visibility)
   Draw a separator between two tabs in a ribbon bar. */
void wxRibbonArtProvider_php::DrawTabSeparator(wxDC& dc, wxWindow* wnd, const wxRect& rect, double visibility)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::DrawTabSeparator\n");
    php_printf("===========================================\n");
    #endif

    zval* params[4];
    zval arguments[4];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "DrawTabSeparator");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxWindow_entry);
    Z_wxWindow_P(&arguments[1])->native_object = (wxWindow_php*) &wnd;
    object_init_ex(&arguments[2], php_wxRect_entry);
    Z_wxRect_P(&arguments[2])->native_object = (wxRect_php*) &rect;
    ZVAL_DOUBLE(&arguments[3], visibility);
    
    for(int i=0; i<4; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "DrawTabSeparator");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "DrawTabSeparator",
            16,
            &function_return_value,
            4,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<4; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::DrawTabSeparator'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return;

}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::DrawTool(wxDC &dc, wxWindow &wnd, wxRect rect, wxBitmap bitmap, wxRibbonButtonKind kind, int state)
   Draw a single tool (for a wxRibbonToolBar control). */
void wxRibbonArtProvider_php::DrawTool(wxDC& dc, wxWindow* wnd, const wxRect& rect, const wxBitmap& bitmap, wxRibbonButtonKind kind, long state)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::DrawTool\n");
    php_printf("===========================================\n");
    #endif

    zval* params[6];
    zval arguments[6];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "DrawTool");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxWindow_entry);
    Z_wxWindow_P(&arguments[1])->native_object = (wxWindow_php*) &wnd;
    object_init_ex(&arguments[2], php_wxRect_entry);
    Z_wxRect_P(&arguments[2])->native_object = (wxRect_php*) &rect;
    object_init_ex(&arguments[3], php_wxBitmap_entry);
    Z_wxBitmap_P(&arguments[3])->native_object = (wxBitmap_php*) &bitmap;
    ZVAL_LONG(&arguments[4], kind);
    ZVAL_LONG(&arguments[5], state);
    
    for(int i=0; i<6; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "DrawTool");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "DrawTool",
            8,
            &function_return_value,
            6,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<6; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::DrawTool'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return;

}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::DrawToolBarBackground(wxDC &dc, wxWindow &wnd, wxRect rect)
   Draw the background for a wxRibbonToolBar control. */
void wxRibbonArtProvider_php::DrawToolBarBackground(wxDC& dc, wxWindow* wnd, const wxRect& rect)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::DrawToolBarBackground\n");
    php_printf("===========================================\n");
    #endif

    zval* params[3];
    zval arguments[3];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "DrawToolBarBackground");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxWindow_entry);
    Z_wxWindow_P(&arguments[1])->native_object = (wxWindow_php*) &wnd;
    object_init_ex(&arguments[2], php_wxRect_entry);
    Z_wxRect_P(&arguments[2])->native_object = (wxRect_php*) &rect;
    
    for(int i=0; i<3; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "DrawToolBarBackground");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "DrawToolBarBackground",
            21,
            &function_return_value,
            3,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<3; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::DrawToolBarBackground'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return;

}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::DrawToolGroupBackground(wxDC &dc, wxWindow &wnd, wxRect rect)
   Draw the background for a group of tools on a wxRibbonToolBar control. */
void wxRibbonArtProvider_php::DrawToolGroupBackground(wxDC& dc, wxWindow* wnd, const wxRect& rect)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::DrawToolGroupBackground\n");
    php_printf("===========================================\n");
    #endif

    zval* params[3];
    zval arguments[3];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "DrawToolGroupBackground");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxWindow_entry);
    Z_wxWindow_P(&arguments[1])->native_object = (wxWindow_php*) &wnd;
    object_init_ex(&arguments[2], php_wxRect_entry);
    Z_wxRect_P(&arguments[2])->native_object = (wxRect_php*) &rect;
    
    for(int i=0; i<3; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "DrawToolGroupBackground");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "DrawToolGroupBackground",
            23,
            &function_return_value,
            3,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<3; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::DrawToolGroupBackground'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return;

}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::GetBarTabWidth(wxDC &dc, wxWindow &wnd, string label, wxBitmap bitmap, int &ideal, int &small_begin_need_separator, int &small_must_have_separator, int &minimum)
   Calculate the ideal and minimum width (in pixels) of a tab in a ribbon bar. */
void wxRibbonArtProvider_php::GetBarTabWidth(wxDC& dc, wxWindow* wnd, const wxString& label, const wxBitmap& bitmap, int* ideal, int* small_begin_need_separator, int* small_must_have_separator, int* minimum)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::GetBarTabWidth\n");
    php_printf("===========================================\n");
    #endif

    zval* params[8];
    zval arguments[8];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "GetBarTabWidth");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxWindow_entry);
    Z_wxWindow_P(&arguments[1])->native_object = (wxWindow_php*) &wnd;
    ZVAL_STRING(&arguments[2], label.ToUTF8().data());
    object_init_ex(&arguments[3], php_wxBitmap_entry);
    Z_wxBitmap_P(&arguments[3])->native_object = (wxBitmap_php*) &bitmap;
    ZVAL_LONG(&arguments[4], *ideal);
    ZVAL_LONG(&arguments[5], *small_begin_need_separator);
    ZVAL_LONG(&arguments[6], *small_must_have_separator);
    ZVAL_LONG(&arguments[7], *minimum);
    
    for(int i=0; i<8; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "GetBarTabWidth");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "GetBarTabWidth",
            14,
            &function_return_value,
            8,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<8; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::GetBarTabWidth'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return;

}
/* }}} */

/* {{{ proto wxColour wxRibbonArtProvider::GetColor(int id) */
PHP_METHOD(php_wxRibbonArtProvider, GetColor)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonArtProvider::GetColor\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonArtProvider* current_object;
    wxphp_object_type current_object_type;
    wxRibbonArtProvider_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonArtProvider_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonArtProvider::GetColor call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONARTPROVIDER_TYPE){
                references = &((wxRibbonArtProvider_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long id0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&id0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &id0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonArtProvider::GetColor((int) id0) to return new object\n\n");
                #endif

                wxColour value_to_return1;
                if(current_object_type == PHP_WXRIBBONARTPROVIDER_TYPE)
                {
                    value_to_return1 = ((wxRibbonArtProvider_php*)native_object)->GetColor((int) id0);
                    ((wxRefCounter *) value_to_return1.GetRefData())->IncRef();
                    void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
                    memcpy(ptr, (void*) &value_to_return1, sizeof(wxColour));
                    object_init_ex(return_value, php_wxColour_entry);
                    ((wxColour_php*)ptr)->phpObj = *return_value;
                    zo_wxColour* zo1 = Z_wxColour_P(return_value);
                    zo1->native_object = (wxColour_php*) ptr;
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonArtProvider::GetColor\n"
        );
    }
}
/* }}} */

/* {{{ proto wxColour wxRibbonArtProvider::GetColour(int id)
   Get the value of a certain colour setting. */
wxColour wxRibbonArtProvider_php::GetColour(int id)const
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::GetColour\n");
    php_printf("===========================================\n");
    #endif

    zval* params[1];
    zval arguments[1];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "GetColour");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    ZVAL_LONG(&arguments[0], id);
    
    for(int i=0; i<1; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "GetColour");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "GetColour",
            9,
            &function_return_value,
            1,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<1; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::GetColour'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    if(Z_TYPE(function_return_value) == IS_OBJECT)
    {
        return_object = (void*) Z_wxColour_P(&function_return_value)->native_object;
    }

    //Threat it as a normal object on the calling function and not a php user space intiialized one
    Z_wxColour_P(&function_return_value)->is_user_initialized = 0;
    wxColour_php* var = (wxColour_php*) return_object;
    var->references.UnInitialize();

    return *(wxColour*) return_object;

}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::GetColourScheme(wxColour &primary, wxColour &secondary, wxColour &tertiary)
   Get the current colour scheme. */
void wxRibbonArtProvider_php::GetColourScheme(wxColour* primary, wxColour* secondary, wxColour* tertiary)const
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::GetColourScheme\n");
    php_printf("===========================================\n");
    #endif

    zval* params[3];
    zval arguments[3];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "GetColourScheme");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxColour_entry);
    Z_wxColour_P(&arguments[0])->native_object = (wxColour_php*) &primary;
    object_init_ex(&arguments[1], php_wxColour_entry);
    Z_wxColour_P(&arguments[1])->native_object = (wxColour_php*) &secondary;
    object_init_ex(&arguments[2], php_wxColour_entry);
    Z_wxColour_P(&arguments[2])->native_object = (wxColour_php*) &tertiary;
    
    for(int i=0; i<3; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "GetColourScheme");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "GetColourScheme",
            15,
            &function_return_value,
            3,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<3; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::GetColourScheme'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return;

}
/* }}} */

/* {{{ proto int wxRibbonArtProvider::GetFlags()
   Get the previously set style flags. */
long wxRibbonArtProvider_php::GetFlags()const
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::GetFlags\n");
    php_printf("===========================================\n");
    #endif

    zval* params[1];
    zval arguments[1];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "GetFlags");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "GetFlags");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "GetFlags",
            8,
            &function_return_value,
            0,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::GetFlags'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return (long) Z_LVAL(function_return_value);

}
/* }}} */

/* {{{ proto wxFont wxRibbonArtProvider::GetFont(int id)
   Get the value of a certain font setting. */
wxFont wxRibbonArtProvider_php::GetFont(int id)const
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::GetFont\n");
    php_printf("===========================================\n");
    #endif

    zval* params[1];
    zval arguments[1];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "GetFont");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    ZVAL_LONG(&arguments[0], id);
    
    for(int i=0; i<1; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "GetFont");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "GetFont",
            7,
            &function_return_value,
            1,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<1; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::GetFont'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    if(Z_TYPE(function_return_value) == IS_OBJECT)
    {
        return_object = (void*) Z_wxFont_P(&function_return_value)->native_object;
    }

    //Threat it as a normal object on the calling function and not a php user space intiialized one
    Z_wxFont_P(&function_return_value)->is_user_initialized = 0;
    wxFont_php* var = (wxFont_php*) return_object;
    var->references.UnInitialize();

    return *(wxFont*) return_object;

}
/* }}} */

/* {{{ proto wxSize wxRibbonArtProvider::GetGalleryClientSize(wxDC &dc, wxRibbonGallery wnd, wxSize size, wxPoint &client_offset, wxRect &scroll_up_button, wxRect &scroll_down_button, wxRect &extension_button)
   Calculate the client size of a wxRibbonGallery control for a given size. */
wxSize wxRibbonArtProvider_php::GetGalleryClientSize(wxDC& dc, const wxRibbonGallery* wnd, wxSize size, wxPoint* client_offset, wxRect* scroll_up_button, wxRect* scroll_down_button, wxRect* extension_button)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::GetGalleryClientSize\n");
    php_printf("===========================================\n");
    #endif

    zval* params[7];
    zval arguments[7];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "GetGalleryClientSize");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxRibbonGallery_entry);
    Z_wxRibbonGallery_P(&arguments[1])->native_object = (wxRibbonGallery_php*) &wnd;
    object_init_ex(&arguments[2], php_wxSize_entry);
    Z_wxSize_P(&arguments[2])->native_object = (wxSize_php*) &size;
    object_init_ex(&arguments[3], php_wxPoint_entry);
    Z_wxPoint_P(&arguments[3])->native_object = (wxPoint_php*) &client_offset;
    object_init_ex(&arguments[4], php_wxRect_entry);
    Z_wxRect_P(&arguments[4])->native_object = (wxRect_php*) &scroll_up_button;
    object_init_ex(&arguments[5], php_wxRect_entry);
    Z_wxRect_P(&arguments[5])->native_object = (wxRect_php*) &scroll_down_button;
    object_init_ex(&arguments[6], php_wxRect_entry);
    Z_wxRect_P(&arguments[6])->native_object = (wxRect_php*) &extension_button;
    
    for(int i=0; i<7; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "GetGalleryClientSize");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "GetGalleryClientSize",
            20,
            &function_return_value,
            7,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<7; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::GetGalleryClientSize'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    if(Z_TYPE(function_return_value) == IS_OBJECT)
    {
        return_object = (void*) Z_wxSize_P(&function_return_value)->native_object;
    }

    //Threat it as a normal object on the calling function and not a php user space intiialized one
    Z_wxSize_P(&function_return_value)->is_user_initialized = 0;
    wxSize_php* var = (wxSize_php*) return_object;
    var->references.UnInitialize();

    return *(wxSize*) return_object;

}
/* }}} */

/* {{{ proto wxSize wxRibbonArtProvider::GetGallerySize(wxDC &dc, wxRibbonGallery wnd, wxSize client_size)
   Calculate the size of a wxRibbonGallery control for a given client size. */
wxSize wxRibbonArtProvider_php::GetGallerySize(wxDC& dc, const wxRibbonGallery* wnd, wxSize client_size)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::GetGallerySize\n");
    php_printf("===========================================\n");
    #endif

    zval* params[3];
    zval arguments[3];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "GetGallerySize");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxRibbonGallery_entry);
    Z_wxRibbonGallery_P(&arguments[1])->native_object = (wxRibbonGallery_php*) &wnd;
    object_init_ex(&arguments[2], php_wxSize_entry);
    Z_wxSize_P(&arguments[2])->native_object = (wxSize_php*) &client_size;
    
    for(int i=0; i<3; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "GetGallerySize");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "GetGallerySize",
            14,
            &function_return_value,
            3,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<3; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::GetGallerySize'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    if(Z_TYPE(function_return_value) == IS_OBJECT)
    {
        return_object = (void*) Z_wxSize_P(&function_return_value)->native_object;
    }

    //Threat it as a normal object on the calling function and not a php user space intiialized one
    Z_wxSize_P(&function_return_value)->is_user_initialized = 0;
    wxSize_php* var = (wxSize_php*) return_object;
    var->references.UnInitialize();

    return *(wxSize*) return_object;

}
/* }}} */

/* {{{ proto int wxRibbonArtProvider::GetMetric(int id)
   Get the value of a certain integer setting. */
int wxRibbonArtProvider_php::GetMetric(int id)const
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::GetMetric\n");
    php_printf("===========================================\n");
    #endif

    zval* params[1];
    zval arguments[1];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "GetMetric");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    ZVAL_LONG(&arguments[0], id);
    
    for(int i=0; i<1; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "GetMetric");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "GetMetric",
            9,
            &function_return_value,
            1,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<1; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::GetMetric'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return (int) Z_LVAL(function_return_value);

}
/* }}} */

/* {{{ proto wxSize wxRibbonArtProvider::GetMinimisedPanelMinimumSize(wxDC &dc, wxRibbonPanel wnd, wxSize &desired_bitmap_size, wxDirection &expanded_panel_direction)
   Calculate the size of a minimised ribbon panel. */
wxSize wxRibbonArtProvider_php::GetMinimisedPanelMinimumSize(wxDC& dc, const wxRibbonPanel* wnd, wxSize* desired_bitmap_size, wxDirection* expanded_panel_direction)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::GetMinimisedPanelMinimumSize\n");
    php_printf("===========================================\n");
    #endif

    zval* params[4];
    zval arguments[4];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "GetMinimisedPanelMinimumSize");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxRibbonPanel_entry);
    Z_wxRibbonPanel_P(&arguments[1])->native_object = (wxRibbonPanel_php*) &wnd;
    object_init_ex(&arguments[2], php_wxSize_entry);
    Z_wxSize_P(&arguments[2])->native_object = (wxSize_php*) &desired_bitmap_size;
    ZVAL_LONG(&arguments[3], *expanded_panel_direction);
    
    for(int i=0; i<4; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "GetMinimisedPanelMinimumSize");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "GetMinimisedPanelMinimumSize",
            28,
            &function_return_value,
            4,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<4; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::GetMinimisedPanelMinimumSize'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    if(Z_TYPE(function_return_value) == IS_OBJECT)
    {
        return_object = (void*) Z_wxSize_P(&function_return_value)->native_object;
    }

    //Threat it as a normal object on the calling function and not a php user space intiialized one
    Z_wxSize_P(&function_return_value)->is_user_initialized = 0;
    wxSize_php* var = (wxSize_php*) return_object;
    var->references.UnInitialize();

    return *(wxSize*) return_object;

}
/* }}} */

/* {{{ proto wxRect wxRibbonArtProvider::GetPageBackgroundRedrawArea(wxDC &dc, wxRibbonPage wnd, wxSize page_old_size, wxSize page_new_size)
   Calculate the portion of a page background which needs to be redrawn when a page is resized. */
wxRect wxRibbonArtProvider_php::GetPageBackgroundRedrawArea(wxDC& dc, const wxRibbonPage* wnd, wxSize page_old_size, wxSize page_new_size)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::GetPageBackgroundRedrawArea\n");
    php_printf("===========================================\n");
    #endif

    zval* params[4];
    zval arguments[4];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "GetPageBackgroundRedrawArea");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxRibbonPage_entry);
    Z_wxRibbonPage_P(&arguments[1])->native_object = (wxRibbonPage_php*) &wnd;
    object_init_ex(&arguments[2], php_wxSize_entry);
    Z_wxSize_P(&arguments[2])->native_object = (wxSize_php*) &page_old_size;
    object_init_ex(&arguments[3], php_wxSize_entry);
    Z_wxSize_P(&arguments[3])->native_object = (wxSize_php*) &page_new_size;
    
    for(int i=0; i<4; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "GetPageBackgroundRedrawArea");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "GetPageBackgroundRedrawArea",
            27,
            &function_return_value,
            4,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<4; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::GetPageBackgroundRedrawArea'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    if(Z_TYPE(function_return_value) == IS_OBJECT)
    {
        return_object = (void*) Z_wxRect_P(&function_return_value)->native_object;
    }

    //Threat it as a normal object on the calling function and not a php user space intiialized one
    Z_wxRect_P(&function_return_value)->is_user_initialized = 0;
    wxRect_php* var = (wxRect_php*) return_object;
    var->references.UnInitialize();

    return *(wxRect*) return_object;

}
/* }}} */

/* {{{ proto wxSize wxRibbonArtProvider::GetPanelClientSize(wxDC &dc, wxRibbonPanel wnd, wxSize size, wxPoint &client_offset)
   Calculate the client size of a panel for a given overall size. */
wxSize wxRibbonArtProvider_php::GetPanelClientSize(wxDC& dc, const wxRibbonPanel* wnd, wxSize size, wxPoint* client_offset)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::GetPanelClientSize\n");
    php_printf("===========================================\n");
    #endif

    zval* params[4];
    zval arguments[4];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "GetPanelClientSize");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxRibbonPanel_entry);
    Z_wxRibbonPanel_P(&arguments[1])->native_object = (wxRibbonPanel_php*) &wnd;
    object_init_ex(&arguments[2], php_wxSize_entry);
    Z_wxSize_P(&arguments[2])->native_object = (wxSize_php*) &size;
    object_init_ex(&arguments[3], php_wxPoint_entry);
    Z_wxPoint_P(&arguments[3])->native_object = (wxPoint_php*) &client_offset;
    
    for(int i=0; i<4; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "GetPanelClientSize");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "GetPanelClientSize",
            18,
            &function_return_value,
            4,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<4; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::GetPanelClientSize'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    if(Z_TYPE(function_return_value) == IS_OBJECT)
    {
        return_object = (void*) Z_wxSize_P(&function_return_value)->native_object;
    }

    //Threat it as a normal object on the calling function and not a php user space intiialized one
    Z_wxSize_P(&function_return_value)->is_user_initialized = 0;
    wxSize_php* var = (wxSize_php*) return_object;
    var->references.UnInitialize();

    return *(wxSize*) return_object;

}
/* }}} */

/* {{{ proto wxSize wxRibbonArtProvider::GetPanelSize(wxDC &dc, wxRibbonPanel wnd, wxSize client_size, wxPoint &client_offset)
   Calculate the size of a panel for a given client size. */
wxSize wxRibbonArtProvider_php::GetPanelSize(wxDC& dc, const wxRibbonPanel* wnd, wxSize client_size, wxPoint* client_offset)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::GetPanelSize\n");
    php_printf("===========================================\n");
    #endif

    zval* params[4];
    zval arguments[4];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "GetPanelSize");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxRibbonPanel_entry);
    Z_wxRibbonPanel_P(&arguments[1])->native_object = (wxRibbonPanel_php*) &wnd;
    object_init_ex(&arguments[2], php_wxSize_entry);
    Z_wxSize_P(&arguments[2])->native_object = (wxSize_php*) &client_size;
    object_init_ex(&arguments[3], php_wxPoint_entry);
    Z_wxPoint_P(&arguments[3])->native_object = (wxPoint_php*) &client_offset;
    
    for(int i=0; i<4; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "GetPanelSize");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "GetPanelSize",
            12,
            &function_return_value,
            4,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<4; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::GetPanelSize'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    if(Z_TYPE(function_return_value) == IS_OBJECT)
    {
        return_object = (void*) Z_wxSize_P(&function_return_value)->native_object;
    }

    //Threat it as a normal object on the calling function and not a php user space intiialized one
    Z_wxSize_P(&function_return_value)->is_user_initialized = 0;
    wxSize_php* var = (wxSize_php*) return_object;
    var->references.UnInitialize();

    return *(wxSize*) return_object;

}
/* }}} */

/* {{{ proto wxSize wxRibbonArtProvider::GetScrollButtonMinimumSize(wxDC &dc, wxWindow &wnd, int style)
   Calculate the minimum size (in pixels) of a scroll button. */
wxSize wxRibbonArtProvider_php::GetScrollButtonMinimumSize(wxDC& dc, wxWindow* wnd, long style)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::GetScrollButtonMinimumSize\n");
    php_printf("===========================================\n");
    #endif

    zval* params[3];
    zval arguments[3];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "GetScrollButtonMinimumSize");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxWindow_entry);
    Z_wxWindow_P(&arguments[1])->native_object = (wxWindow_php*) &wnd;
    ZVAL_LONG(&arguments[2], style);
    
    for(int i=0; i<3; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "GetScrollButtonMinimumSize");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "GetScrollButtonMinimumSize",
            26,
            &function_return_value,
            3,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<3; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::GetScrollButtonMinimumSize'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    if(Z_TYPE(function_return_value) == IS_OBJECT)
    {
        return_object = (void*) Z_wxSize_P(&function_return_value)->native_object;
    }

    //Threat it as a normal object on the calling function and not a php user space intiialized one
    Z_wxSize_P(&function_return_value)->is_user_initialized = 0;
    wxSize_php* var = (wxSize_php*) return_object;
    var->references.UnInitialize();

    return *(wxSize*) return_object;

}
/* }}} */

/* {{{ proto wxSize wxRibbonArtProvider::GetToolSize(wxDC &dc, wxWindow &wnd, wxSize bitmap_size, wxRibbonButtonKind kind, bool is_first, bool is_last, wxRect &dropdown_region)
   Calculate the size of a tool within a wxRibbonToolBar. */
wxSize wxRibbonArtProvider_php::GetToolSize(wxDC& dc, wxWindow* wnd, wxSize bitmap_size, wxRibbonButtonKind kind, bool is_first, bool is_last, wxRect* dropdown_region)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::GetToolSize\n");
    php_printf("===========================================\n");
    #endif

    zval* params[7];
    zval arguments[7];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "GetToolSize");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxWindow_entry);
    Z_wxWindow_P(&arguments[1])->native_object = (wxWindow_php*) &wnd;
    object_init_ex(&arguments[2], php_wxSize_entry);
    Z_wxSize_P(&arguments[2])->native_object = (wxSize_php*) &bitmap_size;
    ZVAL_LONG(&arguments[3], kind);
    ZVAL_BOOL(&arguments[4], is_first);
    ZVAL_BOOL(&arguments[5], is_last);
    object_init_ex(&arguments[6], php_wxRect_entry);
    Z_wxRect_P(&arguments[6])->native_object = (wxRect_php*) &dropdown_region;
    
    for(int i=0; i<7; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "GetToolSize");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "GetToolSize",
            11,
            &function_return_value,
            7,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<7; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::GetToolSize'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    if(Z_TYPE(function_return_value) == IS_OBJECT)
    {
        return_object = (void*) Z_wxSize_P(&function_return_value)->native_object;
    }

    //Threat it as a normal object on the calling function and not a php user space intiialized one
    Z_wxSize_P(&function_return_value)->is_user_initialized = 0;
    wxSize_php* var = (wxSize_php*) return_object;
    var->references.UnInitialize();

    return *(wxSize*) return_object;

}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::SetColor(int id, wxColour color) */
PHP_METHOD(php_wxRibbonArtProvider, SetColor)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonArtProvider::SetColor\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonArtProvider* current_object;
    wxphp_object_type current_object_type;
    wxRibbonArtProvider_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonArtProvider_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonArtProvider::SetColor call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONARTPROVIDER_TYPE){
                references = &((wxRibbonArtProvider_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long id0;
    zval* color0;
    wxColour* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lO' (&id0, &color0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "lO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &id0, &color0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(color0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(color0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(color0)->native_object;
                    object_pointer0_1 = (wxColour*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'color' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(color0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'color' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonArtProvider::SetColor((int) id0, *(wxColour*) object_pointer0_1)\n\n");
                #endif

                if(current_object_type == PHP_WXRIBBONARTPROVIDER_TYPE)
                {
                    ((wxRibbonArtProvider_php*)native_object)->SetColor((int) id0, *(wxColour*) object_pointer0_1);
                }

                references->AddReference(color0, "wxRibbonArtProvider::SetColor at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonArtProvider::SetColor\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::SetColour(int id, wxColour colour)
   Set the value of a certain colour setting to the value colour. */
void wxRibbonArtProvider_php::SetColour(int id, const wxColour& colour)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::SetColour\n");
    php_printf("===========================================\n");
    #endif

    zval* params[2];
    zval arguments[2];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "SetColour");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    ZVAL_LONG(&arguments[0], id);
    object_init_ex(&arguments[1], php_wxColour_entry);
    Z_wxColour_P(&arguments[1])->native_object = (wxColour_php*) &colour;
    
    for(int i=0; i<2; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "SetColour");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "SetColour",
            9,
            &function_return_value,
            2,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<2; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::SetColour'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return;

}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::SetColourScheme(wxColour primary, wxColour secondary, wxColour tertiary)
   Set all applicable colour settings from a few base colours. */
void wxRibbonArtProvider_php::SetColourScheme(const wxColour& primary, const wxColour& secondary, const wxColour& tertiary)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::SetColourScheme\n");
    php_printf("===========================================\n");
    #endif

    zval* params[3];
    zval arguments[3];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "SetColourScheme");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxColour_entry);
    Z_wxColour_P(&arguments[0])->native_object = (wxColour_php*) &primary;
    object_init_ex(&arguments[1], php_wxColour_entry);
    Z_wxColour_P(&arguments[1])->native_object = (wxColour_php*) &secondary;
    object_init_ex(&arguments[2], php_wxColour_entry);
    Z_wxColour_P(&arguments[2])->native_object = (wxColour_php*) &tertiary;
    
    for(int i=0; i<3; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "SetColourScheme");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "SetColourScheme",
            15,
            &function_return_value,
            3,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<3; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::SetColourScheme'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return;

}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::SetFlags(int flags)
   Set the style flags. */
void wxRibbonArtProvider_php::SetFlags(long flags)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::SetFlags\n");
    php_printf("===========================================\n");
    #endif

    zval* params[1];
    zval arguments[1];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "SetFlags");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    ZVAL_LONG(&arguments[0], flags);
    
    for(int i=0; i<1; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "SetFlags");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "SetFlags",
            8,
            &function_return_value,
            1,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<1; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::SetFlags'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return;

}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::SetFont(int id, wxFont font)
   Set the value of a certain font setting to the value font. */
void wxRibbonArtProvider_php::SetFont(int id, const wxFont& font)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::SetFont\n");
    php_printf("===========================================\n");
    #endif

    zval* params[2];
    zval arguments[2];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "SetFont");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    ZVAL_LONG(&arguments[0], id);
    object_init_ex(&arguments[1], php_wxFont_entry);
    Z_wxFont_P(&arguments[1])->native_object = (wxFont_php*) &font;
    
    for(int i=0; i<2; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "SetFont");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "SetFont",
            7,
            &function_return_value,
            2,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<2; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::SetFont'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return;

}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::SetMetric(int id, int new_val)
   Set the value of a certain integer setting to the value new_val. */
void wxRibbonArtProvider_php::SetMetric(int id, int new_val)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::SetMetric\n");
    php_printf("===========================================\n");
    #endif

    zval* params[2];
    zval arguments[2];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "SetMetric");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    ZVAL_LONG(&arguments[0], id);
    ZVAL_LONG(&arguments[1], new_val);
    
    for(int i=0; i<2; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "SetMetric");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "SetMetric",
            9,
            &function_return_value,
            2,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<2; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::SetMetric'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return;

}
/* }}} */

/* {{{ proto  wxRibbonArtProvider::DrawButtonBarButton(wxDC &dc, wxWindow &wnd, wxRect rect, wxRibbonButtonKind kind, int state, string label, wxBitmap bitmap_large, wxBitmap bitmap_small)
   Draw a single button for a wxRibbonButtonBar control. */
void wxRibbonArtProvider_php::DrawButtonBarButton(wxDC& dc, wxWindow* wnd, const wxRect& rect, wxRibbonButtonKind kind, long state, const wxString& label, const wxBitmap& bitmap_large, const wxBitmap& bitmap_small)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::DrawButtonBarButton\n");
    php_printf("===========================================\n");
    #endif

    zval* params[8];
    zval arguments[8];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "DrawButtonBarButton");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxWindow_entry);
    Z_wxWindow_P(&arguments[1])->native_object = (wxWindow_php*) &wnd;
    object_init_ex(&arguments[2], php_wxRect_entry);
    Z_wxRect_P(&arguments[2])->native_object = (wxRect_php*) &rect;
    ZVAL_LONG(&arguments[3], kind);
    ZVAL_LONG(&arguments[4], state);
    ZVAL_STRING(&arguments[5], label.ToUTF8().data());
    object_init_ex(&arguments[6], php_wxBitmap_entry);
    Z_wxBitmap_P(&arguments[6])->native_object = (wxBitmap_php*) &bitmap_large;
    object_init_ex(&arguments[7], php_wxBitmap_entry);
    Z_wxBitmap_P(&arguments[7])->native_object = (wxBitmap_php*) &bitmap_small;
    
    for(int i=0; i<8; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "DrawButtonBarButton");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "DrawButtonBarButton",
            19,
            &function_return_value,
            8,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<8; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::DrawButtonBarButton'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return;

}
/* }}} */

/* {{{ proto bool wxRibbonArtProvider::GetButtonBarButtonSize(wxDC &dc, wxWindow &wnd, wxRibbonButtonKind kind, wxRibbonButtonBarButtonState size, string label, int text_min_width, wxSize bitmap_size_large, wxSize bitmap_size_small, wxSize &button_size, wxRect &normal_region, wxRect &dropdown_region)
   Calculate the size of a button within a wxRibbonButtonBar. */
bool wxRibbonArtProvider_php::GetButtonBarButtonSize(wxDC& dc, wxWindow* wnd, wxRibbonButtonKind kind, wxRibbonButtonBarButtonState size, const wxString& label, wxCoord text_min_width, wxSize bitmap_size_large, wxSize bitmap_size_small, wxSize* button_size, wxRect* normal_region, wxRect* dropdown_region)
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonArtProvider::GetButtonBarButtonSize\n");
    php_printf("===========================================\n");
    #endif

    zval* params[11];
    zval arguments[11];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "GetButtonBarButtonSize");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    object_init_ex(&arguments[0], php_wxDC_entry);
    Z_wxDC_P(&arguments[0])->native_object = (wxDC_php*) &dc;
    object_init_ex(&arguments[1], php_wxWindow_entry);
    Z_wxWindow_P(&arguments[1])->native_object = (wxWindow_php*) &wnd;
    ZVAL_LONG(&arguments[2], kind);
    ZVAL_LONG(&arguments[3], size);
    ZVAL_STRING(&arguments[4], label.ToUTF8().data());
    ZVAL_LONG(&arguments[5], text_min_width);
    object_init_ex(&arguments[6], php_wxSize_entry);
    Z_wxSize_P(&arguments[6])->native_object = (wxSize_php*) &bitmap_size_large;
    object_init_ex(&arguments[7], php_wxSize_entry);
    Z_wxSize_P(&arguments[7])->native_object = (wxSize_php*) &bitmap_size_small;
    object_init_ex(&arguments[8], php_wxSize_entry);
    Z_wxSize_P(&arguments[8])->native_object = (wxSize_php*) &button_size;
    object_init_ex(&arguments[9], php_wxRect_entry);
    Z_wxRect_P(&arguments[9])->native_object = (wxRect_php*) &normal_region;
    object_init_ex(&arguments[10], php_wxRect_entry);
    Z_wxRect_P(&arguments[10])->native_object = (wxRect_php*) &dropdown_region;
    
    for(int i=0; i<11; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "GetButtonBarButtonSize");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "GetButtonBarButtonSize",
            22,
            &function_return_value,
            11,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<11; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

        wxMessageBox(
            "Failed to call virtual method "
                "'wxRibbonArtProvider::GetButtonBarButtonSize'!",
            "Error",
            wxOK|wxICON_ERROR
        );
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Returning userspace value.\n");
    #endif

    return Z_TYPE(function_return_value) == IS_TRUE;

}
/* }}} */

BEGIN_EXTERN_C()
void php_wxRibbonBar_free(void *object)
{
    zo_wxRibbonBar* custom_object = (zo_wxRibbonBar*) object;

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Obviate delete call for wxRibbonBar on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n\n");
    #endif

    zend_object_std_dtor(&custom_object->zo);
    efree(custom_object);
}

zend_object* php_wxRibbonBar_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxRibbonBar_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonBar* custom_object;

    custom_object = (zo_wxRibbonBar*) ecalloc(
        1,
        sizeof(zo_wxRibbonBar)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    custom_object->zo.handlers = &wxphp_wxRibbonBar_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXRIBBONBAR_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto bool wxRibbonBar::ArePanelsShown()
   Indicates whether the panel area of the ribbon bar is shown. */
PHP_METHOD(php_wxRibbonBar, ArePanelsShown)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonBar::ArePanelsShown\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonBar::ArePanelsShown call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBAR_TYPE){
                references = &((wxRibbonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonBar::ArePanelsShown())\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonBar_php*)native_object)->ArePanelsShown());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonBar::ArePanelsShown\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonBar::Create(wxWindow &parent, int id, wxPoint pos, wxSize size, int style)
   Create a ribbon bar in two-step ribbon bar construction. */
PHP_METHOD(php_wxRibbonBar, Create)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonBar::Create\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonBar::Create call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBAR_TYPE){
                references = &((wxRibbonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* parent0;
    wxWindow* object_pointer0_0 = 0;
    long id0;
    zval* pos0;
    wxPoint* object_pointer0_2 = 0;
    zval* size0;
    wxSize* object_pointer0_3 = 0;
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 5)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z|lOOl' (&parent0, &id0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0)\n");
        #endif

        char parse_parameters_string[] = "z|lOOl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent0, &id0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(pos0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos0)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos0)->native_object;
                    object_pointer0_2 = (wxPoint*) argument_native_object;
                    if (!object_pointer0_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(size0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size0)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size0)->native_object;
                    object_pointer0_3 = (wxSize*) argument_native_object;
                    if (!object_pointer0_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonBar::Create((wxWindow*) object_pointer0_0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonBar_php*)native_object)->Create((wxWindow*) object_pointer0_0));

                references->AddReference(parent0, "wxRibbonBar::Create at call 1 with 1 argument(s)");

                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonBar::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonBar_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0));

                references->AddReference(parent0, "wxRibbonBar::Create at call 1 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonBar::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonBar_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2));

                references->AddReference(parent0, "wxRibbonBar::Create at call 1 with 3 argument(s)");
                references->AddReference(pos0, "wxRibbonBar::Create at call 3 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonBar::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonBar_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3));

                references->AddReference(parent0, "wxRibbonBar::Create at call 1 with 4 argument(s)");
                references->AddReference(pos0, "wxRibbonBar::Create at call 3 with 4 argument(s)");
                references->AddReference(size0, "wxRibbonBar::Create at call 3 with 4 argument(s)");

                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonBar::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3, (long) style0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonBar_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3, (long) style0));

                references->AddReference(parent0, "wxRibbonBar::Create at call 1 with 5 argument(s)");
                references->AddReference(pos0, "wxRibbonBar::Create at call 3 with 5 argument(s)");
                references->AddReference(size0, "wxRibbonBar::Create at call 3 with 5 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonBar::Create\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonBar::DismissExpandedPanel()
   Dismiss the expanded panel of the currently active page. */
PHP_METHOD(php_wxRibbonBar, DismissExpandedPanel)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonBar::DismissExpandedPanel\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonBar::DismissExpandedPanel call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBAR_TYPE){
                references = &((wxRibbonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonBar::DismissExpandedPanel())\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonBar_php*)native_object)->DismissExpandedPanel());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonBar::DismissExpandedPanel\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxRibbonBar::GetActivePage()
   Get the index of the active page. */
PHP_METHOD(php_wxRibbonBar, GetActivePage)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonBar::GetActivePage\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonBar::GetActivePage call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBAR_TYPE){
                references = &((wxRibbonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxRibbonBar::GetActivePage())\n\n");
                #endif

                RETVAL_LONG(((wxRibbonBar_php*)native_object)->GetActivePage());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonBar::GetActivePage\n"
        );
    }
}
/* }}} */

/* {{{ proto wxRibbonPage wxRibbonBar::GetPage(int n)
   Get a page by index. */
PHP_METHOD(php_wxRibbonBar, GetPage)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonBar::GetPage\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonBar::GetPage call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBAR_TYPE){
                references = &((wxRibbonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long n0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&n0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &n0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonBar::GetPage((int) n0) to return object pointer\n\n");
                #endif

                wxRibbonPage_php* value_to_return1;
                value_to_return1 = (wxRibbonPage_php*) ((wxRibbonBar_php*)native_object)->GetPage((int) n0);

                if(value_to_return1 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return1->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return1->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return1->phpObj);
                        zval_add_ref(&value_to_return1->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonPage_entry);
                    Z_wxRibbonPage_P(return_value)->native_object = (wxRibbonPage_php*) value_to_return1;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return1 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonBar::GetPage at call 5 with 1 argument(s)");
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonBar::GetPage\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonBar::HidePanels()
   Hides the panel area of the ribbon bar. */
PHP_METHOD(php_wxRibbonBar, HidePanels)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonBar::HidePanels\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonBar::HidePanels call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBAR_TYPE){
                references = &((wxRibbonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonBar::HidePanels()\n\n");
                #endif

                ((wxRibbonBar_php*)native_object)->HidePanels();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonBar::HidePanels\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonBar::Realize()
   Perform initial layout and size calculations of the bar and its children. */
PHP_METHOD(php_wxRibbonBar, Realize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonBar::Realize\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonBar::Realize call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBAR_TYPE){
                references = &((wxRibbonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonBar::Realize())\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonBar_php*)native_object)->Realize());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonBar::Realize\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonBar::SetActivePage(int page)
   Set the active page by index, without triggering any events. */
PHP_METHOD(php_wxRibbonBar, SetActivePage)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonBar::SetActivePage\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonBar::SetActivePage call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBAR_TYPE){
                references = &((wxRibbonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long page0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* page1;
    wxRibbonPage* object_pointer1_0 = 0;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&page0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &page0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&page1)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &page1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(page1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRibbonPage_P(page1)->object_type;
                    argument_native_object = (void*) Z_wxRibbonPage_P(page1)->native_object;
                    object_pointer1_0 = (wxRibbonPage*) argument_native_object;
                    if (!object_pointer1_0 || (argument_type != PHP_WXRIBBONPAGE_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'page' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(page1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'page' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonBar::SetActivePage((size_t) page0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonBar_php*)native_object)->SetActivePage((size_t) page0));


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonBar::SetActivePage((wxRibbonPage*) object_pointer1_0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonBar_php*)native_object)->SetActivePage((wxRibbonPage*) object_pointer1_0));

                references->AddReference(page1, "wxRibbonBar::SetActivePage at call 1 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonBar::SetActivePage\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonBar::SetArtProvider(wxRibbonArtProvider &art)
   Set the art provider to be used be the ribbon bar. */
PHP_METHOD(php_wxRibbonBar, SetArtProvider)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonBar::SetArtProvider\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonBar::SetArtProvider call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBAR_TYPE){
                references = &((wxRibbonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* art0;
    wxRibbonArtProvider* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&art0)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &art0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(art0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRibbonArtProvider_P(art0)->object_type;
                    argument_native_object = (void*) Z_wxRibbonArtProvider_P(art0)->native_object;
                    object_pointer0_0 = (wxRibbonArtProvider*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXRIBBONARTPROVIDER_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'art' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(art0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'art' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonBar::SetArtProvider((wxRibbonArtProvider*) object_pointer0_0)\n\n");
                #endif

                ((wxRibbonBar_php*)native_object)->SetArtProvider((wxRibbonArtProvider*) object_pointer0_0);

                references->AddReference(art0, "wxRibbonBar::SetArtProvider at call 1 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonBar::SetArtProvider\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonBar::SetTabCtrlMargins(int left, int right)
   Set the margin widths (in pixels) on the left and right sides of the tab bar region of the ribbon bar. */
PHP_METHOD(php_wxRibbonBar, SetTabCtrlMargins)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonBar::SetTabCtrlMargins\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonBar::SetTabCtrlMargins call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBAR_TYPE){
                references = &((wxRibbonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long left0;
    long right0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&left0, &right0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &left0, &right0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonBar::SetTabCtrlMargins((int) left0, (int) right0)\n\n");
                #endif

                ((wxRibbonBar_php*)native_object)->SetTabCtrlMargins((int) left0, (int) right0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonBar::SetTabCtrlMargins\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonBar::ShowPanels(wxRibbonDisplayMode mode)
   Shows or hide the panel area of the ribbon bar according to the given display mode. */
PHP_METHOD(php_wxRibbonBar, ShowPanels)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonBar::ShowPanels\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonBar::ShowPanels call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBAR_TYPE){
                references = &((wxRibbonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long mode0;
    bool overload0_called = false;

    //Parameters for overload 1
    bool show1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&mode0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &mode0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 0  && arguments_received <= 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '|b' (&show1)\n");
        #endif

        char parse_parameters_string[] = "|b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &show1 ) == SUCCESS)
        {
            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonBar::ShowPanels((wxRibbonDisplayMode) mode0)\n\n");
                #endif

                ((wxRibbonBar_php*)native_object)->ShowPanels((wxRibbonDisplayMode) mode0);


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonBar::ShowPanels()\n\n");
                #endif

                ((wxRibbonBar_php*)native_object)->ShowPanels();


                return;
                break;
            }
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonBar::ShowPanels(show1)\n\n");
                #endif

                ((wxRibbonBar_php*)native_object)->ShowPanels(show1);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonBar::ShowPanels\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonBar::wxRibbonBar()
   Default constructor. */
PHP_METHOD(php_wxRibbonBar, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonBar::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonBar* current_object;
    wxRibbonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    bool overload0_called = false;

    //Parameters for overload 1
    zval* parent1;
    wxWindow* object_pointer1_0 = 0;
    long id1;
    zval* pos1;
    wxPoint* object_pointer1_2 = 0;
    zval* size1;
    wxSize* object_pointer1_3 = 0;
    long style1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 1  && arguments_received <= 5)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z|lOOl' (&parent1, &id1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1)\n");
        #endif

        char parse_parameters_string[] = "z|lOOl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent1, &id1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent1)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent1)->native_object;
                    object_pointer1_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer1_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(pos1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos1)->native_object;
                    object_pointer1_2 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(size1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size1)->native_object;
                    object_pointer1_3 = (wxSize*) argument_native_object;
                    if (!object_pointer1_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct()\n");
                #endif

                native_object = new wxRibbonBar_php();

                native_object->references.Initialize();
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0)\n");
                #endif

                native_object = new wxRibbonBar_php((wxWindow*) object_pointer1_0);

                native_object->references.Initialize();
                ((wxRibbonBar_php*) native_object)->references.AddReference(parent1, "wxRibbonBar::wxRibbonBar at call 2 with 1 argument(s)");
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1)\n");
                #endif

                native_object = new wxRibbonBar_php((wxWindow*) object_pointer1_0, (wxWindowID) id1);

                native_object->references.Initialize();
                ((wxRibbonBar_php*) native_object)->references.AddReference(parent1, "wxRibbonBar::wxRibbonBar at call 2 with 2 argument(s)");
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2)\n");
                #endif

                native_object = new wxRibbonBar_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2);

                native_object->references.Initialize();
                ((wxRibbonBar_php*) native_object)->references.AddReference(parent1, "wxRibbonBar::wxRibbonBar at call 2 with 3 argument(s)");
                ((wxRibbonBar_php*) native_object)->references.AddReference(pos1, "wxRibbonBar::wxRibbonBar at call 4 with 3 argument(s)");
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3)\n");
                #endif

                native_object = new wxRibbonBar_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3);

                native_object->references.Initialize();
                ((wxRibbonBar_php*) native_object)->references.AddReference(parent1, "wxRibbonBar::wxRibbonBar at call 2 with 4 argument(s)");
                ((wxRibbonBar_php*) native_object)->references.AddReference(pos1, "wxRibbonBar::wxRibbonBar at call 4 with 4 argument(s)");
                ((wxRibbonBar_php*) native_object)->references.AddReference(size1, "wxRibbonBar::wxRibbonBar at call 4 with 4 argument(s)");
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3, (long) style1)\n");
                #endif

                native_object = new wxRibbonBar_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3, (long) style1);

                native_object->references.Initialize();
                ((wxRibbonBar_php*) native_object)->references.AddReference(parent1, "wxRibbonBar::wxRibbonBar at call 2 with 5 argument(s)");
                ((wxRibbonBar_php*) native_object)->references.AddReference(pos1, "wxRibbonBar::wxRibbonBar at call 4 with 5 argument(s)");
                ((wxRibbonBar_php*) native_object)->references.AddReference(size1, "wxRibbonBar::wxRibbonBar at call 4 with 5 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxRibbonBar_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxRibbonBar::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxRibbonButtonBar_free(void *object)
{
    zo_wxRibbonButtonBar* custom_object = (zo_wxRibbonButtonBar*) object;

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Obviate delete call for wxRibbonButtonBar on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n\n");
    #endif

    zend_object_std_dtor(&custom_object->zo);
    efree(custom_object);
}

zend_object* php_wxRibbonButtonBar_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxRibbonButtonBar_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonButtonBar* custom_object;

    custom_object = (zo_wxRibbonButtonBar*) ecalloc(
        1,
        sizeof(zo_wxRibbonButtonBar)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    custom_object->zo.handlers = &wxphp_wxRibbonButtonBar_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXRIBBONBUTTONBAR_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto wxRibbonButtonBarButtonBase wxRibbonButtonBar::AddDropdownButton(int button_id, string label, wxBitmap bitmap, string help_string)
   Add a dropdown button to the button bar (simple version). */
PHP_METHOD(php_wxRibbonButtonBar, AddDropdownButton)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonButtonBar::AddDropdownButton\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonButtonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonButtonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonButtonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonButtonBar::AddDropdownButton call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE){
                references = &((wxRibbonButtonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long button_id0;
    char* label0;
    size_t label_len0;
    zval* bitmap0;
    wxBitmap* object_pointer0_2 = 0;
    char* help_string0;
    size_t help_string_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 3  && arguments_received <= 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lsO|s' (&button_id0, &label0, &label_len0, &bitmap0, php_wxBitmap_entry, &help_string0, &help_string_len0)\n");
        #endif

        char parse_parameters_string[] = "lsO|s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &button_id0, &label0, &label_len0, &bitmap0, php_wxBitmap_entry, &help_string0, &help_string_len0 ) == SUCCESS)
        {
            if(arguments_received >= 3){
                if(Z_TYPE_P(bitmap0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap0)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap0)->native_object;
                    object_pointer0_2 = (wxBitmap*) argument_native_object;
                    if (!object_pointer0_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'bitmap' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(bitmap0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'bitmap' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonButtonBar::AddDropdownButton((int) button_id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_2) to return object pointer\n\n");
                #endif

                wxRibbonButtonBarButtonBase_php* value_to_return3;
                value_to_return3 = (wxRibbonButtonBarButtonBase_php*) ((wxRibbonButtonBar_php*)native_object)->AddDropdownButton((int) button_id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_2);

                if(value_to_return3 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return3->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return3->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return3->phpObj);
                        zval_add_ref(&value_to_return3->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonButtonBarButtonBase_entry);
                    Z_wxRibbonButtonBarButtonBase_P(return_value)->native_object = (wxRibbonButtonBarButtonBase_php*) value_to_return3;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return3 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonButtonBar::AddDropdownButton at call 5 with 3 argument(s)");
                }

                references->AddReference(bitmap0, "wxRibbonButtonBar::AddDropdownButton at call 3 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonButtonBar::AddDropdownButton((int) button_id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_2, wxString(help_string0, wxConvUTF8)) to return object pointer\n\n");
                #endif

                wxRibbonButtonBarButtonBase_php* value_to_return4;
                value_to_return4 = (wxRibbonButtonBarButtonBase_php*) ((wxRibbonButtonBar_php*)native_object)->AddDropdownButton((int) button_id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_2, wxString(help_string0, wxConvUTF8));

                if(value_to_return4 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return4->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return4->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return4->phpObj);
                        zval_add_ref(&value_to_return4->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonButtonBarButtonBase_entry);
                    Z_wxRibbonButtonBarButtonBase_P(return_value)->native_object = (wxRibbonButtonBarButtonBase_php*) value_to_return4;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return4 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonButtonBar::AddDropdownButton at call 5 with 4 argument(s)");
                }

                references->AddReference(bitmap0, "wxRibbonButtonBar::AddDropdownButton at call 3 with 4 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonButtonBar::AddDropdownButton\n"
        );
    }
}
/* }}} */

/* {{{ proto wxRibbonButtonBarButtonBase wxRibbonButtonBar::AddHybridButton(int button_id, string label, wxBitmap bitmap, string help_string)
   Add a hybrid button to the button bar (simple version). */
PHP_METHOD(php_wxRibbonButtonBar, AddHybridButton)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonButtonBar::AddHybridButton\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonButtonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonButtonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonButtonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonButtonBar::AddHybridButton call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE){
                references = &((wxRibbonButtonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long button_id0;
    char* label0;
    size_t label_len0;
    zval* bitmap0;
    wxBitmap* object_pointer0_2 = 0;
    char* help_string0;
    size_t help_string_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 3  && arguments_received <= 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lsO|s' (&button_id0, &label0, &label_len0, &bitmap0, php_wxBitmap_entry, &help_string0, &help_string_len0)\n");
        #endif

        char parse_parameters_string[] = "lsO|s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &button_id0, &label0, &label_len0, &bitmap0, php_wxBitmap_entry, &help_string0, &help_string_len0 ) == SUCCESS)
        {
            if(arguments_received >= 3){
                if(Z_TYPE_P(bitmap0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap0)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap0)->native_object;
                    object_pointer0_2 = (wxBitmap*) argument_native_object;
                    if (!object_pointer0_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'bitmap' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(bitmap0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'bitmap' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonButtonBar::AddHybridButton((int) button_id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_2) to return object pointer\n\n");
                #endif

                wxRibbonButtonBarButtonBase_php* value_to_return3;
                value_to_return3 = (wxRibbonButtonBarButtonBase_php*) ((wxRibbonButtonBar_php*)native_object)->AddHybridButton((int) button_id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_2);

                if(value_to_return3 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return3->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return3->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return3->phpObj);
                        zval_add_ref(&value_to_return3->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonButtonBarButtonBase_entry);
                    Z_wxRibbonButtonBarButtonBase_P(return_value)->native_object = (wxRibbonButtonBarButtonBase_php*) value_to_return3;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return3 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonButtonBar::AddHybridButton at call 5 with 3 argument(s)");
                }

                references->AddReference(bitmap0, "wxRibbonButtonBar::AddHybridButton at call 3 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonButtonBar::AddHybridButton((int) button_id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_2, wxString(help_string0, wxConvUTF8)) to return object pointer\n\n");
                #endif

                wxRibbonButtonBarButtonBase_php* value_to_return4;
                value_to_return4 = (wxRibbonButtonBarButtonBase_php*) ((wxRibbonButtonBar_php*)native_object)->AddHybridButton((int) button_id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_2, wxString(help_string0, wxConvUTF8));

                if(value_to_return4 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return4->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return4->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return4->phpObj);
                        zval_add_ref(&value_to_return4->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonButtonBarButtonBase_entry);
                    Z_wxRibbonButtonBarButtonBase_P(return_value)->native_object = (wxRibbonButtonBarButtonBase_php*) value_to_return4;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return4 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonButtonBar::AddHybridButton at call 5 with 4 argument(s)");
                }

                references->AddReference(bitmap0, "wxRibbonButtonBar::AddHybridButton at call 3 with 4 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonButtonBar::AddHybridButton\n"
        );
    }
}
/* }}} */

/* {{{ proto wxRibbonButtonBarButtonBase wxRibbonButtonBar::AddToggleButton(int button_id, string label, wxBitmap bitmap, string help_string)
   Add a toggle button to the button bar (simple version). */
PHP_METHOD(php_wxRibbonButtonBar, AddToggleButton)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonButtonBar::AddToggleButton\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonButtonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonButtonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonButtonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonButtonBar::AddToggleButton call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE){
                references = &((wxRibbonButtonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long button_id0;
    char* label0;
    size_t label_len0;
    zval* bitmap0;
    wxBitmap* object_pointer0_2 = 0;
    char* help_string0;
    size_t help_string_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 3  && arguments_received <= 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lsO|s' (&button_id0, &label0, &label_len0, &bitmap0, php_wxBitmap_entry, &help_string0, &help_string_len0)\n");
        #endif

        char parse_parameters_string[] = "lsO|s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &button_id0, &label0, &label_len0, &bitmap0, php_wxBitmap_entry, &help_string0, &help_string_len0 ) == SUCCESS)
        {
            if(arguments_received >= 3){
                if(Z_TYPE_P(bitmap0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap0)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap0)->native_object;
                    object_pointer0_2 = (wxBitmap*) argument_native_object;
                    if (!object_pointer0_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'bitmap' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(bitmap0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'bitmap' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonButtonBar::AddToggleButton((int) button_id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_2) to return object pointer\n\n");
                #endif

                wxRibbonButtonBarButtonBase_php* value_to_return3;
                value_to_return3 = (wxRibbonButtonBarButtonBase_php*) ((wxRibbonButtonBar_php*)native_object)->AddToggleButton((int) button_id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_2);

                if(value_to_return3 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return3->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return3->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return3->phpObj);
                        zval_add_ref(&value_to_return3->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonButtonBarButtonBase_entry);
                    Z_wxRibbonButtonBarButtonBase_P(return_value)->native_object = (wxRibbonButtonBarButtonBase_php*) value_to_return3;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return3 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonButtonBar::AddToggleButton at call 5 with 3 argument(s)");
                }

                references->AddReference(bitmap0, "wxRibbonButtonBar::AddToggleButton at call 3 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonButtonBar::AddToggleButton((int) button_id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_2, wxString(help_string0, wxConvUTF8)) to return object pointer\n\n");
                #endif

                wxRibbonButtonBarButtonBase_php* value_to_return4;
                value_to_return4 = (wxRibbonButtonBarButtonBase_php*) ((wxRibbonButtonBar_php*)native_object)->AddToggleButton((int) button_id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_2, wxString(help_string0, wxConvUTF8));

                if(value_to_return4 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return4->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return4->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return4->phpObj);
                        zval_add_ref(&value_to_return4->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonButtonBarButtonBase_entry);
                    Z_wxRibbonButtonBarButtonBase_P(return_value)->native_object = (wxRibbonButtonBarButtonBase_php*) value_to_return4;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return4 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonButtonBar::AddToggleButton at call 5 with 4 argument(s)");
                }

                references->AddReference(bitmap0, "wxRibbonButtonBar::AddToggleButton at call 3 with 4 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonButtonBar::AddToggleButton\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonButtonBar::ClearButtons()
   Delete all buttons from the button bar. */
PHP_METHOD(php_wxRibbonButtonBar, ClearButtons)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonButtonBar::ClearButtons\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonButtonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonButtonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonButtonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonButtonBar::ClearButtons call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE){
                references = &((wxRibbonButtonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonButtonBar::ClearButtons()\n\n");
                #endif

                ((wxRibbonButtonBar_php*)native_object)->ClearButtons();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonButtonBar::ClearButtons\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonButtonBar::Create(wxWindow &parent, int id, wxPoint pos, wxSize size, int style)
   Create a button bar in two-step button bar construction. */
PHP_METHOD(php_wxRibbonButtonBar, Create)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonButtonBar::Create\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonButtonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonButtonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonButtonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonButtonBar::Create call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE){
                references = &((wxRibbonButtonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* parent0;
    wxWindow* object_pointer0_0 = 0;
    long id0;
    zval* pos0;
    wxPoint* object_pointer0_2 = 0;
    zval* size0;
    wxSize* object_pointer0_3 = 0;
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 5)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z|lOOl' (&parent0, &id0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0)\n");
        #endif

        char parse_parameters_string[] = "z|lOOl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent0, &id0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(pos0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos0)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos0)->native_object;
                    object_pointer0_2 = (wxPoint*) argument_native_object;
                    if (!object_pointer0_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(size0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size0)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size0)->native_object;
                    object_pointer0_3 = (wxSize*) argument_native_object;
                    if (!object_pointer0_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonButtonBar::Create((wxWindow*) object_pointer0_0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonButtonBar_php*)native_object)->Create((wxWindow*) object_pointer0_0));

                references->AddReference(parent0, "wxRibbonButtonBar::Create at call 1 with 1 argument(s)");

                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonButtonBar::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonButtonBar_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0));

                references->AddReference(parent0, "wxRibbonButtonBar::Create at call 1 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonButtonBar::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonButtonBar_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2));

                references->AddReference(parent0, "wxRibbonButtonBar::Create at call 1 with 3 argument(s)");
                references->AddReference(pos0, "wxRibbonButtonBar::Create at call 3 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonButtonBar::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonButtonBar_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3));

                references->AddReference(parent0, "wxRibbonButtonBar::Create at call 1 with 4 argument(s)");
                references->AddReference(pos0, "wxRibbonButtonBar::Create at call 3 with 4 argument(s)");
                references->AddReference(size0, "wxRibbonButtonBar::Create at call 3 with 4 argument(s)");

                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonButtonBar::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3, (long) style0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonButtonBar_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3, (long) style0));

                references->AddReference(parent0, "wxRibbonButtonBar::Create at call 1 with 5 argument(s)");
                references->AddReference(pos0, "wxRibbonButtonBar::Create at call 3 with 5 argument(s)");
                references->AddReference(size0, "wxRibbonButtonBar::Create at call 3 with 5 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonButtonBar::Create\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonButtonBar::DeleteButton(int button_id)
   Delete a single button from the button bar. */
PHP_METHOD(php_wxRibbonButtonBar, DeleteButton)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonButtonBar::DeleteButton\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonButtonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonButtonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonButtonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonButtonBar::DeleteButton call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE){
                references = &((wxRibbonButtonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long button_id0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&button_id0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &button_id0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonButtonBar::DeleteButton((int) button_id0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonButtonBar_php*)native_object)->DeleteButton((int) button_id0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonButtonBar::DeleteButton\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonButtonBar::EnableButton(int button_id, bool enable)
   Enable or disable a single button on the bar. */
PHP_METHOD(php_wxRibbonButtonBar, EnableButton)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonButtonBar::EnableButton\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonButtonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonButtonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonButtonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonButtonBar::EnableButton call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE){
                references = &((wxRibbonButtonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long button_id0;
    bool enable0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l|b' (&button_id0, &enable0)\n");
        #endif

        char parse_parameters_string[] = "l|b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &button_id0, &enable0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonButtonBar::EnableButton((int) button_id0)\n\n");
                #endif

                ((wxRibbonButtonBar_php*)native_object)->EnableButton((int) button_id0);


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonButtonBar::EnableButton((int) button_id0, enable0)\n\n");
                #endif

                ((wxRibbonButtonBar_php*)native_object)->EnableButton((int) button_id0, enable0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonButtonBar::EnableButton\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonButtonBar::Realize()
   Calculate button layouts and positions. */
PHP_METHOD(php_wxRibbonButtonBar, Realize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonButtonBar::Realize\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonButtonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonButtonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonButtonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonButtonBar::Realize call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE){
                references = &((wxRibbonButtonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonButtonBar::Realize())\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonButtonBar_php*)native_object)->Realize());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonButtonBar::Realize\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonButtonBar::ToggleButton(int button_id, bool checked)
   Set a toggle button to the checked or unchecked state. */
PHP_METHOD(php_wxRibbonButtonBar, ToggleButton)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonButtonBar::ToggleButton\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonButtonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonButtonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonButtonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonButtonBar::ToggleButton call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE){
                references = &((wxRibbonButtonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long button_id0;
    bool checked0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lb' (&button_id0, &checked0)\n");
        #endif

        char parse_parameters_string[] = "lb";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &button_id0, &checked0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonButtonBar::ToggleButton((int) button_id0, checked0)\n\n");
                #endif

                ((wxRibbonButtonBar_php*)native_object)->ToggleButton((int) button_id0, checked0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonButtonBar::ToggleButton\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonButtonBar::wxRibbonButtonBar()
   Default constructor. */
PHP_METHOD(php_wxRibbonButtonBar, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonButtonBar::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonButtonBar* current_object;
    wxRibbonButtonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    bool overload0_called = false;

    //Parameters for overload 1
    zval* parent1;
    wxWindow* object_pointer1_0 = 0;
    long id1;
    zval* pos1;
    wxPoint* object_pointer1_2 = 0;
    zval* size1;
    wxSize* object_pointer1_3 = 0;
    long style1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 1  && arguments_received <= 5)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z|lOOl' (&parent1, &id1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1)\n");
        #endif

        char parse_parameters_string[] = "z|lOOl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent1, &id1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent1)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent1)->native_object;
                    object_pointer1_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer1_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(pos1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos1)->native_object;
                    object_pointer1_2 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(size1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size1)->native_object;
                    object_pointer1_3 = (wxSize*) argument_native_object;
                    if (!object_pointer1_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct()\n");
                #endif

                native_object = new wxRibbonButtonBar_php();

                native_object->references.Initialize();
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0)\n");
                #endif

                native_object = new wxRibbonButtonBar_php((wxWindow*) object_pointer1_0);

                native_object->references.Initialize();
                ((wxRibbonButtonBar_php*) native_object)->references.AddReference(parent1, "wxRibbonButtonBar::wxRibbonButtonBar at call 2 with 1 argument(s)");
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1)\n");
                #endif

                native_object = new wxRibbonButtonBar_php((wxWindow*) object_pointer1_0, (wxWindowID) id1);

                native_object->references.Initialize();
                ((wxRibbonButtonBar_php*) native_object)->references.AddReference(parent1, "wxRibbonButtonBar::wxRibbonButtonBar at call 2 with 2 argument(s)");
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2)\n");
                #endif

                native_object = new wxRibbonButtonBar_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2);

                native_object->references.Initialize();
                ((wxRibbonButtonBar_php*) native_object)->references.AddReference(parent1, "wxRibbonButtonBar::wxRibbonButtonBar at call 2 with 3 argument(s)");
                ((wxRibbonButtonBar_php*) native_object)->references.AddReference(pos1, "wxRibbonButtonBar::wxRibbonButtonBar at call 4 with 3 argument(s)");
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3)\n");
                #endif

                native_object = new wxRibbonButtonBar_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3);

                native_object->references.Initialize();
                ((wxRibbonButtonBar_php*) native_object)->references.AddReference(parent1, "wxRibbonButtonBar::wxRibbonButtonBar at call 2 with 4 argument(s)");
                ((wxRibbonButtonBar_php*) native_object)->references.AddReference(pos1, "wxRibbonButtonBar::wxRibbonButtonBar at call 4 with 4 argument(s)");
                ((wxRibbonButtonBar_php*) native_object)->references.AddReference(size1, "wxRibbonButtonBar::wxRibbonButtonBar at call 4 with 4 argument(s)");
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3, (long) style1)\n");
                #endif

                native_object = new wxRibbonButtonBar_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3, (long) style1);

                native_object->references.Initialize();
                ((wxRibbonButtonBar_php*) native_object)->references.AddReference(parent1, "wxRibbonButtonBar::wxRibbonButtonBar at call 2 with 5 argument(s)");
                ((wxRibbonButtonBar_php*) native_object)->references.AddReference(pos1, "wxRibbonButtonBar::wxRibbonButtonBar at call 4 with 5 argument(s)");
                ((wxRibbonButtonBar_php*) native_object)->references.AddReference(size1, "wxRibbonButtonBar::wxRibbonButtonBar at call 4 with 5 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxRibbonButtonBar_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxRibbonButtonBar::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

/* {{{ proto wxRibbonButtonBarButtonBase wxRibbonButtonBar::AddButton(int button_id, string label, wxBitmap bitmap, string help_string, wxRibbonButtonKind kind)
   Add a button to the button bar (simple version). */
PHP_METHOD(php_wxRibbonButtonBar, AddButton)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonButtonBar::AddButton\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonButtonBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonButtonBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonButtonBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonButtonBar::AddButton call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE){
                references = &((wxRibbonButtonBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long button_id0;
    char* label0;
    size_t label_len0;
    zval* bitmap0;
    wxBitmap* object_pointer0_2 = 0;
    char* help_string0;
    size_t help_string_len0;
    long kind0;
    bool overload0_called = false;

    //Parameters for overload 1
    long button_id1;
    char* label1;
    size_t label_len1;
    zval* bitmap1;
    wxBitmap* object_pointer1_2 = 0;
    zval* bitmap_small1;
    wxBitmap* object_pointer1_3 = 0;
    zval* bitmap_disabled1;
    wxBitmap* object_pointer1_4 = 0;
    zval* bitmap_small_disabled1;
    wxBitmap* object_pointer1_5 = 0;
    long kind1;
    char* help_string1;
    size_t help_string_len1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 4  && arguments_received <= 5)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lsOs|l' (&button_id0, &label0, &label_len0, &bitmap0, php_wxBitmap_entry, &help_string0, &help_string_len0, &kind0)\n");
        #endif

        char parse_parameters_string[] = "lsOs|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &button_id0, &label0, &label_len0, &bitmap0, php_wxBitmap_entry, &help_string0, &help_string_len0, &kind0 ) == SUCCESS)
        {
            if(arguments_received >= 3){
                if(Z_TYPE_P(bitmap0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap0)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap0)->native_object;
                    object_pointer0_2 = (wxBitmap*) argument_native_object;
                    if (!object_pointer0_2 )
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(bitmap0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 3  && arguments_received <= 8)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lsO|OOOls' (&button_id1, &label1, &label_len1, &bitmap1, php_wxBitmap_entry, &bitmap_small1, php_wxBitmap_entry, &bitmap_disabled1, php_wxBitmap_entry, &bitmap_small_disabled1, php_wxBitmap_entry, &kind1, &help_string1, &help_string_len1)\n");
        #endif

        char parse_parameters_string[] = "lsO|OOOls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &button_id1, &label1, &label_len1, &bitmap1, php_wxBitmap_entry, &bitmap_small1, php_wxBitmap_entry, &bitmap_disabled1, php_wxBitmap_entry, &bitmap_small_disabled1, php_wxBitmap_entry, &kind1, &help_string1, &help_string_len1 ) == SUCCESS)
        {
            if(arguments_received >= 3){
                if(Z_TYPE_P(bitmap1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap1)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap1)->native_object;
                    object_pointer1_2 = (wxBitmap*) argument_native_object;
                    if (!object_pointer1_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'bitmap' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(bitmap1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'bitmap' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(bitmap_small1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap_small1)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap_small1)->native_object;
                    object_pointer1_3 = (wxBitmap*) argument_native_object;
                    if (!object_pointer1_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'bitmap_small' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(bitmap_small1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'bitmap_small' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 5){
                if(Z_TYPE_P(bitmap_disabled1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap_disabled1)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap_disabled1)->native_object;
                    object_pointer1_4 = (wxBitmap*) argument_native_object;
                    if (!object_pointer1_4 )
                    {
                        zend_error(E_ERROR, "Parameter 'bitmap_disabled' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(bitmap_disabled1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'bitmap_disabled' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 6){
                if(Z_TYPE_P(bitmap_small_disabled1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap_small_disabled1)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap_small_disabled1)->native_object;
                    object_pointer1_5 = (wxBitmap*) argument_native_object;
                    if (!object_pointer1_5 )
                    {
                        zend_error(E_ERROR, "Parameter 'bitmap_small_disabled' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(bitmap_small_disabled1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'bitmap_small_disabled' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonButtonBar::AddButton((int) button_id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_2, wxString(help_string0, wxConvUTF8)) to return object pointer\n\n");
                #endif

                wxRibbonButtonBarButtonBase_php* value_to_return4;
                value_to_return4 = (wxRibbonButtonBarButtonBase_php*) ((wxRibbonButtonBar_php*)native_object)->AddButton((int) button_id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_2, wxString(help_string0, wxConvUTF8));

                if(value_to_return4 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return4->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return4->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return4->phpObj);
                        zval_add_ref(&value_to_return4->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonButtonBarButtonBase_entry);
                    Z_wxRibbonButtonBarButtonBase_P(return_value)->native_object = (wxRibbonButtonBarButtonBase_php*) value_to_return4;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return4 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonButtonBar::AddButton at call 5 with 4 argument(s)");
                }

                references->AddReference(bitmap0, "wxRibbonButtonBar::AddButton at call 3 with 4 argument(s)");

                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonButtonBar::AddButton((int) button_id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_2, wxString(help_string0, wxConvUTF8), (wxRibbonButtonKind) kind0) to return object pointer\n\n");
                #endif

                wxRibbonButtonBarButtonBase_php* value_to_return5;
                value_to_return5 = (wxRibbonButtonBarButtonBase_php*) ((wxRibbonButtonBar_php*)native_object)->AddButton((int) button_id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_2, wxString(help_string0, wxConvUTF8), (wxRibbonButtonKind) kind0);

                if(value_to_return5 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return5->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return5->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return5->phpObj);
                        zval_add_ref(&value_to_return5->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonButtonBarButtonBase_entry);
                    Z_wxRibbonButtonBarButtonBase_P(return_value)->native_object = (wxRibbonButtonBarButtonBase_php*) value_to_return5;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return5 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonButtonBar::AddButton at call 5 with 5 argument(s)");
                }

                references->AddReference(bitmap0, "wxRibbonButtonBar::AddButton at call 3 with 5 argument(s)");

                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonButtonBar::AddButton((int) button_id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_2) to return object pointer\n\n");
                #endif

                wxRibbonButtonBarButtonBase_php* value_to_return3;
                value_to_return3 = (wxRibbonButtonBarButtonBase_php*) ((wxRibbonButtonBar_php*)native_object)->AddButton((int) button_id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_2);

                if(value_to_return3 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return3->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return3->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return3->phpObj);
                        zval_add_ref(&value_to_return3->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonButtonBarButtonBase_entry);
                    Z_wxRibbonButtonBarButtonBase_P(return_value)->native_object = (wxRibbonButtonBarButtonBase_php*) value_to_return3;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return3 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonButtonBar::AddButton at call 5 with 3 argument(s)");
                }

                references->AddReference(bitmap1, "wxRibbonButtonBar::AddButton at call 3 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonButtonBar::AddButton((int) button_id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_2, *(wxBitmap*) object_pointer1_3) to return object pointer\n\n");
                #endif

                wxRibbonButtonBarButtonBase_php* value_to_return4;
                value_to_return4 = (wxRibbonButtonBarButtonBase_php*) ((wxRibbonButtonBar_php*)native_object)->AddButton((int) button_id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_2, *(wxBitmap*) object_pointer1_3);

                if(value_to_return4 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return4->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return4->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return4->phpObj);
                        zval_add_ref(&value_to_return4->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonButtonBarButtonBase_entry);
                    Z_wxRibbonButtonBarButtonBase_P(return_value)->native_object = (wxRibbonButtonBarButtonBase_php*) value_to_return4;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return4 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonButtonBar::AddButton at call 5 with 4 argument(s)");
                }

                references->AddReference(bitmap1, "wxRibbonButtonBar::AddButton at call 3 with 4 argument(s)");
                references->AddReference(bitmap_small1, "wxRibbonButtonBar::AddButton at call 3 with 4 argument(s)");

                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonButtonBar::AddButton((int) button_id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_2, *(wxBitmap*) object_pointer1_3, *(wxBitmap*) object_pointer1_4) to return object pointer\n\n");
                #endif

                wxRibbonButtonBarButtonBase_php* value_to_return5;
                value_to_return5 = (wxRibbonButtonBarButtonBase_php*) ((wxRibbonButtonBar_php*)native_object)->AddButton((int) button_id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_2, *(wxBitmap*) object_pointer1_3, *(wxBitmap*) object_pointer1_4);

                if(value_to_return5 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return5->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return5->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return5->phpObj);
                        zval_add_ref(&value_to_return5->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonButtonBarButtonBase_entry);
                    Z_wxRibbonButtonBarButtonBase_P(return_value)->native_object = (wxRibbonButtonBarButtonBase_php*) value_to_return5;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return5 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonButtonBar::AddButton at call 5 with 5 argument(s)");
                }

                references->AddReference(bitmap1, "wxRibbonButtonBar::AddButton at call 3 with 5 argument(s)");
                references->AddReference(bitmap_small1, "wxRibbonButtonBar::AddButton at call 3 with 5 argument(s)");
                references->AddReference(bitmap_disabled1, "wxRibbonButtonBar::AddButton at call 3 with 5 argument(s)");

                return;
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonButtonBar::AddButton((int) button_id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_2, *(wxBitmap*) object_pointer1_3, *(wxBitmap*) object_pointer1_4, *(wxBitmap*) object_pointer1_5) to return object pointer\n\n");
                #endif

                wxRibbonButtonBarButtonBase_php* value_to_return6;
                value_to_return6 = (wxRibbonButtonBarButtonBase_php*) ((wxRibbonButtonBar_php*)native_object)->AddButton((int) button_id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_2, *(wxBitmap*) object_pointer1_3, *(wxBitmap*) object_pointer1_4, *(wxBitmap*) object_pointer1_5);

                if(value_to_return6 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return6->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return6->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return6->phpObj);
                        zval_add_ref(&value_to_return6->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonButtonBarButtonBase_entry);
                    Z_wxRibbonButtonBarButtonBase_P(return_value)->native_object = (wxRibbonButtonBarButtonBase_php*) value_to_return6;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return6 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonButtonBar::AddButton at call 5 with 6 argument(s)");
                }

                references->AddReference(bitmap1, "wxRibbonButtonBar::AddButton at call 3 with 6 argument(s)");
                references->AddReference(bitmap_small1, "wxRibbonButtonBar::AddButton at call 3 with 6 argument(s)");
                references->AddReference(bitmap_disabled1, "wxRibbonButtonBar::AddButton at call 3 with 6 argument(s)");
                references->AddReference(bitmap_small_disabled1, "wxRibbonButtonBar::AddButton at call 3 with 6 argument(s)");

                return;
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonButtonBar::AddButton((int) button_id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_2, *(wxBitmap*) object_pointer1_3, *(wxBitmap*) object_pointer1_4, *(wxBitmap*) object_pointer1_5, (wxRibbonButtonKind) kind1) to return object pointer\n\n");
                #endif

                wxRibbonButtonBarButtonBase_php* value_to_return7;
                value_to_return7 = (wxRibbonButtonBarButtonBase_php*) ((wxRibbonButtonBar_php*)native_object)->AddButton((int) button_id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_2, *(wxBitmap*) object_pointer1_3, *(wxBitmap*) object_pointer1_4, *(wxBitmap*) object_pointer1_5, (wxRibbonButtonKind) kind1);

                if(value_to_return7 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return7->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return7->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return7->phpObj);
                        zval_add_ref(&value_to_return7->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonButtonBarButtonBase_entry);
                    Z_wxRibbonButtonBarButtonBase_P(return_value)->native_object = (wxRibbonButtonBarButtonBase_php*) value_to_return7;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return7 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonButtonBar::AddButton at call 5 with 7 argument(s)");
                }

                references->AddReference(bitmap1, "wxRibbonButtonBar::AddButton at call 3 with 7 argument(s)");
                references->AddReference(bitmap_small1, "wxRibbonButtonBar::AddButton at call 3 with 7 argument(s)");
                references->AddReference(bitmap_disabled1, "wxRibbonButtonBar::AddButton at call 3 with 7 argument(s)");
                references->AddReference(bitmap_small_disabled1, "wxRibbonButtonBar::AddButton at call 3 with 7 argument(s)");

                return;
                break;
            }
            case 8:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonButtonBar::AddButton((int) button_id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_2, *(wxBitmap*) object_pointer1_3, *(wxBitmap*) object_pointer1_4, *(wxBitmap*) object_pointer1_5, (wxRibbonButtonKind) kind1, wxString(help_string1, wxConvUTF8)) to return object pointer\n\n");
                #endif

                wxRibbonButtonBarButtonBase_php* value_to_return8;
                value_to_return8 = (wxRibbonButtonBarButtonBase_php*) ((wxRibbonButtonBar_php*)native_object)->AddButton((int) button_id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_2, *(wxBitmap*) object_pointer1_3, *(wxBitmap*) object_pointer1_4, *(wxBitmap*) object_pointer1_5, (wxRibbonButtonKind) kind1, wxString(help_string1, wxConvUTF8));

                if(value_to_return8 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return8->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return8->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return8->phpObj);
                        zval_add_ref(&value_to_return8->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonButtonBarButtonBase_entry);
                    Z_wxRibbonButtonBarButtonBase_P(return_value)->native_object = (wxRibbonButtonBarButtonBase_php*) value_to_return8;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return8 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonButtonBar::AddButton at call 5 with 8 argument(s)");
                }

                references->AddReference(bitmap1, "wxRibbonButtonBar::AddButton at call 3 with 8 argument(s)");
                references->AddReference(bitmap_small1, "wxRibbonButtonBar::AddButton at call 3 with 8 argument(s)");
                references->AddReference(bitmap_disabled1, "wxRibbonButtonBar::AddButton at call 3 with 8 argument(s)");
                references->AddReference(bitmap_small_disabled1, "wxRibbonButtonBar::AddButton at call 3 with 8 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonButtonBar::AddButton\n"
        );
    }
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxRibbonControl_free(void *object)
{
    zo_wxRibbonControl* custom_object = (zo_wxRibbonControl*) object;

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Obviate delete call for wxRibbonControl on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n\n");
    #endif

    zend_object_std_dtor(&custom_object->zo);
    efree(custom_object);
}

zend_object* php_wxRibbonControl_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxRibbonControl_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonControl* custom_object;

    custom_object = (zo_wxRibbonControl*) ecalloc(
        1,
        sizeof(zo_wxRibbonControl)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    custom_object->zo.handlers = &wxphp_wxRibbonControl_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXRIBBONCONTROL_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto wxSize wxRibbonControl::DoGetNextLargerSize(wxOrientation direction, wxSize relative_to)
   Implementation of GetNextLargerSize(). */
wxSize wxRibbonControl_php::DoGetNextLargerSize(wxOrientation direction, wxSize relative_to)const
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonControl::DoGetNextLargerSize\n");
    php_printf("===========================================\n");
    #endif

    zval* params[2];
    zval arguments[2];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "DoGetNextLargerSize");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    ZVAL_LONG(&arguments[0], direction);
    object_init_ex(&arguments[1], php_wxSize_entry);
    Z_wxSize_P(&arguments[1])->native_object = (wxSize_php*) &relative_to;
    
    for(int i=0; i<2; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "DoGetNextLargerSize");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "DoGetNextLargerSize",
            19,
            &function_return_value,
            2,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<2; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

    }
    else
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Returning userspace value.\n");
        #endif

        if(Z_TYPE(function_return_value) == IS_OBJECT)
    {
        return_object = (void*) Z_wxSize_P(&function_return_value)->native_object;
    }

    //Threat it as a normal object on the calling function and not a php user space intiialized one
    Z_wxSize_P(&function_return_value)->is_user_initialized = 0;
    wxSize_php* var = (wxSize_php*) return_object;
    var->references.UnInitialize();

    return *(wxSize*) return_object;
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Calling original method\n");
    php_printf("===========================================\n\n");
    #endif

    //Call original method
    return wxRibbonControl::DoGetNextLargerSize(
        direction, relative_to    );
}
/* }}} */

/* {{{ proto wxSize wxRibbonControl::DoGetNextSmallerSize(wxOrientation direction, wxSize relative_to)
   Implementation of GetNextSmallerSize(). */
wxSize wxRibbonControl_php::DoGetNextSmallerSize(wxOrientation direction, wxSize relative_to)const
{
    static zend_function* cached_function = NULL;
    static bool is_php_user_space_implemented = true;

    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking virtual wxRibbonControl::DoGetNextSmallerSize\n");
    php_printf("===========================================\n");
    #endif

    zval* params[2];
    zval arguments[2];

    zval function_return_value;
    zval function_name;
    ZVAL_STRING(&function_name, "DoGetNextSmallerSize");
    char* temp_string;
    void* return_object;
    int function_called;

    //Parameters for conversion
    ZVAL_LONG(&arguments[0], direction);
    object_init_ex(&arguments[1], php_wxSize_entry);
    Z_wxSize_P(&arguments[1])->native_object = (wxSize_php*) &relative_to;
    
    for(int i=0; i<2; i++)
    {
        params[i] = &arguments[i];
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Trying to call user defined method '%s'", "DoGetNextSmallerSize");

    if (this->phpObj.value.obj->ce == NULL) {
    php_printf(" on NULL!\n");
    } else {
    php_printf(" on %s\n", ZSTR_VAL(this->phpObj.value.obj->ce->name));
    }
    #endif

    if(is_php_user_space_implemented)
    {
        function_called = wxphp_call_method(
            (zval*)&this->phpObj,
            NULL,
            &cached_function,
            "DoGetNextSmallerSize",
            20,
            &function_return_value,
            2,
            params
        );
    }
    else
    {
        function_called = FAILURE;
    }

    
    //Delete already used parameters from memory
    for(int i=0; i<2; i++)
    {
        zval_ptr_dtor(&arguments[i]);
    }

    if(function_called == FAILURE)
    {
        is_php_user_space_implemented = false;

        #ifdef USE_WXPHP_DEBUG
        php_printf("Invocation of user defined method failed\n");
        #endif

    }
    else
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Returning userspace value.\n");
        #endif

        if(Z_TYPE(function_return_value) == IS_OBJECT)
    {
        return_object = (void*) Z_wxSize_P(&function_return_value)->native_object;
    }

    //Threat it as a normal object on the calling function and not a php user space intiialized one
    Z_wxSize_P(&function_return_value)->is_user_initialized = 0;
    wxSize_php* var = (wxSize_php*) return_object;
    var->references.UnInitialize();

    return *(wxSize*) return_object;
    }

    #ifdef USE_WXPHP_DEBUG
    php_printf("Calling original method\n");
    php_printf("===========================================\n\n");
    #endif

    //Call original method
    return wxRibbonControl::DoGetNextSmallerSize(
        direction, relative_to    );
}
/* }}} */

/* {{{ proto wxRibbonArtProvider wxRibbonControl::GetArtProvider()
   Get the art provider to be used. */
PHP_METHOD(php_wxRibbonControl, GetArtProvider)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonControl::GetArtProvider\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonControl* current_object;
    wxphp_object_type current_object_type;
    wxRibbonControl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonControl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonControl::GetArtProvider call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONCONTROL_TYPE){
                references = &((wxRibbonControl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonBar_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonButtonBar_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
                references = &((wxRibbonPage_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
                references = &((wxRibbonPanel_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonToolBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonControl::GetArtProvider() to return object pointer\n\n");
                #endif

                wxRibbonArtProvider_php* value_to_return0;
                value_to_return0 = (wxRibbonArtProvider_php*) ((wxRibbonControl_php*)native_object)->GetArtProvider();

                if(value_to_return0 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return0->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return0->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return0->phpObj);
                        zval_add_ref(&value_to_return0->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonArtProvider_entry);
                    Z_wxRibbonArtProvider_P(return_value)->native_object = (wxRibbonArtProvider_php*) value_to_return0;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonControl::GetArtProvider at call 5 with 0 argument(s)");
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonControl::GetArtProvider\n"
        );
    }
}
/* }}} */

/* {{{ proto wxSize wxRibbonControl::GetNextLargerSize(wxOrientation direction)
   If sizing is not continuous, then return a suitable size for the control which is larger than the current size. */
PHP_METHOD(php_wxRibbonControl, GetNextLargerSize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonControl::GetNextLargerSize\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonControl* current_object;
    wxphp_object_type current_object_type;
    wxRibbonControl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonControl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonControl::GetNextLargerSize call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONCONTROL_TYPE){
                references = &((wxRibbonControl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonBar_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonButtonBar_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
                references = &((wxRibbonPage_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
                references = &((wxRibbonPanel_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonToolBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long direction0;
    bool overload0_called = false;

    //Parameters for overload 1
    long direction1;
    zval* relative_to1;
    wxSize* object_pointer1_1 = 0;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&direction0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &direction0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lO' (&direction1, &relative_to1, php_wxSize_entry)\n");
        #endif

        char parse_parameters_string[] = "lO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &direction1, &relative_to1, php_wxSize_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(relative_to1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(relative_to1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(relative_to1)->native_object;
                    object_pointer1_1 = (wxSize*) argument_native_object;
                    if (!object_pointer1_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'relative_to' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(relative_to1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'relative_to' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonControl::GetNextLargerSize((wxOrientation) direction0) to return new object\n\n");
                #endif

                wxSize value_to_return1;
                value_to_return1 = ((wxRibbonControl_php*)native_object)->GetNextLargerSize((wxOrientation) direction0);
                void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                object_init_ex(return_value, php_wxSize_entry);
                ((wxSize_php*)ptr)->phpObj = *return_value;
                zo_wxSize* zo1 = Z_wxSize_P(return_value);
                zo1->native_object = (wxSize_php*) ptr;


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonControl::GetNextLargerSize((wxOrientation) direction1, *(wxSize*) object_pointer1_1) to return new object\n\n");
                #endif

                wxSize value_to_return2;
                value_to_return2 = ((wxRibbonControl_php*)native_object)->GetNextLargerSize((wxOrientation) direction1, *(wxSize*) object_pointer1_1);
                void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                memcpy(ptr, (void*) &value_to_return2, sizeof(wxSize));
                object_init_ex(return_value, php_wxSize_entry);
                ((wxSize_php*)ptr)->phpObj = *return_value;
                zo_wxSize* zo2 = Z_wxSize_P(return_value);
                zo2->native_object = (wxSize_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonControl::GetNextLargerSize\n"
        );
    }
}
/* }}} */

/* {{{ proto wxSize wxRibbonControl::GetNextSmallerSize(wxOrientation direction)
   If sizing is not continuous, then return a suitable size for the control which is smaller than the current size. */
PHP_METHOD(php_wxRibbonControl, GetNextSmallerSize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonControl::GetNextSmallerSize\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonControl* current_object;
    wxphp_object_type current_object_type;
    wxRibbonControl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonControl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonControl::GetNextSmallerSize call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONCONTROL_TYPE){
                references = &((wxRibbonControl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonBar_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonButtonBar_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
                references = &((wxRibbonPage_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
                references = &((wxRibbonPanel_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonToolBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long direction0;
    bool overload0_called = false;

    //Parameters for overload 1
    long direction1;
    zval* relative_to1;
    wxSize* object_pointer1_1 = 0;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&direction0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &direction0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lO' (&direction1, &relative_to1, php_wxSize_entry)\n");
        #endif

        char parse_parameters_string[] = "lO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &direction1, &relative_to1, php_wxSize_entry ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(relative_to1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(relative_to1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(relative_to1)->native_object;
                    object_pointer1_1 = (wxSize*) argument_native_object;
                    if (!object_pointer1_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'relative_to' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(relative_to1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'relative_to' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonControl::GetNextSmallerSize((wxOrientation) direction0) to return new object\n\n");
                #endif

                wxSize value_to_return1;
                value_to_return1 = ((wxRibbonControl_php*)native_object)->GetNextSmallerSize((wxOrientation) direction0);
                void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                memcpy(ptr, (void*) &value_to_return1, sizeof(wxSize));
                object_init_ex(return_value, php_wxSize_entry);
                ((wxSize_php*)ptr)->phpObj = *return_value;
                zo_wxSize* zo1 = Z_wxSize_P(return_value);
                zo1->native_object = (wxSize_php*) ptr;


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonControl::GetNextSmallerSize((wxOrientation) direction1, *(wxSize*) object_pointer1_1) to return new object\n\n");
                #endif

                wxSize value_to_return2;
                value_to_return2 = ((wxRibbonControl_php*)native_object)->GetNextSmallerSize((wxOrientation) direction1, *(wxSize*) object_pointer1_1);
                void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                memcpy(ptr, (void*) &value_to_return2, sizeof(wxSize));
                object_init_ex(return_value, php_wxSize_entry);
                ((wxSize_php*)ptr)->phpObj = *return_value;
                zo_wxSize* zo2 = Z_wxSize_P(return_value);
                zo2->native_object = (wxSize_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonControl::GetNextSmallerSize\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonControl::IsSizingContinuous() */
PHP_METHOD(php_wxRibbonControl, IsSizingContinuous)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonControl::IsSizingContinuous\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonControl* current_object;
    wxphp_object_type current_object_type;
    wxRibbonControl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonControl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonControl::IsSizingContinuous call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONCONTROL_TYPE){
                references = &((wxRibbonControl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonBar_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonButtonBar_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
                references = &((wxRibbonPage_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
                references = &((wxRibbonPanel_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonToolBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonControl::IsSizingContinuous())\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonControl_php*)native_object)->IsSizingContinuous());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonControl::IsSizingContinuous\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonControl::Realise()
   Alias for Realize(). */
PHP_METHOD(php_wxRibbonControl, Realise)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonControl::Realise\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonControl* current_object;
    wxphp_object_type current_object_type;
    wxRibbonControl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonControl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonControl::Realise call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONCONTROL_TYPE){
                references = &((wxRibbonControl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonBar_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonButtonBar_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
                references = &((wxRibbonPage_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
                references = &((wxRibbonPanel_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonToolBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonControl::Realise())\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonControl_php*)native_object)->Realise());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonControl::Realise\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonControl::Realize()
   Perform initial size and layout calculations after children have been added, and/or realize children. */
PHP_METHOD(php_wxRibbonControl, Realize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonControl::Realize\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonControl* current_object;
    wxphp_object_type current_object_type;
    wxRibbonControl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonControl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonControl::Realize call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONCONTROL_TYPE){
                references = &((wxRibbonControl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonBar_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonButtonBar_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
                references = &((wxRibbonPage_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
                references = &((wxRibbonPanel_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonToolBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonControl::Realize())\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonControl_php*)native_object)->Realize());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonControl::Realize\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonControl::SetArtProvider(wxRibbonArtProvider &art)
   Set the art provider to be used. */
PHP_METHOD(php_wxRibbonControl, SetArtProvider)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonControl::SetArtProvider\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonControl* current_object;
    wxphp_object_type current_object_type;
    wxRibbonControl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonControl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonControl::SetArtProvider call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONCONTROL_TYPE){
                references = &((wxRibbonControl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonBar_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonButtonBar_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
                references = &((wxRibbonPage_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
                references = &((wxRibbonPanel_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
                references = &((wxRibbonToolBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* art0;
    wxRibbonArtProvider* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&art0)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &art0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(art0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRibbonArtProvider_P(art0)->object_type;
                    argument_native_object = (void*) Z_wxRibbonArtProvider_P(art0)->native_object;
                    object_pointer0_0 = (wxRibbonArtProvider*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXRIBBONARTPROVIDER_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'art' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(art0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'art' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonControl::SetArtProvider((wxRibbonArtProvider*) object_pointer0_0)\n\n");
                #endif

                ((wxRibbonControl_php*)native_object)->SetArtProvider((wxRibbonArtProvider*) object_pointer0_0);

                references->AddReference(art0, "wxRibbonControl::SetArtProvider at call 1 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonControl::SetArtProvider\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonControl::wxRibbonControl()
   Constructor. */
PHP_METHOD(php_wxRibbonControl, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonControl::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonControl* current_object;
    wxRibbonControl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    bool overload0_called = false;

    //Parameters for overload 1
    zval* parent1;
    wxWindow* object_pointer1_0 = 0;
    long id1;
    zval* pos1;
    wxPoint* object_pointer1_2 = 0;
    zval* size1;
    wxSize* object_pointer1_3 = 0;
    long style1;
    zval* validator1;
    wxValidator* object_pointer1_5 = 0;
    char* name1;
    size_t name_len1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 2  && arguments_received <= 7)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zl|OOlos' (&parent1, &id1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &validator1, &name1, &name_len1)\n");
        #endif

        char parse_parameters_string[] = "zl|OOlos";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent1, &id1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &validator1, &name1, &name_len1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent1)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent1)->native_object;
                    object_pointer1_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer1_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(pos1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos1)->native_object;
                    object_pointer1_2 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(size1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size1)->native_object;
                    object_pointer1_3 = (wxSize*) argument_native_object;
                    if (!object_pointer1_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 6){
                if(Z_TYPE_P(validator1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxValidator_P(validator1)->object_type;
                    argument_native_object = (void*) Z_wxValidator_P(validator1)->native_object;
                    object_pointer1_5 = (wxValidator*) argument_native_object;
                    if (!object_pointer1_5 || (argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'validator' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(validator1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'validator' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct()\n");
                #endif

                native_object = new wxRibbonControl_php();

                native_object->references.Initialize();
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1)\n");
                #endif

                native_object = new wxRibbonControl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1);

                native_object->references.Initialize();
                ((wxRibbonControl_php*) native_object)->references.AddReference(parent1, "wxRibbonControl::wxRibbonControl at call 2 with 2 argument(s)");
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2)\n");
                #endif

                native_object = new wxRibbonControl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2);

                native_object->references.Initialize();
                ((wxRibbonControl_php*) native_object)->references.AddReference(parent1, "wxRibbonControl::wxRibbonControl at call 2 with 3 argument(s)");
                ((wxRibbonControl_php*) native_object)->references.AddReference(pos1, "wxRibbonControl::wxRibbonControl at call 4 with 3 argument(s)");
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3)\n");
                #endif

                native_object = new wxRibbonControl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3);

                native_object->references.Initialize();
                ((wxRibbonControl_php*) native_object)->references.AddReference(parent1, "wxRibbonControl::wxRibbonControl at call 2 with 4 argument(s)");
                ((wxRibbonControl_php*) native_object)->references.AddReference(pos1, "wxRibbonControl::wxRibbonControl at call 4 with 4 argument(s)");
                ((wxRibbonControl_php*) native_object)->references.AddReference(size1, "wxRibbonControl::wxRibbonControl at call 4 with 4 argument(s)");
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3, (long) style1)\n");
                #endif

                native_object = new wxRibbonControl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3, (long) style1);

                native_object->references.Initialize();
                ((wxRibbonControl_php*) native_object)->references.AddReference(parent1, "wxRibbonControl::wxRibbonControl at call 2 with 5 argument(s)");
                ((wxRibbonControl_php*) native_object)->references.AddReference(pos1, "wxRibbonControl::wxRibbonControl at call 4 with 5 argument(s)");
                ((wxRibbonControl_php*) native_object)->references.AddReference(size1, "wxRibbonControl::wxRibbonControl at call 4 with 5 argument(s)");
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3, (long) style1, *(wxValidator*) object_pointer1_5)\n");
                #endif

                native_object = new wxRibbonControl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3, (long) style1, *(wxValidator*) object_pointer1_5);

                native_object->references.Initialize();
                ((wxRibbonControl_php*) native_object)->references.AddReference(parent1, "wxRibbonControl::wxRibbonControl at call 2 with 6 argument(s)");
                ((wxRibbonControl_php*) native_object)->references.AddReference(pos1, "wxRibbonControl::wxRibbonControl at call 4 with 6 argument(s)");
                ((wxRibbonControl_php*) native_object)->references.AddReference(size1, "wxRibbonControl::wxRibbonControl at call 4 with 6 argument(s)");
                ((wxRibbonControl_php*) native_object)->references.AddReference(validator1, "wxRibbonControl::wxRibbonControl at call 4 with 6 argument(s)");
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3, (long) style1, *(wxValidator*) object_pointer1_5, wxString(name1, wxConvUTF8))\n");
                #endif

                native_object = new wxRibbonControl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3, (long) style1, *(wxValidator*) object_pointer1_5, wxString(name1, wxConvUTF8));

                native_object->references.Initialize();
                ((wxRibbonControl_php*) native_object)->references.AddReference(parent1, "wxRibbonControl::wxRibbonControl at call 2 with 7 argument(s)");
                ((wxRibbonControl_php*) native_object)->references.AddReference(pos1, "wxRibbonControl::wxRibbonControl at call 4 with 7 argument(s)");
                ((wxRibbonControl_php*) native_object)->references.AddReference(size1, "wxRibbonControl::wxRibbonControl at call 4 with 7 argument(s)");
                ((wxRibbonControl_php*) native_object)->references.AddReference(validator1, "wxRibbonControl::wxRibbonControl at call 4 with 7 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxRibbonControl_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxRibbonControl::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxRibbonGallery_free(void *object)
{
    zo_wxRibbonGallery* custom_object = (zo_wxRibbonGallery*) object;

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Obviate delete call for wxRibbonGallery on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n\n");
    #endif

    zend_object_std_dtor(&custom_object->zo);
    efree(custom_object);
}

zend_object* php_wxRibbonGallery_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxRibbonGallery_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* custom_object;

    custom_object = (zo_wxRibbonGallery*) ecalloc(
        1,
        sizeof(zo_wxRibbonGallery)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    custom_object->zo.handlers = &wxphp_wxRibbonGallery_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXRIBBONGALLERY_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto wxRibbonGalleryItem wxRibbonGallery::Append(wxBitmap bitmap, int id)
   Add an item to the gallery (with no client data). */
PHP_METHOD(php_wxRibbonGallery, Append)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::Append\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::Append call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* bitmap0;
    wxBitmap* object_pointer0_0 = 0;
    long id0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* bitmap1;
    wxBitmap* object_pointer1_0 = 0;
    long id1;
    char* clientData1;
    size_t clientData_len1;
    zval clientData1_ref;
    bool overload1_called = false;

    //Parameters for overload 2
    zval* bitmap2;
    wxBitmap* object_pointer2_0 = 0;
    long id2;
    zval* clientData2;
    wxClientData* object_pointer2_2 = 0;
    bool overload2_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'Ol' (&bitmap0, php_wxBitmap_entry, &id0)\n");
        #endif

        char parse_parameters_string[] = "Ol";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &bitmap0, php_wxBitmap_entry, &id0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(bitmap0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap0)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap0)->native_object;
                    object_pointer0_0 = (wxBitmap*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(bitmap0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'Ols' (&bitmap1, php_wxBitmap_entry, &id1, &clientData1, &clientData_len1)\n");
        #endif

        char parse_parameters_string[] = "Ols";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &bitmap1, php_wxBitmap_entry, &id1, &clientData1, &clientData_len1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(bitmap1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap1)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap1)->native_object;
                    object_pointer1_0 = (wxBitmap*) argument_native_object;
                    if (!object_pointer1_0 )
                    {
                        goto overload2;
                    }
                }
                else if(Z_TYPE_P(bitmap1) != IS_NULL)
                {
                    goto overload2;
                }
            }

            overload1_called = true;
            already_called = true;

            char parse_references_string[] = "zzz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, &dummy, dummy, clientData1_ref );
        }
    }

    //Overload 2
    overload2:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'Olz' (&bitmap2, php_wxBitmap_entry, &id2, &clientData2)\n");
        #endif

        char parse_parameters_string[] = "Olz";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &bitmap2, php_wxBitmap_entry, &id2, &clientData2 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(bitmap2) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap2)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap2)->native_object;
                    object_pointer2_0 = (wxBitmap*) argument_native_object;
                    if (!object_pointer2_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'bitmap' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(bitmap2) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'bitmap' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(clientData2) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxClientData_P(clientData2)->object_type;
                    argument_native_object = (void*) Z_wxClientData_P(clientData2)->native_object;
                    object_pointer2_2 = (wxClientData*) argument_native_object;
                    if (!object_pointer2_2 || (argument_type != PHP_WXCLIENTDATA_TYPE && argument_type != PHP_WXTREEITEMDATA_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'clientData' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(clientData2) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'clientData' not null, could not be retreived correctly.");
                }
            }

            overload2_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonGallery::Append(*(wxBitmap*) object_pointer0_0, (int) id0) to return object pointer\n\n");
                #endif

                wxRibbonGalleryItem_php* value_to_return2;
                value_to_return2 = (wxRibbonGalleryItem_php*) ((wxRibbonGallery_php*)native_object)->Append(*(wxBitmap*) object_pointer0_0, (int) id0);

                if(value_to_return2 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return2->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return2->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return2->phpObj);
                        zval_add_ref(&value_to_return2->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonGalleryItem_entry);
                    Z_wxRibbonGalleryItem_P(return_value)->native_object = (wxRibbonGalleryItem_php*) value_to_return2;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return2 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonGallery::Append at call 5 with 2 argument(s)");
                }

                references->AddReference(bitmap0, "wxRibbonGallery::Append at call 3 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonGallery::Append(*(wxBitmap*) object_pointer1_0, (int) id1, (void*) clientData1) to return object pointer\n\n");
                #endif

                wxRibbonGalleryItem_php* value_to_return3;
                value_to_return3 = (wxRibbonGalleryItem_php*) ((wxRibbonGallery_php*)native_object)->Append(*(wxBitmap*) object_pointer1_0, (int) id1, (void*) clientData1);

                if(value_to_return3 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return3->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return3->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return3->phpObj);
                        zval_add_ref(&value_to_return3->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonGalleryItem_entry);
                    Z_wxRibbonGalleryItem_P(return_value)->native_object = (wxRibbonGalleryItem_php*) value_to_return3;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return3 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonGallery::Append at call 5 with 3 argument(s)");
                }

                references->AddReference(bitmap1, "wxRibbonGallery::Append at call 3 with 3 argument(s)");
                ZVAL_STRING(&clientData1_ref, (char*) clientData1);

                return;
                break;
            }
        }
    }

    if(overload2_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonGallery::Append(*(wxBitmap*) object_pointer2_0, (int) id2, (wxClientData*) object_pointer2_2) to return object pointer\n\n");
                #endif

                wxRibbonGalleryItem_php* value_to_return3;
                value_to_return3 = (wxRibbonGalleryItem_php*) ((wxRibbonGallery_php*)native_object)->Append(*(wxBitmap*) object_pointer2_0, (int) id2, (wxClientData*) object_pointer2_2);

                if(value_to_return3 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return3->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return3->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return3->phpObj);
                        zval_add_ref(&value_to_return3->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonGalleryItem_entry);
                    Z_wxRibbonGalleryItem_P(return_value)->native_object = (wxRibbonGalleryItem_php*) value_to_return3;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return3 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonGallery::Append at call 5 with 3 argument(s)");
                }

                references->AddReference(bitmap2, "wxRibbonGallery::Append at call 3 with 3 argument(s)");
                references->AddReference(clientData2, "wxRibbonGallery::Append at call 1 with 3 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::Append\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonGallery::Clear()
   Remove all items from the gallery. */
PHP_METHOD(php_wxRibbonGallery, Clear)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::Clear\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::Clear call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonGallery::Clear()\n\n");
                #endif

                ((wxRibbonGallery_php*)native_object)->Clear();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::Clear\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonGallery::Create(wxWindow &parent, int id, wxPoint pos, wxSize size, int style)
   Create a gallery in two-step gallery construction. */
PHP_METHOD(php_wxRibbonGallery, Create)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::Create\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::Create call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* parent0;
    wxWindow* object_pointer0_0 = 0;
    long id0;
    zval* pos0;
    wxPoint* object_pointer0_2 = 0;
    zval* size0;
    wxSize* object_pointer0_3 = 0;
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 5)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z|lOOl' (&parent0, &id0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0)\n");
        #endif

        char parse_parameters_string[] = "z|lOOl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent0, &id0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(pos0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos0)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos0)->native_object;
                    object_pointer0_2 = (wxPoint*) argument_native_object;
                    if (!object_pointer0_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(size0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size0)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size0)->native_object;
                    object_pointer0_3 = (wxSize*) argument_native_object;
                    if (!object_pointer0_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonGallery::Create((wxWindow*) object_pointer0_0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonGallery_php*)native_object)->Create((wxWindow*) object_pointer0_0));

                references->AddReference(parent0, "wxRibbonGallery::Create at call 1 with 1 argument(s)");

                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonGallery::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonGallery_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0));

                references->AddReference(parent0, "wxRibbonGallery::Create at call 1 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonGallery::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonGallery_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2));

                references->AddReference(parent0, "wxRibbonGallery::Create at call 1 with 3 argument(s)");
                references->AddReference(pos0, "wxRibbonGallery::Create at call 3 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonGallery::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonGallery_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3));

                references->AddReference(parent0, "wxRibbonGallery::Create at call 1 with 4 argument(s)");
                references->AddReference(pos0, "wxRibbonGallery::Create at call 3 with 4 argument(s)");
                references->AddReference(size0, "wxRibbonGallery::Create at call 3 with 4 argument(s)");

                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonGallery::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3, (long) style0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonGallery_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3, (long) style0));

                references->AddReference(parent0, "wxRibbonGallery::Create at call 1 with 5 argument(s)");
                references->AddReference(pos0, "wxRibbonGallery::Create at call 3 with 5 argument(s)");
                references->AddReference(size0, "wxRibbonGallery::Create at call 3 with 5 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::Create\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonGallery::EnsureVisible(wxRibbonGalleryItem item)
   Scroll the gallery to ensure that the given item is visible. */
PHP_METHOD(php_wxRibbonGallery, EnsureVisible)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::EnsureVisible\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::EnsureVisible call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* item0;
    wxRibbonGalleryItem* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&item0)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &item0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(item0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRibbonGalleryItem_P(item0)->object_type;
                    argument_native_object = (void*) Z_wxRibbonGalleryItem_P(item0)->native_object;
                    object_pointer0_0 = (wxRibbonGalleryItem*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXRIBBONGALLERYITEM_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(item0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonGallery::EnsureVisible((const wxRibbonGalleryItem*) object_pointer0_0)\n\n");
                #endif

                ((wxRibbonGallery_php*)native_object)->EnsureVisible((const wxRibbonGalleryItem*) object_pointer0_0);

                references->AddReference(item0, "wxRibbonGallery::EnsureVisible at call 1 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::EnsureVisible\n"
        );
    }
}
/* }}} */

/* {{{ proto wxRibbonGalleryItem wxRibbonGallery::GetActiveItem()
   Get the currently active item, or NULL if there is none. */
PHP_METHOD(php_wxRibbonGallery, GetActiveItem)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::GetActiveItem\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::GetActiveItem call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonGallery::GetActiveItem() to return object pointer\n\n");
                #endif

                wxRibbonGalleryItem_php* value_to_return0;
                value_to_return0 = (wxRibbonGalleryItem_php*) ((wxRibbonGallery_php*)native_object)->GetActiveItem();

                if(value_to_return0 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return0->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return0->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return0->phpObj);
                        zval_add_ref(&value_to_return0->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonGalleryItem_entry);
                    Z_wxRibbonGalleryItem_P(return_value)->native_object = (wxRibbonGalleryItem_php*) value_to_return0;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonGallery::GetActiveItem at call 5 with 0 argument(s)");
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::GetActiveItem\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxRibbonGallery::GetCount()
   Get the number of items in the gallery. */
PHP_METHOD(php_wxRibbonGallery, GetCount)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::GetCount\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::GetCount call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxRibbonGallery::GetCount())\n\n");
                #endif

                RETVAL_LONG(((wxRibbonGallery_php*)native_object)->GetCount());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::GetCount\n"
        );
    }
}
/* }}} */

/* {{{ proto wxRibbonGalleryButtonState wxRibbonGallery::GetDownButtonState()
   Get the state of the scroll down button. */
PHP_METHOD(php_wxRibbonGallery, GetDownButtonState)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::GetDownButtonState\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::GetDownButtonState call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxRibbonGallery::GetDownButtonState())\n\n");
                #endif

                RETVAL_LONG(((wxRibbonGallery_php*)native_object)->GetDownButtonState());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::GetDownButtonState\n"
        );
    }
}
/* }}} */

/* {{{ proto wxRibbonGalleryButtonState wxRibbonGallery::GetExtensionButtonState()
   Get the state of the "extension" button. */
PHP_METHOD(php_wxRibbonGallery, GetExtensionButtonState)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::GetExtensionButtonState\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::GetExtensionButtonState call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxRibbonGallery::GetExtensionButtonState())\n\n");
                #endif

                RETVAL_LONG(((wxRibbonGallery_php*)native_object)->GetExtensionButtonState());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::GetExtensionButtonState\n"
        );
    }
}
/* }}} */

/* {{{ proto wxRibbonGalleryItem wxRibbonGallery::GetHoveredItem()
   Get the currently hovered item, or NULL if there is none. */
PHP_METHOD(php_wxRibbonGallery, GetHoveredItem)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::GetHoveredItem\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::GetHoveredItem call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonGallery::GetHoveredItem() to return object pointer\n\n");
                #endif

                wxRibbonGalleryItem_php* value_to_return0;
                value_to_return0 = (wxRibbonGalleryItem_php*) ((wxRibbonGallery_php*)native_object)->GetHoveredItem();

                if(value_to_return0 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return0->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return0->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return0->phpObj);
                        zval_add_ref(&value_to_return0->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonGalleryItem_entry);
                    Z_wxRibbonGalleryItem_P(return_value)->native_object = (wxRibbonGalleryItem_php*) value_to_return0;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonGallery::GetHoveredItem at call 5 with 0 argument(s)");
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::GetHoveredItem\n"
        );
    }
}
/* }}} */

/* {{{ proto wxRibbonGalleryItem wxRibbonGallery::GetItem(int n)
   Get an item by index. */
PHP_METHOD(php_wxRibbonGallery, GetItem)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::GetItem\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::GetItem call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long n0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&n0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &n0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonGallery::GetItem((unsigned int) n0) to return object pointer\n\n");
                #endif

                wxRibbonGalleryItem_php* value_to_return1;
                value_to_return1 = (wxRibbonGalleryItem_php*) ((wxRibbonGallery_php*)native_object)->GetItem((unsigned int) n0);

                if(value_to_return1 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return1->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return1->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return1->phpObj);
                        zval_add_ref(&value_to_return1->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonGalleryItem_entry);
                    Z_wxRibbonGalleryItem_P(return_value)->native_object = (wxRibbonGalleryItem_php*) value_to_return1;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return1 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonGallery::GetItem at call 5 with 1 argument(s)");
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::GetItem\n"
        );
    }
}
/* }}} */

/* {{{ proto void wxRibbonGallery::GetItemClientData(wxRibbonGalleryItem item)
   Get the client data associated with a gallery item. */
PHP_METHOD(php_wxRibbonGallery, GetItemClientData)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::GetItemClientData\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::GetItemClientData call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* item0;
    wxRibbonGalleryItem* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&item0)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &item0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(item0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRibbonGalleryItem_P(item0)->object_type;
                    argument_native_object = (void*) Z_wxRibbonGalleryItem_P(item0)->native_object;
                    object_pointer0_0 = (wxRibbonGalleryItem*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXRIBBONGALLERYITEM_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(item0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonGallery::GetItemClientData((const wxRibbonGalleryItem*) object_pointer0_0)\n\n");
                #endif

                RETVAL_STRING((char*) ((wxRibbonGallery_php*)native_object)->GetItemClientData((const wxRibbonGalleryItem*) object_pointer0_0));

                references->AddReference(item0, "wxRibbonGallery::GetItemClientData at call 1 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::GetItemClientData\n"
        );
    }
}
/* }}} */

/* {{{ proto wxClientData wxRibbonGallery::GetItemClientObject(wxRibbonGalleryItem item)
   Get the client object associated with a gallery item. */
PHP_METHOD(php_wxRibbonGallery, GetItemClientObject)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::GetItemClientObject\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::GetItemClientObject call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* item0;
    wxRibbonGalleryItem* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&item0)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &item0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(item0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRibbonGalleryItem_P(item0)->object_type;
                    argument_native_object = (void*) Z_wxRibbonGalleryItem_P(item0)->native_object;
                    object_pointer0_0 = (wxRibbonGalleryItem*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXRIBBONGALLERYITEM_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(item0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonGallery::GetItemClientObject((const wxRibbonGalleryItem*) object_pointer0_0) to return object pointer\n\n");
                #endif

                wxClientData_php* value_to_return1;
                value_to_return1 = (wxClientData_php*) ((wxRibbonGallery_php*)native_object)->GetItemClientObject((const wxRibbonGalleryItem*) object_pointer0_0);

                if(value_to_return1 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return1->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return1->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return1->phpObj);
                        zval_add_ref(&value_to_return1->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxClientData_entry);
                    Z_wxClientData_P(return_value)->native_object = (wxClientData_php*) value_to_return1;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return1 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonGallery::GetItemClientObject at call 5 with 1 argument(s)");
                }

                references->AddReference(item0, "wxRibbonGallery::GetItemClientObject at call 1 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::GetItemClientObject\n"
        );
    }
}
/* }}} */

/* {{{ proto wxRibbonGalleryItem wxRibbonGallery::GetSelection()
   Get the currently selected item, or NULL if there is none. */
PHP_METHOD(php_wxRibbonGallery, GetSelection)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::GetSelection\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::GetSelection call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonGallery::GetSelection() to return object pointer\n\n");
                #endif

                wxRibbonGalleryItem_php* value_to_return0;
                value_to_return0 = (wxRibbonGalleryItem_php*) ((wxRibbonGallery_php*)native_object)->GetSelection();

                if(value_to_return0 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return0->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return0->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return0->phpObj);
                        zval_add_ref(&value_to_return0->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonGalleryItem_entry);
                    Z_wxRibbonGalleryItem_P(return_value)->native_object = (wxRibbonGalleryItem_php*) value_to_return0;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonGallery::GetSelection at call 5 with 0 argument(s)");
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::GetSelection\n"
        );
    }
}
/* }}} */

/* {{{ proto wxRibbonGalleryButtonState wxRibbonGallery::GetUpButtonState()
   Get the state of the scroll up button. */
PHP_METHOD(php_wxRibbonGallery, GetUpButtonState)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::GetUpButtonState\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::GetUpButtonState call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxRibbonGallery::GetUpButtonState())\n\n");
                #endif

                RETVAL_LONG(((wxRibbonGallery_php*)native_object)->GetUpButtonState());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::GetUpButtonState\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonGallery::IsEmpty()
   Query if the gallery has no items in it. */
PHP_METHOD(php_wxRibbonGallery, IsEmpty)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::IsEmpty\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::IsEmpty call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonGallery::IsEmpty())\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonGallery_php*)native_object)->IsEmpty());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::IsEmpty\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonGallery::IsHovered()
   Query is the mouse is currently hovered over the gallery. */
PHP_METHOD(php_wxRibbonGallery, IsHovered)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::IsHovered\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::IsHovered call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonGallery::IsHovered())\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonGallery_php*)native_object)->IsHovered());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::IsHovered\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonGallery::ScrollLines(int lines)
   Scroll the gallery contents by some amount. */
PHP_METHOD(php_wxRibbonGallery, ScrollLines)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::ScrollLines\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::ScrollLines call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long lines0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&lines0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &lines0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonGallery::ScrollLines((int) lines0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonGallery_php*)native_object)->ScrollLines((int) lines0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::ScrollLines\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonGallery::ScrollPixels(int pixels)
   Scroll the gallery contents by some fine-grained amount. */
PHP_METHOD(php_wxRibbonGallery, ScrollPixels)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::ScrollPixels\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::ScrollPixels call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pixels0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&pixels0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pixels0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonGallery::ScrollPixels((int) pixels0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonGallery_php*)native_object)->ScrollPixels((int) pixels0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::ScrollPixels\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonGallery::SetItemClientData(wxRibbonGalleryItem &item, void data)
   Set the client data associated with a gallery item. */
PHP_METHOD(php_wxRibbonGallery, SetItemClientData)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::SetItemClientData\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::SetItemClientData call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* item0;
    wxRibbonGalleryItem* object_pointer0_0 = 0;
    char* data0;
    size_t data_len0;
    zval data0_ref;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zs' (&item0, &data0, &data_len0)\n");
        #endif

        char parse_parameters_string[] = "zs";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &item0, &data0, &data_len0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(item0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRibbonGalleryItem_P(item0)->object_type;
                    argument_native_object = (void*) Z_wxRibbonGalleryItem_P(item0)->native_object;
                    object_pointer0_0 = (wxRibbonGalleryItem*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXRIBBONGALLERYITEM_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(item0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, &dummy, data0_ref );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonGallery::SetItemClientData((wxRibbonGalleryItem*) object_pointer0_0, (void*) data0)\n\n");
                #endif

                ((wxRibbonGallery_php*)native_object)->SetItemClientData((wxRibbonGalleryItem*) object_pointer0_0, (void*) data0);

                references->AddReference(item0, "wxRibbonGallery::SetItemClientData at call 1 with 2 argument(s)");
                ZVAL_STRING(&data0_ref, (char*) data0);

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::SetItemClientData\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonGallery::SetItemClientObject(wxRibbonGalleryItem &item, wxClientData &data)
   Set the client object associated with a gallery item. */
PHP_METHOD(php_wxRibbonGallery, SetItemClientObject)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::SetItemClientObject\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::SetItemClientObject call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* item0;
    wxRibbonGalleryItem* object_pointer0_0 = 0;
    zval* data0;
    wxClientData* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zz' (&item0, &data0)\n");
        #endif

        char parse_parameters_string[] = "zz";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &item0, &data0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(item0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRibbonGalleryItem_P(item0)->object_type;
                    argument_native_object = (void*) Z_wxRibbonGalleryItem_P(item0)->native_object;
                    object_pointer0_0 = (wxRibbonGalleryItem*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXRIBBONGALLERYITEM_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(item0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(data0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxClientData_P(data0)->object_type;
                    argument_native_object = (void*) Z_wxClientData_P(data0)->native_object;
                    object_pointer0_1 = (wxClientData*) argument_native_object;
                    if (!object_pointer0_1 || (argument_type != PHP_WXCLIENTDATA_TYPE && argument_type != PHP_WXTREEITEMDATA_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'data' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(data0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'data' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonGallery::SetItemClientObject((wxRibbonGalleryItem*) object_pointer0_0, (wxClientData*) object_pointer0_1)\n\n");
                #endif

                ((wxRibbonGallery_php*)native_object)->SetItemClientObject((wxRibbonGalleryItem*) object_pointer0_0, (wxClientData*) object_pointer0_1);

                references->AddReference(item0, "wxRibbonGallery::SetItemClientObject at call 1 with 2 argument(s)");
                references->AddReference(data0, "wxRibbonGallery::SetItemClientObject at call 1 with 2 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::SetItemClientObject\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonGallery::SetSelection(wxRibbonGalleryItem &item)
   Set the selection to the given item, or removes the selection if item == NULL. */
PHP_METHOD(php_wxRibbonGallery, SetSelection)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::SetSelection\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxphp_object_type current_object_type;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonGallery_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonGallery::SetSelection call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONGALLERY_TYPE){
                references = &((wxRibbonGallery_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* item0;
    wxRibbonGalleryItem* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&item0)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &item0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(item0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRibbonGalleryItem_P(item0)->object_type;
                    argument_native_object = (void*) Z_wxRibbonGalleryItem_P(item0)->native_object;
                    object_pointer0_0 = (wxRibbonGalleryItem*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXRIBBONGALLERYITEM_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(item0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonGallery::SetSelection((wxRibbonGalleryItem*) object_pointer0_0)\n\n");
                #endif

                ((wxRibbonGallery_php*)native_object)->SetSelection((wxRibbonGalleryItem*) object_pointer0_0);

                references->AddReference(item0, "wxRibbonGallery::SetSelection at call 1 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonGallery::SetSelection\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonGallery::wxRibbonGallery()
   Default constructor. */
PHP_METHOD(php_wxRibbonGallery, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonGallery::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonGallery* current_object;
    wxRibbonGallery_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    bool overload0_called = false;

    //Parameters for overload 1
    zval* parent1;
    wxWindow* object_pointer1_0 = 0;
    long id1;
    zval* pos1;
    wxPoint* object_pointer1_2 = 0;
    zval* size1;
    wxSize* object_pointer1_3 = 0;
    long style1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 1  && arguments_received <= 5)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z|lOOl' (&parent1, &id1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1)\n");
        #endif

        char parse_parameters_string[] = "z|lOOl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent1, &id1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent1)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent1)->native_object;
                    object_pointer1_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer1_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(pos1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos1)->native_object;
                    object_pointer1_2 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(size1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size1)->native_object;
                    object_pointer1_3 = (wxSize*) argument_native_object;
                    if (!object_pointer1_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct()\n");
                #endif

                native_object = new wxRibbonGallery_php();

                native_object->references.Initialize();
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0)\n");
                #endif

                native_object = new wxRibbonGallery_php((wxWindow*) object_pointer1_0);

                native_object->references.Initialize();
                ((wxRibbonGallery_php*) native_object)->references.AddReference(parent1, "wxRibbonGallery::wxRibbonGallery at call 2 with 1 argument(s)");
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1)\n");
                #endif

                native_object = new wxRibbonGallery_php((wxWindow*) object_pointer1_0, (wxWindowID) id1);

                native_object->references.Initialize();
                ((wxRibbonGallery_php*) native_object)->references.AddReference(parent1, "wxRibbonGallery::wxRibbonGallery at call 2 with 2 argument(s)");
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2)\n");
                #endif

                native_object = new wxRibbonGallery_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2);

                native_object->references.Initialize();
                ((wxRibbonGallery_php*) native_object)->references.AddReference(parent1, "wxRibbonGallery::wxRibbonGallery at call 2 with 3 argument(s)");
                ((wxRibbonGallery_php*) native_object)->references.AddReference(pos1, "wxRibbonGallery::wxRibbonGallery at call 4 with 3 argument(s)");
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3)\n");
                #endif

                native_object = new wxRibbonGallery_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3);

                native_object->references.Initialize();
                ((wxRibbonGallery_php*) native_object)->references.AddReference(parent1, "wxRibbonGallery::wxRibbonGallery at call 2 with 4 argument(s)");
                ((wxRibbonGallery_php*) native_object)->references.AddReference(pos1, "wxRibbonGallery::wxRibbonGallery at call 4 with 4 argument(s)");
                ((wxRibbonGallery_php*) native_object)->references.AddReference(size1, "wxRibbonGallery::wxRibbonGallery at call 4 with 4 argument(s)");
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3, (long) style1)\n");
                #endif

                native_object = new wxRibbonGallery_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3, (long) style1);

                native_object->references.Initialize();
                ((wxRibbonGallery_php*) native_object)->references.AddReference(parent1, "wxRibbonGallery::wxRibbonGallery at call 2 with 5 argument(s)");
                ((wxRibbonGallery_php*) native_object)->references.AddReference(pos1, "wxRibbonGallery::wxRibbonGallery at call 4 with 5 argument(s)");
                ((wxRibbonGallery_php*) native_object)->references.AddReference(size1, "wxRibbonGallery::wxRibbonGallery at call 4 with 5 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxRibbonGallery_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxRibbonGallery::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxRibbonPage_free(void *object)
{
    zo_wxRibbonPage* custom_object = (zo_wxRibbonPage*) object;

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Obviate delete call for wxRibbonPage on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n\n");
    #endif

    zend_object_std_dtor(&custom_object->zo);
    efree(custom_object);
}

zend_object* php_wxRibbonPage_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxRibbonPage_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPage* custom_object;

    custom_object = (zo_wxRibbonPage*) ecalloc(
        1,
        sizeof(zo_wxRibbonPage)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    custom_object->zo.handlers = &wxphp_wxRibbonPage_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXRIBBONPAGE_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto  wxRibbonPage::AdjustRectToIncludeScrollButtons(wxRect &rect)
   Expand a rectangle of the page to include external scroll buttons (if any). */
PHP_METHOD(php_wxRibbonPage, AdjustRectToIncludeScrollButtons)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPage::AdjustRectToIncludeScrollButtons\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPage* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPage_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPage_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPage::AdjustRectToIncludeScrollButtons call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPAGE_TYPE){
                references = &((wxRibbonPage_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* rect0;
    wxRect* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&rect0)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &rect0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(rect0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRect_P(rect0)->object_type;
                    argument_native_object = (void*) Z_wxRect_P(rect0)->native_object;
                    object_pointer0_0 = (wxRect*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXRECT_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'rect' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(rect0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'rect' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonPage::AdjustRectToIncludeScrollButtons((wxRect*) object_pointer0_0)\n\n");
                #endif

                ((wxRibbonPage_php*)native_object)->AdjustRectToIncludeScrollButtons((wxRect*) object_pointer0_0);

                references->AddReference(rect0, "wxRibbonPage::AdjustRectToIncludeScrollButtons at call 1 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPage::AdjustRectToIncludeScrollButtons\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonPage::Create(wxRibbonBar &parent, int id, string label, wxBitmap icon, int style)
   Create a ribbon page in two-step ribbon page construction. */
PHP_METHOD(php_wxRibbonPage, Create)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPage::Create\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPage* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPage_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPage_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPage::Create call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPAGE_TYPE){
                references = &((wxRibbonPage_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* parent0;
    wxRibbonBar* object_pointer0_0 = 0;
    long id0;
    char* label0;
    size_t label_len0;
    zval* icon0;
    wxBitmap* object_pointer0_3 = 0;
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 5)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z|lsOl' (&parent0, &id0, &label0, &label_len0, &icon0, php_wxBitmap_entry, &style0)\n");
        #endif

        char parse_parameters_string[] = "z|lsOl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent0, &id0, &label0, &label_len0, &icon0, php_wxBitmap_entry, &style0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRibbonBar_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxRibbonBar_P(parent0)->native_object;
                    object_pointer0_0 = (wxRibbonBar*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXRIBBONBAR_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(icon0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(icon0)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(icon0)->native_object;
                    object_pointer0_3 = (wxBitmap*) argument_native_object;
                    if (!object_pointer0_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'icon' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(icon0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'icon' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPage::Create((wxRibbonBar*) object_pointer0_0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPage_php*)native_object)->Create((wxRibbonBar*) object_pointer0_0));

                references->AddReference(parent0, "wxRibbonPage::Create at call 1 with 1 argument(s)");

                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPage::Create((wxRibbonBar*) object_pointer0_0, (wxWindowID) id0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPage_php*)native_object)->Create((wxRibbonBar*) object_pointer0_0, (wxWindowID) id0));

                references->AddReference(parent0, "wxRibbonPage::Create at call 1 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPage::Create((wxRibbonBar*) object_pointer0_0, (wxWindowID) id0, wxString(label0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPage_php*)native_object)->Create((wxRibbonBar*) object_pointer0_0, (wxWindowID) id0, wxString(label0, wxConvUTF8)));

                references->AddReference(parent0, "wxRibbonPage::Create at call 1 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPage::Create((wxRibbonBar*) object_pointer0_0, (wxWindowID) id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_3))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPage_php*)native_object)->Create((wxRibbonBar*) object_pointer0_0, (wxWindowID) id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_3));

                references->AddReference(parent0, "wxRibbonPage::Create at call 1 with 4 argument(s)");
                references->AddReference(icon0, "wxRibbonPage::Create at call 3 with 4 argument(s)");

                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPage::Create((wxRibbonBar*) object_pointer0_0, (wxWindowID) id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_3, (long) style0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPage_php*)native_object)->Create((wxRibbonBar*) object_pointer0_0, (wxWindowID) id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_3, (long) style0));

                references->AddReference(parent0, "wxRibbonPage::Create at call 1 with 5 argument(s)");
                references->AddReference(icon0, "wxRibbonPage::Create at call 3 with 5 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPage::Create\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonPage::DismissExpandedPanel()
   Dismiss the current externally expanded panel, if there is one. */
PHP_METHOD(php_wxRibbonPage, DismissExpandedPanel)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPage::DismissExpandedPanel\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPage* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPage_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPage_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPage::DismissExpandedPanel call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPAGE_TYPE){
                references = &((wxRibbonPage_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPage::DismissExpandedPanel())\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPage_php*)native_object)->DismissExpandedPanel());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPage::DismissExpandedPanel\n"
        );
    }
}
/* }}} */

/* {{{ proto wxBitmap wxRibbonPage::GetIcon()
   Get the icon used for the page in the ribbon bar tab area (only displayed if the ribbon bar is actually showing icons). */
PHP_METHOD(php_wxRibbonPage, GetIcon)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPage::GetIcon\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPage* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPage_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPage_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPage::GetIcon call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPAGE_TYPE){
                references = &((wxRibbonPage_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonPage::GetIcon() to return object reference\n\n");
                #endif

                wxBitmap_php* value_to_return0;
                value_to_return0 = (wxBitmap_php*) &((wxRibbonPage_php*)native_object)->GetIcon();

                if(value_to_return0->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return0->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return0->phpObj);
                        zval_add_ref(&value_to_return0->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value,php_wxBitmap_entry);
                    Z_wxBitmap_P(return_value)->native_object = (wxBitmap_php*) value_to_return0;
                }

                if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
                    references->AddReference(return_value, "wxRibbonPage::GetIcon at call 6 with 0 argument(s)");
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPage::GetIcon\n"
        );
    }
}
/* }}} */

/* {{{ proto wxOrientation wxRibbonPage::GetMajorAxis()
   Get the direction in which ribbon panels are stacked within the page. */
PHP_METHOD(php_wxRibbonPage, GetMajorAxis)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPage::GetMajorAxis\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPage* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPage_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPage_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPage::GetMajorAxis call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPAGE_TYPE){
                references = &((wxRibbonPage_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxRibbonPage::GetMajorAxis())\n\n");
                #endif

                RETVAL_LONG(((wxRibbonPage_php*)native_object)->GetMajorAxis());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPage::GetMajorAxis\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonPage::Realize()
   Perform a full re-layout of all panels on the page. */
PHP_METHOD(php_wxRibbonPage, Realize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPage::Realize\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPage* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPage_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPage_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPage::Realize call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPAGE_TYPE){
                references = &((wxRibbonPage_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPage::Realize())\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPage_php*)native_object)->Realize());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPage::Realize\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonPage::ScrollLines(int lines)
   Scroll the page by some amount up / down / left / right. */
PHP_METHOD(php_wxRibbonPage, ScrollLines)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPage::ScrollLines\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPage* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPage_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPage_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPage::ScrollLines call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPAGE_TYPE){
                references = &((wxRibbonPage_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long lines0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&lines0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &lines0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPage::ScrollLines((int) lines0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPage_php*)native_object)->ScrollLines((int) lines0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPage::ScrollLines\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonPage::ScrollPixels(int pixels)
   Scroll the page by a set number of pixels up / down / left / right. */
PHP_METHOD(php_wxRibbonPage, ScrollPixels)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPage::ScrollPixels\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPage* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPage_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPage_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPage::ScrollPixels call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPAGE_TYPE){
                references = &((wxRibbonPage_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long pixels0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&pixels0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pixels0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPage::ScrollPixels((int) pixels0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPage_php*)native_object)->ScrollPixels((int) pixels0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPage::ScrollPixels\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonPage::SetArtProvider(wxRibbonArtProvider &art)
   Set the art provider to be used. */
PHP_METHOD(php_wxRibbonPage, SetArtProvider)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPage::SetArtProvider\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPage* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPage_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPage_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPage::SetArtProvider call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPAGE_TYPE){
                references = &((wxRibbonPage_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* art0;
    wxRibbonArtProvider* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&art0)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &art0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(art0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRibbonArtProvider_P(art0)->object_type;
                    argument_native_object = (void*) Z_wxRibbonArtProvider_P(art0)->native_object;
                    object_pointer0_0 = (wxRibbonArtProvider*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXRIBBONARTPROVIDER_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'art' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(art0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'art' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonPage::SetArtProvider((wxRibbonArtProvider*) object_pointer0_0)\n\n");
                #endif

                ((wxRibbonPage_php*)native_object)->SetArtProvider((wxRibbonArtProvider*) object_pointer0_0);

                references->AddReference(art0, "wxRibbonPage::SetArtProvider at call 1 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPage::SetArtProvider\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonPage::SetSizeWithScrollButtonAdjustment(int x, int y, int width, int height)
   Set the size of the page and the external scroll buttons (if any). */
PHP_METHOD(php_wxRibbonPage, SetSizeWithScrollButtonAdjustment)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPage::SetSizeWithScrollButtonAdjustment\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPage* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPage_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPage_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPage::SetSizeWithScrollButtonAdjustment call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPAGE_TYPE){
                references = &((wxRibbonPage_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long x0;
    long y0;
    long width0;
    long height0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'llll' (&x0, &y0, &width0, &height0)\n");
        #endif

        char parse_parameters_string[] = "llll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0, &width0, &height0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonPage::SetSizeWithScrollButtonAdjustment((int) x0, (int) y0, (int) width0, (int) height0)\n\n");
                #endif

                ((wxRibbonPage_php*)native_object)->SetSizeWithScrollButtonAdjustment((int) x0, (int) y0, (int) width0, (int) height0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPage::SetSizeWithScrollButtonAdjustment\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonPage::wxRibbonPage()
   Default constructor. */
PHP_METHOD(php_wxRibbonPage, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPage::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPage* current_object;
    wxRibbonPage_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    bool overload0_called = false;

    //Parameters for overload 1
    zval* parent1;
    wxRibbonBar* object_pointer1_0 = 0;
    long id1;
    char* label1;
    size_t label_len1;
    zval* icon1;
    wxBitmap* object_pointer1_3 = 0;
    long style1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 1  && arguments_received <= 5)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z|lsOl' (&parent1, &id1, &label1, &label_len1, &icon1, php_wxBitmap_entry, &style1)\n");
        #endif

        char parse_parameters_string[] = "z|lsOl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent1, &id1, &label1, &label_len1, &icon1, php_wxBitmap_entry, &style1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRibbonBar_P(parent1)->object_type;
                    argument_native_object = (void*) Z_wxRibbonBar_P(parent1)->native_object;
                    object_pointer1_0 = (wxRibbonBar*) argument_native_object;
                    if (!object_pointer1_0 || (argument_type != PHP_WXRIBBONBAR_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(icon1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(icon1)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(icon1)->native_object;
                    object_pointer1_3 = (wxBitmap*) argument_native_object;
                    if (!object_pointer1_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'icon' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(icon1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'icon' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct()\n");
                #endif

                native_object = new wxRibbonPage_php();

                native_object->references.Initialize();
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxRibbonBar*) object_pointer1_0)\n");
                #endif

                native_object = new wxRibbonPage_php((wxRibbonBar*) object_pointer1_0);

                native_object->references.Initialize();
                ((wxRibbonPage_php*) native_object)->references.AddReference(parent1, "wxRibbonPage::wxRibbonPage at call 2 with 1 argument(s)");
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxRibbonBar*) object_pointer1_0, (wxWindowID) id1)\n");
                #endif

                native_object = new wxRibbonPage_php((wxRibbonBar*) object_pointer1_0, (wxWindowID) id1);

                native_object->references.Initialize();
                ((wxRibbonPage_php*) native_object)->references.AddReference(parent1, "wxRibbonPage::wxRibbonPage at call 2 with 2 argument(s)");
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxRibbonBar*) object_pointer1_0, (wxWindowID) id1, wxString(label1, wxConvUTF8))\n");
                #endif

                native_object = new wxRibbonPage_php((wxRibbonBar*) object_pointer1_0, (wxWindowID) id1, wxString(label1, wxConvUTF8));

                native_object->references.Initialize();
                ((wxRibbonPage_php*) native_object)->references.AddReference(parent1, "wxRibbonPage::wxRibbonPage at call 2 with 3 argument(s)");
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxRibbonBar*) object_pointer1_0, (wxWindowID) id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_3)\n");
                #endif

                native_object = new wxRibbonPage_php((wxRibbonBar*) object_pointer1_0, (wxWindowID) id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_3);

                native_object->references.Initialize();
                ((wxRibbonPage_php*) native_object)->references.AddReference(parent1, "wxRibbonPage::wxRibbonPage at call 2 with 4 argument(s)");
                ((wxRibbonPage_php*) native_object)->references.AddReference(icon1, "wxRibbonPage::wxRibbonPage at call 4 with 4 argument(s)");
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxRibbonBar*) object_pointer1_0, (wxWindowID) id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_3, (long) style1)\n");
                #endif

                native_object = new wxRibbonPage_php((wxRibbonBar*) object_pointer1_0, (wxWindowID) id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_3, (long) style1);

                native_object->references.Initialize();
                ((wxRibbonPage_php*) native_object)->references.AddReference(parent1, "wxRibbonPage::wxRibbonPage at call 2 with 5 argument(s)");
                ((wxRibbonPage_php*) native_object)->references.AddReference(icon1, "wxRibbonPage::wxRibbonPage at call 4 with 5 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxRibbonPage_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxRibbonPage::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxRibbonPanel_free(void *object)
{
    zo_wxRibbonPanel* custom_object = (zo_wxRibbonPanel*) object;

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Obviate delete call for wxRibbonPanel on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n\n");
    #endif

    zend_object_std_dtor(&custom_object->zo);
    efree(custom_object);
}

zend_object* php_wxRibbonPanel_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxRibbonPanel_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPanel* custom_object;

    custom_object = (zo_wxRibbonPanel*) ecalloc(
        1,
        sizeof(zo_wxRibbonPanel)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    custom_object->zo.handlers = &wxphp_wxRibbonPanel_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXRIBBONPANEL_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto bool wxRibbonPanel::CanAutoMinimise()
   Query if the panel can automatically minimise itself at small sizes. */
PHP_METHOD(php_wxRibbonPanel, CanAutoMinimise)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPanel::CanAutoMinimise\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPanel* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPanel_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPanel_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPanel::CanAutoMinimise call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPANEL_TYPE){
                references = &((wxRibbonPanel_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPanel::CanAutoMinimise())\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPanel_php*)native_object)->CanAutoMinimise());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPanel::CanAutoMinimise\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonPanel::Create(wxWindow &parent, int id, string label, wxBitmap icon, wxPoint pos, wxSize size, int style)
   Create a ribbon panel in two-step ribbon panel construction. */
PHP_METHOD(php_wxRibbonPanel, Create)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPanel::Create\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPanel* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPanel_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPanel_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPanel::Create call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPANEL_TYPE){
                references = &((wxRibbonPanel_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* parent0;
    wxWindow* object_pointer0_0 = 0;
    long id0;
    char* label0;
    size_t label_len0;
    zval* icon0;
    wxBitmap* object_pointer0_3 = 0;
    zval* pos0;
    wxPoint* object_pointer0_4 = 0;
    zval* size0;
    wxSize* object_pointer0_5 = 0;
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 7)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z|lsOOOl' (&parent0, &id0, &label0, &label_len0, &icon0, php_wxBitmap_entry, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0)\n");
        #endif

        char parse_parameters_string[] = "z|lsOOOl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent0, &id0, &label0, &label_len0, &icon0, php_wxBitmap_entry, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(icon0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(icon0)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(icon0)->native_object;
                    object_pointer0_3 = (wxBitmap*) argument_native_object;
                    if (!object_pointer0_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'icon' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(icon0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'icon' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 5){
                if(Z_TYPE_P(pos0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos0)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos0)->native_object;
                    object_pointer0_4 = (wxPoint*) argument_native_object;
                    if (!object_pointer0_4 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 6){
                if(Z_TYPE_P(size0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size0)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size0)->native_object;
                    object_pointer0_5 = (wxSize*) argument_native_object;
                    if (!object_pointer0_5 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPanel::Create((wxWindow*) object_pointer0_0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPanel_php*)native_object)->Create((wxWindow*) object_pointer0_0));

                references->AddReference(parent0, "wxRibbonPanel::Create at call 1 with 1 argument(s)");

                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPanel::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPanel_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0));

                references->AddReference(parent0, "wxRibbonPanel::Create at call 1 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPanel::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(label0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPanel_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(label0, wxConvUTF8)));

                references->AddReference(parent0, "wxRibbonPanel::Create at call 1 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPanel::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_3))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPanel_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_3));

                references->AddReference(parent0, "wxRibbonPanel::Create at call 1 with 4 argument(s)");
                references->AddReference(icon0, "wxRibbonPanel::Create at call 3 with 4 argument(s)");

                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPanel::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_3, *(wxPoint*) object_pointer0_4))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPanel_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_3, *(wxPoint*) object_pointer0_4));

                references->AddReference(parent0, "wxRibbonPanel::Create at call 1 with 5 argument(s)");
                references->AddReference(icon0, "wxRibbonPanel::Create at call 3 with 5 argument(s)");
                references->AddReference(pos0, "wxRibbonPanel::Create at call 3 with 5 argument(s)");

                return;
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPanel::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_3, *(wxPoint*) object_pointer0_4, *(wxSize*) object_pointer0_5))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPanel_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_3, *(wxPoint*) object_pointer0_4, *(wxSize*) object_pointer0_5));

                references->AddReference(parent0, "wxRibbonPanel::Create at call 1 with 6 argument(s)");
                references->AddReference(icon0, "wxRibbonPanel::Create at call 3 with 6 argument(s)");
                references->AddReference(pos0, "wxRibbonPanel::Create at call 3 with 6 argument(s)");
                references->AddReference(size0, "wxRibbonPanel::Create at call 3 with 6 argument(s)");

                return;
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPanel::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_3, *(wxPoint*) object_pointer0_4, *(wxSize*) object_pointer0_5, (long) style0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPanel_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(label0, wxConvUTF8), *(wxBitmap*) object_pointer0_3, *(wxPoint*) object_pointer0_4, *(wxSize*) object_pointer0_5, (long) style0));

                references->AddReference(parent0, "wxRibbonPanel::Create at call 1 with 7 argument(s)");
                references->AddReference(icon0, "wxRibbonPanel::Create at call 3 with 7 argument(s)");
                references->AddReference(pos0, "wxRibbonPanel::Create at call 3 with 7 argument(s)");
                references->AddReference(size0, "wxRibbonPanel::Create at call 3 with 7 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPanel::Create\n"
        );
    }
}
/* }}} */

/* {{{ proto wxRibbonPanel wxRibbonPanel::GetExpandedDummy()
   Get the dummy panel of an expanded panel. */
PHP_METHOD(php_wxRibbonPanel, GetExpandedDummy)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPanel::GetExpandedDummy\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPanel* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPanel_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPanel_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPanel::GetExpandedDummy call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPANEL_TYPE){
                references = &((wxRibbonPanel_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonPanel::GetExpandedDummy() to return object pointer\n\n");
                #endif

                wxRibbonPanel_php* value_to_return0;
                value_to_return0 = (wxRibbonPanel_php*) ((wxRibbonPanel_php*)native_object)->GetExpandedDummy();

                if(value_to_return0 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return0->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return0->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return0->phpObj);
                        zval_add_ref(&value_to_return0->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonPanel_entry);
                    Z_wxRibbonPanel_P(return_value)->native_object = (wxRibbonPanel_php*) value_to_return0;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonPanel::GetExpandedDummy at call 5 with 0 argument(s)");
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPanel::GetExpandedDummy\n"
        );
    }
}
/* }}} */

/* {{{ proto wxRibbonPanel wxRibbonPanel::GetExpandedPanel()
   Get the expanded panel of a dummy panel. */
PHP_METHOD(php_wxRibbonPanel, GetExpandedPanel)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPanel::GetExpandedPanel\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPanel* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPanel_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPanel_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPanel::GetExpandedPanel call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPANEL_TYPE){
                references = &((wxRibbonPanel_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonPanel::GetExpandedPanel() to return object pointer\n\n");
                #endif

                wxRibbonPanel_php* value_to_return0;
                value_to_return0 = (wxRibbonPanel_php*) ((wxRibbonPanel_php*)native_object)->GetExpandedPanel();

                if(value_to_return0 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return0->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return0->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return0->phpObj);
                        zval_add_ref(&value_to_return0->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonPanel_entry);
                    Z_wxRibbonPanel_P(return_value)->native_object = (wxRibbonPanel_php*) value_to_return0;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonPanel::GetExpandedPanel at call 5 with 0 argument(s)");
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPanel::GetExpandedPanel\n"
        );
    }
}
/* }}} */

/* {{{ proto wxBitmap wxRibbonPanel::GetMinimisedIcon()
   Get the bitmap to be used in place of the panel children when it is minimised. */
PHP_METHOD(php_wxRibbonPanel, GetMinimisedIcon)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPanel::GetMinimisedIcon\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPanel* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPanel_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPanel_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPanel::GetMinimisedIcon call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPANEL_TYPE){
                references = &((wxRibbonPanel_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    //Parameters for overload 1
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload1_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonPanel::GetMinimisedIcon() to return object reference\n\n");
                #endif

                wxBitmap_php* value_to_return0;
                value_to_return0 = (wxBitmap_php*) &((wxRibbonPanel_php*)native_object)->GetMinimisedIcon();

                if(value_to_return0->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return0->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return0->phpObj);
                        zval_add_ref(&value_to_return0->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value,php_wxBitmap_entry);
                    Z_wxBitmap_P(return_value)->native_object = (wxBitmap_php*) value_to_return0;
                }

                if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
                    references->AddReference(return_value, "wxRibbonPanel::GetMinimisedIcon at call 6 with 0 argument(s)");
                }


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonPanel::GetMinimisedIcon() to return object reference\n\n");
                #endif

                wxBitmap_php* value_to_return0;
                value_to_return0 = (wxBitmap_php*) &((wxRibbonPanel_php*)native_object)->GetMinimisedIcon();

                if(value_to_return0->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return0->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return0->phpObj);
                        zval_add_ref(&value_to_return0->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value,php_wxBitmap_entry);
                    Z_wxBitmap_P(return_value)->native_object = (wxBitmap_php*) value_to_return0;
                }

                if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
                    references->AddReference(return_value, "wxRibbonPanel::GetMinimisedIcon at call 6 with 0 argument(s)");
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPanel::GetMinimisedIcon\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonPanel::HideExpanded()
   Hide the panel's external expansion. */
PHP_METHOD(php_wxRibbonPanel, HideExpanded)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPanel::HideExpanded\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPanel* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPanel_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPanel_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPanel::HideExpanded call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPANEL_TYPE){
                references = &((wxRibbonPanel_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPanel::HideExpanded())\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPanel_php*)native_object)->HideExpanded());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPanel::HideExpanded\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonPanel::IsHovered()
   Query is the mouse is currently hovered over the panel. */
PHP_METHOD(php_wxRibbonPanel, IsHovered)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPanel::IsHovered\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPanel* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPanel_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPanel_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPanel::IsHovered call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPANEL_TYPE){
                references = &((wxRibbonPanel_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPanel::IsHovered())\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPanel_php*)native_object)->IsHovered());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPanel::IsHovered\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonPanel::IsMinimised()
   Query if the panel is currently minimised. */
PHP_METHOD(php_wxRibbonPanel, IsMinimised)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPanel::IsMinimised\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPanel* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPanel_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPanel_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPanel::IsMinimised call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPANEL_TYPE){
                references = &((wxRibbonPanel_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    //Parameters for overload 1
    zval* at_size1;
    wxSize* object_pointer1_0 = 0;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&at_size1, php_wxSize_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &at_size1, php_wxSize_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(at_size1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(at_size1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(at_size1)->native_object;
                    object_pointer1_0 = (wxSize*) argument_native_object;
                    if (!object_pointer1_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'at_size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(at_size1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'at_size' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPanel::IsMinimised())\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPanel_php*)native_object)->IsMinimised());


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPanel::IsMinimised(*(wxSize*) object_pointer1_0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPanel_php*)native_object)->IsMinimised(*(wxSize*) object_pointer1_0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPanel::IsMinimised\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonPanel::Realize()
   Realize all children of the panel. */
PHP_METHOD(php_wxRibbonPanel, Realize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPanel::Realize\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPanel* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPanel_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPanel_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPanel::Realize call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPANEL_TYPE){
                references = &((wxRibbonPanel_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPanel::Realize())\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPanel_php*)native_object)->Realize());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPanel::Realize\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonPanel::SetArtProvider(wxRibbonArtProvider &art)
   Set the art provider to be used. */
PHP_METHOD(php_wxRibbonPanel, SetArtProvider)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPanel::SetArtProvider\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPanel* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPanel_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPanel_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPanel::SetArtProvider call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPANEL_TYPE){
                references = &((wxRibbonPanel_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* art0;
    wxRibbonArtProvider* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&art0)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &art0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(art0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxRibbonArtProvider_P(art0)->object_type;
                    argument_native_object = (void*) Z_wxRibbonArtProvider_P(art0)->native_object;
                    object_pointer0_0 = (wxRibbonArtProvider*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXRIBBONARTPROVIDER_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'art' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(art0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'art' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonPanel::SetArtProvider((wxRibbonArtProvider*) object_pointer0_0)\n\n");
                #endif

                ((wxRibbonPanel_php*)native_object)->SetArtProvider((wxRibbonArtProvider*) object_pointer0_0);

                references->AddReference(art0, "wxRibbonPanel::SetArtProvider at call 1 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPanel::SetArtProvider\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonPanel::ShowExpanded()
   Show the panel externally expanded. */
PHP_METHOD(php_wxRibbonPanel, ShowExpanded)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPanel::ShowExpanded\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPanel* current_object;
    wxphp_object_type current_object_type;
    wxRibbonPanel_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonPanel_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonPanel::ShowExpanded call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONPANEL_TYPE){
                references = &((wxRibbonPanel_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonPanel::ShowExpanded())\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonPanel_php*)native_object)->ShowExpanded());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonPanel::ShowExpanded\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonPanel::wxRibbonPanel()
   Default constructor. */
PHP_METHOD(php_wxRibbonPanel, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonPanel::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonPanel* current_object;
    wxRibbonPanel_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    bool overload0_called = false;

    //Parameters for overload 1
    zval* parent1;
    wxWindow* object_pointer1_0 = 0;
    long id1;
    char* label1;
    size_t label_len1;
    zval* minimised_icon1;
    wxBitmap* object_pointer1_3 = 0;
    zval* pos1;
    wxPoint* object_pointer1_4 = 0;
    zval* size1;
    wxSize* object_pointer1_5 = 0;
    long style1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 1  && arguments_received <= 7)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z|lsOOOl' (&parent1, &id1, &label1, &label_len1, &minimised_icon1, php_wxBitmap_entry, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1)\n");
        #endif

        char parse_parameters_string[] = "z|lsOOOl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent1, &id1, &label1, &label_len1, &minimised_icon1, php_wxBitmap_entry, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent1)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent1)->native_object;
                    object_pointer1_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer1_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(minimised_icon1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(minimised_icon1)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(minimised_icon1)->native_object;
                    object_pointer1_3 = (wxBitmap*) argument_native_object;
                    if (!object_pointer1_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'minimised_icon' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(minimised_icon1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'minimised_icon' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 5){
                if(Z_TYPE_P(pos1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos1)->native_object;
                    object_pointer1_4 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_4 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 6){
                if(Z_TYPE_P(size1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size1)->native_object;
                    object_pointer1_5 = (wxSize*) argument_native_object;
                    if (!object_pointer1_5 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct()\n");
                #endif

                native_object = new wxRibbonPanel_php();

                native_object->references.Initialize();
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0)\n");
                #endif

                native_object = new wxRibbonPanel_php((wxWindow*) object_pointer1_0);

                native_object->references.Initialize();
                ((wxRibbonPanel_php*) native_object)->references.AddReference(parent1, "wxRibbonPanel::wxRibbonPanel at call 2 with 1 argument(s)");
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1)\n");
                #endif

                native_object = new wxRibbonPanel_php((wxWindow*) object_pointer1_0, (wxWindowID) id1);

                native_object->references.Initialize();
                ((wxRibbonPanel_php*) native_object)->references.AddReference(parent1, "wxRibbonPanel::wxRibbonPanel at call 2 with 2 argument(s)");
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(label1, wxConvUTF8))\n");
                #endif

                native_object = new wxRibbonPanel_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(label1, wxConvUTF8));

                native_object->references.Initialize();
                ((wxRibbonPanel_php*) native_object)->references.AddReference(parent1, "wxRibbonPanel::wxRibbonPanel at call 2 with 3 argument(s)");
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_3)\n");
                #endif

                native_object = new wxRibbonPanel_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_3);

                native_object->references.Initialize();
                ((wxRibbonPanel_php*) native_object)->references.AddReference(parent1, "wxRibbonPanel::wxRibbonPanel at call 2 with 4 argument(s)");
                ((wxRibbonPanel_php*) native_object)->references.AddReference(minimised_icon1, "wxRibbonPanel::wxRibbonPanel at call 4 with 4 argument(s)");
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_3, *(wxPoint*) object_pointer1_4)\n");
                #endif

                native_object = new wxRibbonPanel_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_3, *(wxPoint*) object_pointer1_4);

                native_object->references.Initialize();
                ((wxRibbonPanel_php*) native_object)->references.AddReference(parent1, "wxRibbonPanel::wxRibbonPanel at call 2 with 5 argument(s)");
                ((wxRibbonPanel_php*) native_object)->references.AddReference(minimised_icon1, "wxRibbonPanel::wxRibbonPanel at call 4 with 5 argument(s)");
                ((wxRibbonPanel_php*) native_object)->references.AddReference(pos1, "wxRibbonPanel::wxRibbonPanel at call 4 with 5 argument(s)");
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_3, *(wxPoint*) object_pointer1_4, *(wxSize*) object_pointer1_5)\n");
                #endif

                native_object = new wxRibbonPanel_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_3, *(wxPoint*) object_pointer1_4, *(wxSize*) object_pointer1_5);

                native_object->references.Initialize();
                ((wxRibbonPanel_php*) native_object)->references.AddReference(parent1, "wxRibbonPanel::wxRibbonPanel at call 2 with 6 argument(s)");
                ((wxRibbonPanel_php*) native_object)->references.AddReference(minimised_icon1, "wxRibbonPanel::wxRibbonPanel at call 4 with 6 argument(s)");
                ((wxRibbonPanel_php*) native_object)->references.AddReference(pos1, "wxRibbonPanel::wxRibbonPanel at call 4 with 6 argument(s)");
                ((wxRibbonPanel_php*) native_object)->references.AddReference(size1, "wxRibbonPanel::wxRibbonPanel at call 4 with 6 argument(s)");
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_3, *(wxPoint*) object_pointer1_4, *(wxSize*) object_pointer1_5, (long) style1)\n");
                #endif

                native_object = new wxRibbonPanel_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(label1, wxConvUTF8), *(wxBitmap*) object_pointer1_3, *(wxPoint*) object_pointer1_4, *(wxSize*) object_pointer1_5, (long) style1);

                native_object->references.Initialize();
                ((wxRibbonPanel_php*) native_object)->references.AddReference(parent1, "wxRibbonPanel::wxRibbonPanel at call 2 with 7 argument(s)");
                ((wxRibbonPanel_php*) native_object)->references.AddReference(minimised_icon1, "wxRibbonPanel::wxRibbonPanel at call 4 with 7 argument(s)");
                ((wxRibbonPanel_php*) native_object)->references.AddReference(pos1, "wxRibbonPanel::wxRibbonPanel at call 4 with 7 argument(s)");
                ((wxRibbonPanel_php*) native_object)->references.AddReference(size1, "wxRibbonPanel::wxRibbonPanel at call 4 with 7 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxRibbonPanel_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxRibbonPanel::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxRibbonToolBar_free(void *object)
{
    zo_wxRibbonToolBar* custom_object = (zo_wxRibbonToolBar*) object;

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Obviate delete call for wxRibbonToolBar on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n\n");
    #endif

    zend_object_std_dtor(&custom_object->zo);
    efree(custom_object);
}

zend_object* php_wxRibbonToolBar_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxRibbonToolBar_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonToolBar* custom_object;

    custom_object = (zo_wxRibbonToolBar*) ecalloc(
        1,
        sizeof(zo_wxRibbonToolBar)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    custom_object->zo.handlers = &wxphp_wxRibbonToolBar_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXRIBBONTOOLBAR_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto wxRibbonToolBarToolBase wxRibbonToolBar::AddDropdownTool(int tool_id, wxBitmap bitmap, string help_string)
   Add a dropdown tool to the tool bar (simple version). */
PHP_METHOD(php_wxRibbonToolBar, AddDropdownTool)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonToolBar::AddDropdownTool\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonToolBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonToolBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonToolBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonToolBar::AddDropdownTool call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONTOOLBAR_TYPE){
                references = &((wxRibbonToolBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long tool_id0;
    zval* bitmap0;
    wxBitmap* object_pointer0_1 = 0;
    char* help_string0;
    size_t help_string_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 2  && arguments_received <= 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lO|s' (&tool_id0, &bitmap0, php_wxBitmap_entry, &help_string0, &help_string_len0)\n");
        #endif

        char parse_parameters_string[] = "lO|s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &tool_id0, &bitmap0, php_wxBitmap_entry, &help_string0, &help_string_len0 ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(bitmap0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap0)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap0)->native_object;
                    object_pointer0_1 = (wxBitmap*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'bitmap' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(bitmap0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'bitmap' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonToolBar::AddDropdownTool((int) tool_id0, *(wxBitmap*) object_pointer0_1) to return object pointer\n\n");
                #endif

                wxRibbonToolBarToolBase_php* value_to_return2;
                value_to_return2 = (wxRibbonToolBarToolBase_php*) ((wxRibbonToolBar_php*)native_object)->AddDropdownTool((int) tool_id0, *(wxBitmap*) object_pointer0_1);

                if(value_to_return2 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return2->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return2->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return2->phpObj);
                        zval_add_ref(&value_to_return2->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonToolBarToolBase_entry);
                    Z_wxRibbonToolBarToolBase_P(return_value)->native_object = (wxRibbonToolBarToolBase_php*) value_to_return2;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return2 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonToolBar::AddDropdownTool at call 5 with 2 argument(s)");
                }

                references->AddReference(bitmap0, "wxRibbonToolBar::AddDropdownTool at call 3 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonToolBar::AddDropdownTool((int) tool_id0, *(wxBitmap*) object_pointer0_1, wxString(help_string0, wxConvUTF8)) to return object pointer\n\n");
                #endif

                wxRibbonToolBarToolBase_php* value_to_return3;
                value_to_return3 = (wxRibbonToolBarToolBase_php*) ((wxRibbonToolBar_php*)native_object)->AddDropdownTool((int) tool_id0, *(wxBitmap*) object_pointer0_1, wxString(help_string0, wxConvUTF8));

                if(value_to_return3 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return3->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return3->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return3->phpObj);
                        zval_add_ref(&value_to_return3->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonToolBarToolBase_entry);
                    Z_wxRibbonToolBarToolBase_P(return_value)->native_object = (wxRibbonToolBarToolBase_php*) value_to_return3;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return3 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonToolBar::AddDropdownTool at call 5 with 3 argument(s)");
                }

                references->AddReference(bitmap0, "wxRibbonToolBar::AddDropdownTool at call 3 with 3 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonToolBar::AddDropdownTool\n"
        );
    }
}
/* }}} */

/* {{{ proto wxRibbonToolBarToolBase wxRibbonToolBar::AddHybridTool(int tool_id, wxBitmap bitmap, string help_string)
   Add a hybrid tool to the tool bar (simple version). */
PHP_METHOD(php_wxRibbonToolBar, AddHybridTool)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonToolBar::AddHybridTool\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonToolBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonToolBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonToolBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonToolBar::AddHybridTool call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONTOOLBAR_TYPE){
                references = &((wxRibbonToolBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long tool_id0;
    zval* bitmap0;
    wxBitmap* object_pointer0_1 = 0;
    char* help_string0;
    size_t help_string_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 2  && arguments_received <= 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lO|s' (&tool_id0, &bitmap0, php_wxBitmap_entry, &help_string0, &help_string_len0)\n");
        #endif

        char parse_parameters_string[] = "lO|s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &tool_id0, &bitmap0, php_wxBitmap_entry, &help_string0, &help_string_len0 ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(bitmap0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap0)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap0)->native_object;
                    object_pointer0_1 = (wxBitmap*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'bitmap' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(bitmap0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'bitmap' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonToolBar::AddHybridTool((int) tool_id0, *(wxBitmap*) object_pointer0_1) to return object pointer\n\n");
                #endif

                wxRibbonToolBarToolBase_php* value_to_return2;
                value_to_return2 = (wxRibbonToolBarToolBase_php*) ((wxRibbonToolBar_php*)native_object)->AddHybridTool((int) tool_id0, *(wxBitmap*) object_pointer0_1);

                if(value_to_return2 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return2->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return2->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return2->phpObj);
                        zval_add_ref(&value_to_return2->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonToolBarToolBase_entry);
                    Z_wxRibbonToolBarToolBase_P(return_value)->native_object = (wxRibbonToolBarToolBase_php*) value_to_return2;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return2 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonToolBar::AddHybridTool at call 5 with 2 argument(s)");
                }

                references->AddReference(bitmap0, "wxRibbonToolBar::AddHybridTool at call 3 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonToolBar::AddHybridTool((int) tool_id0, *(wxBitmap*) object_pointer0_1, wxString(help_string0, wxConvUTF8)) to return object pointer\n\n");
                #endif

                wxRibbonToolBarToolBase_php* value_to_return3;
                value_to_return3 = (wxRibbonToolBarToolBase_php*) ((wxRibbonToolBar_php*)native_object)->AddHybridTool((int) tool_id0, *(wxBitmap*) object_pointer0_1, wxString(help_string0, wxConvUTF8));

                if(value_to_return3 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return3->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return3->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return3->phpObj);
                        zval_add_ref(&value_to_return3->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonToolBarToolBase_entry);
                    Z_wxRibbonToolBarToolBase_P(return_value)->native_object = (wxRibbonToolBarToolBase_php*) value_to_return3;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return3 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonToolBar::AddHybridTool at call 5 with 3 argument(s)");
                }

                references->AddReference(bitmap0, "wxRibbonToolBar::AddHybridTool at call 3 with 3 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonToolBar::AddHybridTool\n"
        );
    }
}
/* }}} */

/* {{{ proto wxRibbonToolBarToolBase wxRibbonToolBar::AddSeparator()
   Add a separator to the tool bar. */
PHP_METHOD(php_wxRibbonToolBar, AddSeparator)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonToolBar::AddSeparator\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonToolBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonToolBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonToolBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonToolBar::AddSeparator call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONTOOLBAR_TYPE){
                references = &((wxRibbonToolBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonToolBar::AddSeparator() to return object pointer\n\n");
                #endif

                wxRibbonToolBarToolBase_php* value_to_return0;
                value_to_return0 = (wxRibbonToolBarToolBase_php*) ((wxRibbonToolBar_php*)native_object)->AddSeparator();

                if(value_to_return0 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return0->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return0->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return0->phpObj);
                        zval_add_ref(&value_to_return0->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonToolBarToolBase_entry);
                    Z_wxRibbonToolBarToolBase_P(return_value)->native_object = (wxRibbonToolBarToolBase_php*) value_to_return0;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonToolBar::AddSeparator at call 5 with 0 argument(s)");
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonToolBar::AddSeparator\n"
        );
    }
}
/* }}} */

/* {{{ proto wxRibbonToolBarToolBase wxRibbonToolBar::AddTool(int tool_id, wxBitmap bitmap, string help_string, wxRibbonButtonKind kind)
   Add a tool to the tool bar (simple version). */
PHP_METHOD(php_wxRibbonToolBar, AddTool)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonToolBar::AddTool\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonToolBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonToolBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonToolBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonToolBar::AddTool call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONTOOLBAR_TYPE){
                references = &((wxRibbonToolBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long tool_id0;
    zval* bitmap0;
    wxBitmap* object_pointer0_1 = 0;
    char* help_string0;
    size_t help_string_len0;
    long kind0;
    bool overload0_called = false;

    //Parameters for overload 1
    long tool_id1;
    zval* bitmap1;
    wxBitmap* object_pointer1_1 = 0;
    zval* bitmap_disabled1;
    wxBitmap* object_pointer1_2 = 0;
    char* help_string1;
    size_t help_string_len1;
    long kind1;
    zval* clientData1;
    wxObject* object_pointer1_5 = 0;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 3  && arguments_received <= 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lOs|l' (&tool_id0, &bitmap0, php_wxBitmap_entry, &help_string0, &help_string_len0, &kind0)\n");
        #endif

        char parse_parameters_string[] = "lOs|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &tool_id0, &bitmap0, php_wxBitmap_entry, &help_string0, &help_string_len0, &kind0 ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(bitmap0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap0)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap0)->native_object;
                    object_pointer0_1 = (wxBitmap*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(bitmap0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 2  && arguments_received <= 6)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lO|Oslz' (&tool_id1, &bitmap1, php_wxBitmap_entry, &bitmap_disabled1, php_wxBitmap_entry, &help_string1, &help_string_len1, &kind1, &clientData1)\n");
        #endif

        char parse_parameters_string[] = "lO|Oslz";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &tool_id1, &bitmap1, php_wxBitmap_entry, &bitmap_disabled1, php_wxBitmap_entry, &help_string1, &help_string_len1, &kind1, &clientData1 ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(bitmap1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap1)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap1)->native_object;
                    object_pointer1_1 = (wxBitmap*) argument_native_object;
                    if (!object_pointer1_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'bitmap' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(bitmap1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'bitmap' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(bitmap_disabled1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxBitmap_P(bitmap_disabled1)->object_type;
                    argument_native_object = (void*) Z_wxBitmap_P(bitmap_disabled1)->native_object;
                    object_pointer1_2 = (wxBitmap*) argument_native_object;
                    if (!object_pointer1_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'bitmap_disabled' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(bitmap_disabled1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'bitmap_disabled' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 6){
                if(Z_TYPE_P(clientData1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxObject_P(clientData1)->object_type;
                    argument_native_object = (void*) Z_wxObject_P(clientData1)->native_object;
                    object_pointer1_5 = (wxObject*) argument_native_object;
                    if (!object_pointer1_5 || (argument_type != PHP_WXOBJECT_TYPE && argument_type != PHP_WXEVTHANDLER_TYPE && argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE && argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE && argument_type != PHP_WXMENU_TYPE && argument_type != PHP_WXAUIMANAGER_TYPE && argument_type != PHP_WXMOUSEEVENTSMANAGER_TYPE && argument_type != PHP_WXTIMER_TYPE && argument_type != PHP_WXEVENTBLOCKER_TYPE && argument_type != PHP_WXPROCESS_TYPE && argument_type != PHP_WXFILESYSTEMWATCHER_TYPE && argument_type != PHP_WXTASKBARICON_TYPE && argument_type != PHP_WXNOTIFICATIONMESSAGE_TYPE && argument_type != PHP_WXBITMAPHANDLER_TYPE && argument_type != PHP_WXIMAGE_TYPE && argument_type != PHP_WXSIZER_TYPE && argument_type != PHP_WXBOXSIZER_TYPE && argument_type != PHP_WXSTATICBOXSIZER_TYPE && argument_type != PHP_WXWRAPSIZER_TYPE && argument_type != PHP_WXSTDDIALOGBUTTONSIZER_TYPE && argument_type != PHP_WXGRIDSIZER_TYPE && argument_type != PHP_WXFLEXGRIDSIZER_TYPE && argument_type != PHP_WXGRIDBAGSIZER_TYPE && argument_type != PHP_WXSIZERITEM_TYPE && argument_type != PHP_WXGBSIZERITEM_TYPE && argument_type != PHP_WXIMAGELIST_TYPE && argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE && argument_type != PHP_WXCOLOUR_TYPE && argument_type != PHP_WXMENUITEM_TYPE && argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXICONIZEEVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXSHOWEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXDROPFILESEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE && argument_type != PHP_WXACCELERATORTABLE_TYPE && argument_type != PHP_WXGDIOBJECT_TYPE && argument_type != PHP_WXBITMAP_TYPE && argument_type != PHP_WXPALETTE_TYPE && argument_type != PHP_WXICON_TYPE && argument_type != PHP_WXFONT_TYPE && argument_type != PHP_WXICONBUNDLE_TYPE && argument_type != PHP_WXCURSOR_TYPE && argument_type != PHP_WXREGION_TYPE && argument_type != PHP_WXPEN_TYPE && argument_type != PHP_WXBRUSH_TYPE && argument_type != PHP_WXANIMATION_TYPE && argument_type != PHP_WXARTPROVIDER_TYPE && argument_type != PHP_WXHTMLCELL_TYPE && argument_type != PHP_WXHTMLCONTAINERCELL_TYPE && argument_type != PHP_WXHTMLCOLOURCELL_TYPE && argument_type != PHP_WXHTMLWIDGETCELL_TYPE && argument_type != PHP_WXHTMLEASYPRINTING_TYPE && argument_type != PHP_WXHTMLLINKINFO_TYPE && argument_type != PHP_WXFINDREPLACEDATA_TYPE && argument_type != PHP_WXSOUND_TYPE && argument_type != PHP_WXFILESYSTEM_TYPE && argument_type != PHP_WXFILESYSTEMHANDLER_TYPE && argument_type != PHP_WXMASK_TYPE && argument_type != PHP_WXTOOLTIP_TYPE && argument_type != PHP_WXGRAPHICSRENDERER_TYPE && argument_type != PHP_WXLAYOUTCONSTRAINTS_TYPE && argument_type != PHP_WXFSFILE_TYPE && argument_type != PHP_WXCOLOURDATA_TYPE && argument_type != PHP_WXFONTDATA_TYPE && argument_type != PHP_WXGRIDTABLEBASE_TYPE && argument_type != PHP_WXDATAVIEWRENDERER_TYPE && argument_type != PHP_WXDATAVIEWBITMAPRENDERER_TYPE && argument_type != PHP_WXDATAVIEWCHOICERENDERER_TYPE && argument_type != PHP_WXDATAVIEWCUSTOMRENDERER_TYPE && argument_type != PHP_WXDATAVIEWSPINRENDERER_TYPE && argument_type != PHP_WXDATAVIEWDATERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWPROGRESSRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTOGGLERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXT_TYPE && argument_type != PHP_WXVARIANT_TYPE && argument_type != PHP_WXCLIPBOARD_TYPE && argument_type != PHP_WXCONFIGBASE_TYPE && argument_type != PHP_WXFILECONFIG_TYPE && argument_type != PHP_WXXMLRESOURCE_TYPE && argument_type != PHP_WXPAGESETUPDIALOG_TYPE && argument_type != PHP_WXPAGESETUPDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDIALOG_TYPE && argument_type != PHP_WXPRINTDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDATA_TYPE && argument_type != PHP_WXPRINTPREVIEW_TYPE && argument_type != PHP_WXPRINTER_TYPE && argument_type != PHP_WXPRINTOUT_TYPE && argument_type != PHP_WXHTMLPRINTOUT_TYPE && argument_type != PHP_WXHTMLDCRENDERER_TYPE && argument_type != PHP_WXHTMLFILTER_TYPE && argument_type != PHP_WXHTMLHELPDATA_TYPE && argument_type != PHP_WXHTMLTAGHANDLER_TYPE && argument_type != PHP_WXHTMLWINTAGHANDLER_TYPE && argument_type != PHP_WXMODULE_TYPE && argument_type != PHP_WXHTMLTAGSMODULE_TYPE && argument_type != PHP_WXIMAGEHANDLER_TYPE && argument_type != PHP_WXXMLRESOURCEHANDLER_TYPE && argument_type != PHP_WXXMLDOCUMENT_TYPE && argument_type != PHP_WXLAYOUTALGORITHM_TYPE && argument_type != PHP_WXFILEHISTORY_TYPE && argument_type != PHP_WXTOOLBARTOOLBASE_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'clientData' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(clientData1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'clientData' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonToolBar::AddTool((int) tool_id0, *(wxBitmap*) object_pointer0_1, wxString(help_string0, wxConvUTF8)) to return object pointer\n\n");
                #endif

                wxRibbonToolBarToolBase_php* value_to_return3;
                value_to_return3 = (wxRibbonToolBarToolBase_php*) ((wxRibbonToolBar_php*)native_object)->AddTool((int) tool_id0, *(wxBitmap*) object_pointer0_1, wxString(help_string0, wxConvUTF8));

                if(value_to_return3 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return3->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return3->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return3->phpObj);
                        zval_add_ref(&value_to_return3->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonToolBarToolBase_entry);
                    Z_wxRibbonToolBarToolBase_P(return_value)->native_object = (wxRibbonToolBarToolBase_php*) value_to_return3;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return3 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonToolBar::AddTool at call 5 with 3 argument(s)");
                }

                references->AddReference(bitmap0, "wxRibbonToolBar::AddTool at call 3 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonToolBar::AddTool((int) tool_id0, *(wxBitmap*) object_pointer0_1, wxString(help_string0, wxConvUTF8), (wxRibbonButtonKind) kind0) to return object pointer\n\n");
                #endif

                wxRibbonToolBarToolBase_php* value_to_return4;
                value_to_return4 = (wxRibbonToolBarToolBase_php*) ((wxRibbonToolBar_php*)native_object)->AddTool((int) tool_id0, *(wxBitmap*) object_pointer0_1, wxString(help_string0, wxConvUTF8), (wxRibbonButtonKind) kind0);

                if(value_to_return4 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return4->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return4->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return4->phpObj);
                        zval_add_ref(&value_to_return4->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonToolBarToolBase_entry);
                    Z_wxRibbonToolBarToolBase_P(return_value)->native_object = (wxRibbonToolBarToolBase_php*) value_to_return4;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return4 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonToolBar::AddTool at call 5 with 4 argument(s)");
                }

                references->AddReference(bitmap0, "wxRibbonToolBar::AddTool at call 3 with 4 argument(s)");

                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonToolBar::AddTool((int) tool_id1, *(wxBitmap*) object_pointer1_1) to return object pointer\n\n");
                #endif

                wxRibbonToolBarToolBase_php* value_to_return2;
                value_to_return2 = (wxRibbonToolBarToolBase_php*) ((wxRibbonToolBar_php*)native_object)->AddTool((int) tool_id1, *(wxBitmap*) object_pointer1_1);

                if(value_to_return2 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return2->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return2->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return2->phpObj);
                        zval_add_ref(&value_to_return2->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonToolBarToolBase_entry);
                    Z_wxRibbonToolBarToolBase_P(return_value)->native_object = (wxRibbonToolBarToolBase_php*) value_to_return2;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return2 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonToolBar::AddTool at call 5 with 2 argument(s)");
                }

                references->AddReference(bitmap1, "wxRibbonToolBar::AddTool at call 3 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonToolBar::AddTool((int) tool_id1, *(wxBitmap*) object_pointer1_1, *(wxBitmap*) object_pointer1_2) to return object pointer\n\n");
                #endif

                wxRibbonToolBarToolBase_php* value_to_return3;
                value_to_return3 = (wxRibbonToolBarToolBase_php*) ((wxRibbonToolBar_php*)native_object)->AddTool((int) tool_id1, *(wxBitmap*) object_pointer1_1, *(wxBitmap*) object_pointer1_2);

                if(value_to_return3 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return3->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return3->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return3->phpObj);
                        zval_add_ref(&value_to_return3->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonToolBarToolBase_entry);
                    Z_wxRibbonToolBarToolBase_P(return_value)->native_object = (wxRibbonToolBarToolBase_php*) value_to_return3;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return3 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonToolBar::AddTool at call 5 with 3 argument(s)");
                }

                references->AddReference(bitmap1, "wxRibbonToolBar::AddTool at call 3 with 3 argument(s)");
                references->AddReference(bitmap_disabled1, "wxRibbonToolBar::AddTool at call 3 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonToolBar::AddTool((int) tool_id1, *(wxBitmap*) object_pointer1_1, *(wxBitmap*) object_pointer1_2, wxString(help_string1, wxConvUTF8)) to return object pointer\n\n");
                #endif

                wxRibbonToolBarToolBase_php* value_to_return4;
                value_to_return4 = (wxRibbonToolBarToolBase_php*) ((wxRibbonToolBar_php*)native_object)->AddTool((int) tool_id1, *(wxBitmap*) object_pointer1_1, *(wxBitmap*) object_pointer1_2, wxString(help_string1, wxConvUTF8));

                if(value_to_return4 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return4->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return4->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return4->phpObj);
                        zval_add_ref(&value_to_return4->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonToolBarToolBase_entry);
                    Z_wxRibbonToolBarToolBase_P(return_value)->native_object = (wxRibbonToolBarToolBase_php*) value_to_return4;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return4 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonToolBar::AddTool at call 5 with 4 argument(s)");
                }

                references->AddReference(bitmap1, "wxRibbonToolBar::AddTool at call 3 with 4 argument(s)");
                references->AddReference(bitmap_disabled1, "wxRibbonToolBar::AddTool at call 3 with 4 argument(s)");

                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonToolBar::AddTool((int) tool_id1, *(wxBitmap*) object_pointer1_1, *(wxBitmap*) object_pointer1_2, wxString(help_string1, wxConvUTF8), (wxRibbonButtonKind) kind1) to return object pointer\n\n");
                #endif

                wxRibbonToolBarToolBase_php* value_to_return5;
                value_to_return5 = (wxRibbonToolBarToolBase_php*) ((wxRibbonToolBar_php*)native_object)->AddTool((int) tool_id1, *(wxBitmap*) object_pointer1_1, *(wxBitmap*) object_pointer1_2, wxString(help_string1, wxConvUTF8), (wxRibbonButtonKind) kind1);

                if(value_to_return5 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return5->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return5->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return5->phpObj);
                        zval_add_ref(&value_to_return5->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonToolBarToolBase_entry);
                    Z_wxRibbonToolBarToolBase_P(return_value)->native_object = (wxRibbonToolBarToolBase_php*) value_to_return5;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return5 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonToolBar::AddTool at call 5 with 5 argument(s)");
                }

                references->AddReference(bitmap1, "wxRibbonToolBar::AddTool at call 3 with 5 argument(s)");
                references->AddReference(bitmap_disabled1, "wxRibbonToolBar::AddTool at call 3 with 5 argument(s)");

                return;
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonToolBar::AddTool((int) tool_id1, *(wxBitmap*) object_pointer1_1, *(wxBitmap*) object_pointer1_2, wxString(help_string1, wxConvUTF8), (wxRibbonButtonKind) kind1, (wxObject*) object_pointer1_5) to return object pointer\n\n");
                #endif

                wxRibbonToolBarToolBase_php* value_to_return6;
                value_to_return6 = (wxRibbonToolBarToolBase_php*) ((wxRibbonToolBar_php*)native_object)->AddTool((int) tool_id1, *(wxBitmap*) object_pointer1_1, *(wxBitmap*) object_pointer1_2, wxString(help_string1, wxConvUTF8), (wxRibbonButtonKind) kind1, (wxObject*) object_pointer1_5);

                if(value_to_return6 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return6->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return6->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return6->phpObj);
                        zval_add_ref(&value_to_return6->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxRibbonToolBarToolBase_entry);
                    Z_wxRibbonToolBarToolBase_P(return_value)->native_object = (wxRibbonToolBarToolBase_php*) value_to_return6;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return6 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxRibbonToolBar::AddTool at call 5 with 6 argument(s)");
                }

                references->AddReference(bitmap1, "wxRibbonToolBar::AddTool at call 3 with 6 argument(s)");
                references->AddReference(bitmap_disabled1, "wxRibbonToolBar::AddTool at call 3 with 6 argument(s)");
                references->AddReference(clientData1, "wxRibbonToolBar::AddTool at call 1 with 6 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonToolBar::AddTool\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRibbonToolBar::Create(wxWindow &parent, int id, wxPoint pos, wxSize size, int style)
   Create a tool bar in two-step tool bar construction. */
PHP_METHOD(php_wxRibbonToolBar, Create)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonToolBar::Create\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonToolBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonToolBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonToolBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonToolBar::Create call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONTOOLBAR_TYPE){
                references = &((wxRibbonToolBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* parent0;
    wxWindow* object_pointer0_0 = 0;
    long id0;
    zval* pos0;
    wxPoint* object_pointer0_2 = 0;
    zval* size0;
    wxSize* object_pointer0_3 = 0;
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 5)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z|lOOl' (&parent0, &id0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0)\n");
        #endif

        char parse_parameters_string[] = "z|lOOl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent0, &id0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(pos0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos0)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos0)->native_object;
                    object_pointer0_2 = (wxPoint*) argument_native_object;
                    if (!object_pointer0_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(size0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size0)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size0)->native_object;
                    object_pointer0_3 = (wxSize*) argument_native_object;
                    if (!object_pointer0_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonToolBar::Create((wxWindow*) object_pointer0_0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonToolBar_php*)native_object)->Create((wxWindow*) object_pointer0_0));

                references->AddReference(parent0, "wxRibbonToolBar::Create at call 1 with 1 argument(s)");

                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonToolBar::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonToolBar_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0));

                references->AddReference(parent0, "wxRibbonToolBar::Create at call 1 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonToolBar::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonToolBar_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2));

                references->AddReference(parent0, "wxRibbonToolBar::Create at call 1 with 3 argument(s)");
                references->AddReference(pos0, "wxRibbonToolBar::Create at call 3 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonToolBar::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonToolBar_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3));

                references->AddReference(parent0, "wxRibbonToolBar::Create at call 1 with 4 argument(s)");
                references->AddReference(pos0, "wxRibbonToolBar::Create at call 3 with 4 argument(s)");
                references->AddReference(size0, "wxRibbonToolBar::Create at call 3 with 4 argument(s)");

                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxRibbonToolBar::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3, (long) style0))\n\n");
                #endif

                RETVAL_BOOL(((wxRibbonToolBar_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxPoint*) object_pointer0_2, *(wxSize*) object_pointer0_3, (long) style0));

                references->AddReference(parent0, "wxRibbonToolBar::Create at call 1 with 5 argument(s)");
                references->AddReference(pos0, "wxRibbonToolBar::Create at call 3 with 5 argument(s)");
                references->AddReference(size0, "wxRibbonToolBar::Create at call 3 with 5 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonToolBar::Create\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonToolBar::SetRows(int nMin, int nMax)
   Set the number of rows to distribute tool groups over. */
PHP_METHOD(php_wxRibbonToolBar, SetRows)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonToolBar::SetRows\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonToolBar* current_object;
    wxphp_object_type current_object_type;
    wxRibbonToolBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxRibbonToolBar_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxRibbonToolBar::SetRows call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXRIBBONTOOLBAR_TYPE){
                references = &((wxRibbonToolBar_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long nMin0;
    long nMax0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l|l' (&nMin0, &nMax0)\n");
        #endif

        char parse_parameters_string[] = "l|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &nMin0, &nMax0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonToolBar::SetRows((int) nMin0)\n\n");
                #endif

                ((wxRibbonToolBar_php*)native_object)->SetRows((int) nMin0);


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxRibbonToolBar::SetRows((int) nMin0, (int) nMax0)\n\n");
                #endif

                ((wxRibbonToolBar_php*)native_object)->SetRows((int) nMin0, (int) nMax0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxRibbonToolBar::SetRows\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRibbonToolBar::wxRibbonToolBar()
   Default constructor. */
PHP_METHOD(php_wxRibbonToolBar, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxRibbonToolBar::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxRibbonToolBar* current_object;
    wxRibbonToolBar_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    bool overload0_called = false;

    //Parameters for overload 1
    zval* parent1;
    wxWindow* object_pointer1_0 = 0;
    long id1;
    zval* pos1;
    wxPoint* object_pointer1_2 = 0;
    zval* size1;
    wxSize* object_pointer1_3 = 0;
    long style1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 1  && arguments_received <= 5)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z|lOOl' (&parent1, &id1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1)\n");
        #endif

        char parse_parameters_string[] = "z|lOOl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent1, &id1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent1)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent1)->native_object;
                    object_pointer1_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer1_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(pos1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos1)->native_object;
                    object_pointer1_2 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(size1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size1)->native_object;
                    object_pointer1_3 = (wxSize*) argument_native_object;
                    if (!object_pointer1_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct()\n");
                #endif

                native_object = new wxRibbonToolBar_php();

                native_object->references.Initialize();
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0)\n");
                #endif

                native_object = new wxRibbonToolBar_php((wxWindow*) object_pointer1_0);

                native_object->references.Initialize();
                ((wxRibbonToolBar_php*) native_object)->references.AddReference(parent1, "wxRibbonToolBar::wxRibbonToolBar at call 2 with 1 argument(s)");
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1)\n");
                #endif

                native_object = new wxRibbonToolBar_php((wxWindow*) object_pointer1_0, (wxWindowID) id1);

                native_object->references.Initialize();
                ((wxRibbonToolBar_php*) native_object)->references.AddReference(parent1, "wxRibbonToolBar::wxRibbonToolBar at call 2 with 2 argument(s)");
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2)\n");
                #endif

                native_object = new wxRibbonToolBar_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2);

                native_object->references.Initialize();
                ((wxRibbonToolBar_php*) native_object)->references.AddReference(parent1, "wxRibbonToolBar::wxRibbonToolBar at call 2 with 3 argument(s)");
                ((wxRibbonToolBar_php*) native_object)->references.AddReference(pos1, "wxRibbonToolBar::wxRibbonToolBar at call 4 with 3 argument(s)");
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3)\n");
                #endif

                native_object = new wxRibbonToolBar_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3);

                native_object->references.Initialize();
                ((wxRibbonToolBar_php*) native_object)->references.AddReference(parent1, "wxRibbonToolBar::wxRibbonToolBar at call 2 with 4 argument(s)");
                ((wxRibbonToolBar_php*) native_object)->references.AddReference(pos1, "wxRibbonToolBar::wxRibbonToolBar at call 4 with 4 argument(s)");
                ((wxRibbonToolBar_php*) native_object)->references.AddReference(size1, "wxRibbonToolBar::wxRibbonToolBar at call 4 with 4 argument(s)");
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3, (long) style1)\n");
                #endif

                native_object = new wxRibbonToolBar_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3, (long) style1);

                native_object->references.Initialize();
                ((wxRibbonToolBar_php*) native_object)->references.AddReference(parent1, "wxRibbonToolBar::wxRibbonToolBar at call 2 with 5 argument(s)");
                ((wxRibbonToolBar_php*) native_object)->references.AddReference(pos1, "wxRibbonToolBar::wxRibbonToolBar at call 4 with 5 argument(s)");
                ((wxRibbonToolBar_php*) native_object)->references.AddReference(size1, "wxRibbonToolBar::wxRibbonToolBar at call 4 with 5 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxRibbonToolBar_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxRibbonToolBar::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

