/*
 * @author Mário Soares
 * @contributors Jefferson González
 * @contributors René Vögeli / Rangee GmbH
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @note
 * This file was auto-generated by the wxPHP source maker
*/

#ifndef WXPHP_EVENTS_H_GUARD
#define WXPHP_EVENTS_H_GUARD

#include "references.h"
#include "object_types.h"

ZEND_BEGIN_ARG_INFO_EX(wxphp_events_get_args, 0, 0, 1)
    ZEND_ARG_INFO(0, name)
ZEND_END_ARG_INFO()

extern zend_class_entry* php_wxEventFilter_entry;
extern zend_object_handlers wxphp_wxEventFilter_object_handlers;
void php_wxEventFilter_destruction_handler(zend_resource*);

class wxEventFilter_php: public wxEventFilter{
    public:

    wxEventFilter_php():wxEventFilter(){}
    
    int FilterEvent(wxEvent& event);
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxEventFilter{
    wxEventFilter_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxEventFilter;

void php_wxEventFilter_free(void *object);
zend_object* php_wxEventFilter_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxEventFilter_functions[] = {
    PHP_ME(php_wxEventFilter, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxEventFilter * php_wxEventFilter_fetch_object(zend_object *obj) {
    return (zo_wxEventFilter *)(
        (char *)(obj) - XtOffsetOf(zo_wxEventFilter, zo)
    );
}

#define Z_wxEventFilter_P(zv) \
    php_wxEventFilter_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxKeyboardState_entry;
extern zend_object_handlers wxphp_wxKeyboardState_object_handlers;
void php_wxKeyboardState_destruction_handler(zend_resource*);

class wxKeyboardState_php: public wxKeyboardState{
    public:

    wxKeyboardState_php(bool controlDown=false, bool shiftDown=false, bool altDown=false, bool metaDown=false):wxKeyboardState(controlDown, shiftDown, altDown, metaDown){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxKeyboardState{
    wxKeyboardState_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxKeyboardState;

void php_wxKeyboardState_free(void *object);
zend_object* php_wxKeyboardState_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxKeyboardState_functions[] = {
    PHP_ME(php_wxKeyboardState, AltDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, ControlDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, GetModifiers, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, HasModifiers, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, MetaDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, RawControlDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, SetAltDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, SetControlDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, SetMetaDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, SetRawControlDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, SetShiftDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, ShiftDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxKeyboardState * php_wxKeyboardState_fetch_object(zend_object *obj) {
    return (zo_wxKeyboardState *)(
        (char *)(obj) - XtOffsetOf(zo_wxKeyboardState, zo)
    );
}

#define Z_wxKeyboardState_P(zv) \
    php_wxKeyboardState_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxAuiManagerEvent_entry;
extern zend_object_handlers wxphp_wxAuiManagerEvent_object_handlers;
void php_wxAuiManagerEvent_destruction_handler(zend_resource*);

class wxAuiManagerEvent_php: public wxAuiManagerEvent{
    public:

    wxAuiManagerEvent_php(wxEventType type=wxEVT_NULL):wxAuiManagerEvent(type){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxAuiManagerEvent{
    wxAuiManagerEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxAuiManagerEvent;

void php_wxAuiManagerEvent_free(void *object);
zend_object* php_wxAuiManagerEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxAuiManagerEvent_functions[] = {
    PHP_ME(php_wxAuiManagerEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxAuiManagerEvent, Veto, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAuiManagerEvent, SetPane, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAuiManagerEvent, SetManager, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAuiManagerEvent, SetDC, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAuiManagerEvent, SetCanVeto, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAuiManagerEvent, SetButton, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAuiManagerEvent, GetVeto, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAuiManagerEvent, GetPane, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAuiManagerEvent, GetManager, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAuiManagerEvent, GetDC, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAuiManagerEvent, GetButton, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAuiManagerEvent, CanVeto, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxAuiManagerEvent * php_wxAuiManagerEvent_fetch_object(zend_object *obj) {
    return (zo_wxAuiManagerEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxAuiManagerEvent, zo)
    );
}

#define Z_wxAuiManagerEvent_P(zv) \
    php_wxAuiManagerEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxCalendarEvent_entry;
extern zend_object_handlers wxphp_wxCalendarEvent_object_handlers;
void php_wxCalendarEvent_destruction_handler(zend_resource*);

class wxCalendarEvent_php: public wxCalendarEvent{
    public:

    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxCalendarEvent{
    wxCalendarEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxCalendarEvent;

void php_wxCalendarEvent_free(void *object);
zend_object* php_wxCalendarEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxCalendarEvent_functions[] = {
    PHP_ME(php_wxCalendarEvent, GetWeekDay, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalendarEvent, SetWeekDay, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxCalendarEvent * php_wxCalendarEvent_fetch_object(zend_object *obj) {
    return (zo_wxCalendarEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxCalendarEvent, zo)
    );
}

#define Z_wxCalendarEvent_P(zv) \
    php_wxCalendarEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxColourPickerEvent_entry;
extern zend_object_handlers wxphp_wxColourPickerEvent_object_handlers;
void php_wxColourPickerEvent_destruction_handler(zend_resource*);

class wxColourPickerEvent_php: public wxColourPickerEvent{
    public:

    wxColourPickerEvent_php(wxObject* generator, int id, const wxColour& colour):wxColourPickerEvent(generator, id, colour){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxColourPickerEvent{
    wxColourPickerEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxColourPickerEvent;

void php_wxColourPickerEvent_free(void *object);
zend_object* php_wxColourPickerEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxColourPickerEvent_functions[] = {
    PHP_ME(php_wxColourPickerEvent, GetColour, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColourPickerEvent, SetColour, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColourPickerEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxColourPickerEvent * php_wxColourPickerEvent_fetch_object(zend_object *obj) {
    return (zo_wxColourPickerEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxColourPickerEvent, zo)
    );
}

#define Z_wxColourPickerEvent_P(zv) \
    php_wxColourPickerEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxCollapsiblePaneEvent_entry;
extern zend_object_handlers wxphp_wxCollapsiblePaneEvent_object_handlers;
void php_wxCollapsiblePaneEvent_destruction_handler(zend_resource*);

class wxCollapsiblePaneEvent_php: public wxCollapsiblePaneEvent{
    public:

    wxCollapsiblePaneEvent_php(wxObject* generator, int id, bool collapsed):wxCollapsiblePaneEvent(generator, id, collapsed){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxCollapsiblePaneEvent{
    wxCollapsiblePaneEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxCollapsiblePaneEvent;

void php_wxCollapsiblePaneEvent_free(void *object);
zend_object* php_wxCollapsiblePaneEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxCollapsiblePaneEvent_functions[] = {
    PHP_ME(php_wxCollapsiblePaneEvent, GetCollapsed, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCollapsiblePaneEvent, SetCollapsed, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCollapsiblePaneEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxCollapsiblePaneEvent * php_wxCollapsiblePaneEvent_fetch_object(zend_object *obj) {
    return (zo_wxCollapsiblePaneEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxCollapsiblePaneEvent, zo)
    );
}

#define Z_wxCollapsiblePaneEvent_P(zv) \
    php_wxCollapsiblePaneEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxDataViewEvent_entry;
extern zend_object_handlers wxphp_wxDataViewEvent_object_handlers;
void php_wxDataViewEvent_destruction_handler(zend_resource*);

class wxDataViewEvent_php: public wxDataViewEvent{
    public:

    wxDataViewEvent_php(wxEventType evtType, wxDataViewCtrl* dvc, wxDataViewColumn* column, const wxDataViewItem& item=wxDataViewItem()):wxDataViewEvent(evtType, dvc, column, item){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxDataViewEvent{
    wxDataViewEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxDataViewEvent;

void php_wxDataViewEvent_free(void *object);
zend_object* php_wxDataViewEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxDataViewEvent_functions[] = {
    PHP_ME(php_wxDataViewEvent, GetItem, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDataViewEvent, GetCacheFrom, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDataViewEvent, GetCacheTo, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDataViewEvent, GetColumn, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDataViewEvent, GetDataBuffer, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDataViewEvent, GetDataFormat, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDataViewEvent, GetDataSize, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDataViewEvent, GetDataViewColumn, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDataViewEvent, GetModel, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDataViewEvent, GetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDataViewEvent, GetValue, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDataViewEvent, IsEditCancelled, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDataViewEvent, SetColumn, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDataViewEvent, SetDataObject, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDataViewEvent, SetValue, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDataViewEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxDataViewEvent * php_wxDataViewEvent_fetch_object(zend_object *obj) {
    return (zo_wxDataViewEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxDataViewEvent, zo)
    );
}

#define Z_wxDataViewEvent_P(zv) \
    php_wxDataViewEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxDateEvent_entry;
extern zend_object_handlers wxphp_wxDateEvent_object_handlers;
void php_wxDateEvent_destruction_handler(zend_resource*);

class wxDateEvent_php: public wxDateEvent{
    public:

    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxDateEvent{
    wxDateEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxDateEvent;

void php_wxDateEvent_free(void *object);
zend_object* php_wxDateEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxDateEvent_functions[] = {
    PHP_ME(php_wxDateEvent, GetDate, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDateEvent, SetDate, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxDateEvent * php_wxDateEvent_fetch_object(zend_object *obj) {
    return (zo_wxDateEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxDateEvent, zo)
    );
}

#define Z_wxDateEvent_P(zv) \
    php_wxDateEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxEvent_entry;
extern zend_object_handlers wxphp_wxEvent_object_handlers;
void php_wxEvent_destruction_handler(zend_resource*);

class wxEvent_php: public wxEvent{
    public:

    wxEvent_php(int id=0, wxEventType eventType=wxEVT_NULL):wxEvent(id, eventType){}
    
    wxEvent* Clone() const;
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxEvent{
    wxEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxEvent;

void php_wxEvent_free(void *object);
zend_object* php_wxEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxEvent_functions[] = {
    PHP_ME(php_wxEvent, GetEventCategory, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, GetEventObject, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, GetEventType, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, GetId, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, GetSkipped, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, GetTimestamp, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, IsCommandEvent, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, ResumePropagation, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, SetEventObject, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, SetEventType, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, SetId, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, SetTimestamp, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, ShouldPropagate, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, Skip, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, StopPropagation, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxEvent * php_wxEvent_fetch_object(zend_object *obj) {
    return (zo_wxEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxEvent, zo)
    );
}

#define Z_wxEvent_P(zv) \
    php_wxEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxEventBlocker_entry;
extern zend_object_handlers wxphp_wxEventBlocker_object_handlers;
void php_wxEventBlocker_destruction_handler(zend_resource*);

class wxEventBlocker_php: public wxEventBlocker{
    public:

    wxEventBlocker_php(wxWindow* win, wxEventType type=-1):wxEventBlocker(win, type){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxEventBlocker{
    wxEventBlocker_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxEventBlocker;

void php_wxEventBlocker_free(void *object);
zend_object* php_wxEventBlocker_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxEventBlocker_functions[] = {
    PHP_ME(php_wxEventBlocker, Block, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEventBlocker, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxEventBlocker * php_wxEventBlocker_fetch_object(zend_object *obj) {
    return (zo_wxEventBlocker *)(
        (char *)(obj) - XtOffsetOf(zo_wxEventBlocker, zo)
    );
}

#define Z_wxEventBlocker_P(zv) \
    php_wxEventBlocker_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxEvtHandler_entry;
extern zend_object_handlers wxphp_wxEvtHandler_object_handlers;
void php_wxEvtHandler_destruction_handler(zend_resource*);

class wxEvtHandler_php: public wxEvtHandler{
    public:

    wxEvtHandler_php():wxEvtHandler(){}
    
    bool TryAfter(wxEvent& event);
    bool TryBefore(wxEvent& event);
    

    void onEvent(wxEvent& evnt);
    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxEvtHandler{
    wxEvtHandler_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxEvtHandler;

void php_wxEvtHandler_free(void *object);
zend_object* php_wxEvtHandler_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxEvtHandler_functions[] = {
    PHP_ME(php_wxEvtHandler, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxEvtHandler, Connect, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvtHandler, Disconnect, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvtHandler, AddFilter, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvtHandler, AddPendingEvent, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvtHandler, DeletePendingEvents, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvtHandler, GetEvtHandlerEnabled, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvtHandler, GetNextHandler, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvtHandler, GetPreviousHandler, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvtHandler, IsUnlinked, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvtHandler, ProcessEvent, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvtHandler, ProcessEventLocally, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvtHandler, ProcessPendingEvents, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvtHandler, QueueEvent, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvtHandler, RemoveFilter, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvtHandler, SafelyProcessEvent, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvtHandler, SetEvtHandlerEnabled, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvtHandler, SetNextHandler, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvtHandler, SetPreviousHandler, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvtHandler, Unlink, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxEvtHandler * php_wxEvtHandler_fetch_object(zend_object *obj) {
    return (zo_wxEvtHandler *)(
        (char *)(obj) - XtOffsetOf(zo_wxEvtHandler, zo)
    );
}

#define Z_wxEvtHandler_P(zv) \
    php_wxEvtHandler_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxKeyEvent_entry;
extern zend_object_handlers wxphp_wxKeyEvent_object_handlers;
void php_wxKeyEvent_destruction_handler(zend_resource*);

class wxKeyEvent_php: public wxKeyEvent{
    public:

    wxKeyEvent_php(wxEventType keyEventType=wxEVT_NULL):wxKeyEvent(keyEventType){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxKeyEvent{
    wxKeyEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxKeyEvent;

void php_wxKeyEvent_free(void *object);
zend_object* php_wxKeyEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxKeyEvent_functions[] = {
    PHP_ME(php_wxKeyboardState, AltDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, ControlDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, GetModifiers, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, HasModifiers, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, MetaDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, RawControlDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, SetAltDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, SetControlDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, SetMetaDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, SetRawControlDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, SetShiftDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, ShiftDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxObject, UnShare, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxObject, UnRef, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxObject, IsSameAs, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxObject, Ref, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxObject, GetClassInfo, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxObject, IsKindOf, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, GetEventCategory, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, GetEventObject, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, GetEventType, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, GetId, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, GetSkipped, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, GetTimestamp, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, IsCommandEvent, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, ResumePropagation, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, SetEventObject, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, SetEventType, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, SetId, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, SetTimestamp, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, ShouldPropagate, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, Skip, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, StopPropagation, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyEvent, DoAllowNextEvent, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyEvent, GetKeyCode, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyEvent, GetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyEvent, GetRawKeyCode, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyEvent, GetRawKeyFlags, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyEvent, GetX, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyEvent, GetY, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyEvent, IsKeyInCategory, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyEvent, IsNextEventAllowed, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxKeyEvent * php_wxKeyEvent_fetch_object(zend_object *obj) {
    return (zo_wxKeyEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxKeyEvent, zo)
    );
}

#define Z_wxKeyEvent_P(zv) \
    php_wxKeyEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxScrollWinEvent_entry;
extern zend_object_handlers wxphp_wxScrollWinEvent_object_handlers;
void php_wxScrollWinEvent_destruction_handler(zend_resource*);

class wxScrollWinEvent_php: public wxScrollWinEvent{
    public:

    wxScrollWinEvent_php(wxEventType commandType=wxEVT_NULL, int pos=0, int orientation=0):wxScrollWinEvent(commandType, pos, orientation){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxScrollWinEvent{
    wxScrollWinEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxScrollWinEvent;

void php_wxScrollWinEvent_free(void *object);
zend_object* php_wxScrollWinEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxScrollWinEvent_functions[] = {
    PHP_ME(php_wxScrollWinEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxScrollWinEvent, SetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxScrollWinEvent, SetOrientation, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxScrollWinEvent, GetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxScrollWinEvent, GetOrientation, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxScrollWinEvent * php_wxScrollWinEvent_fetch_object(zend_object *obj) {
    return (zo_wxScrollWinEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxScrollWinEvent, zo)
    );
}

#define Z_wxScrollWinEvent_P(zv) \
    php_wxScrollWinEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxSysColourChangedEvent_entry;
extern zend_object_handlers wxphp_wxSysColourChangedEvent_object_handlers;
void php_wxSysColourChangedEvent_destruction_handler(zend_resource*);

class wxSysColourChangedEvent_php: public wxSysColourChangedEvent{
    public:

    wxSysColourChangedEvent_php():wxSysColourChangedEvent(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxSysColourChangedEvent{
    wxSysColourChangedEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxSysColourChangedEvent;

void php_wxSysColourChangedEvent_free(void *object);
zend_object* php_wxSysColourChangedEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxSysColourChangedEvent_functions[] = {
    PHP_ME(php_wxSysColourChangedEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxSysColourChangedEvent * php_wxSysColourChangedEvent_fetch_object(zend_object *obj) {
    return (zo_wxSysColourChangedEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxSysColourChangedEvent, zo)
    );
}

#define Z_wxSysColourChangedEvent_P(zv) \
    php_wxSysColourChangedEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxCommandEvent_entry;
extern zend_object_handlers wxphp_wxCommandEvent_object_handlers;
void php_wxCommandEvent_destruction_handler(zend_resource*);

class wxCommandEvent_php: public wxCommandEvent{
    public:

    wxCommandEvent_php(wxEventType commandEventType=wxEVT_NULL, int id=0):wxCommandEvent(commandEventType, id){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxCommandEvent{
    wxCommandEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxCommandEvent;

void php_wxCommandEvent_free(void *object);
zend_object* php_wxCommandEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxCommandEvent_functions[] = {
    PHP_ME(php_wxCommandEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxCommandEvent, SetString, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCommandEvent, SetInt, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCommandEvent, SetExtraLong, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCommandEvent, IsSelection, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCommandEvent, IsChecked, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCommandEvent, GetString, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCommandEvent, GetSelection, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCommandEvent, GetInt, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCommandEvent, GetExtraLong, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxCommandEvent * php_wxCommandEvent_fetch_object(zend_object *obj) {
    return (zo_wxCommandEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxCommandEvent, zo)
    );
}

#define Z_wxCommandEvent_P(zv) \
    php_wxCommandEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxWindowCreateEvent_entry;
extern zend_object_handlers wxphp_wxWindowCreateEvent_object_handlers;
void php_wxWindowCreateEvent_destruction_handler(zend_resource*);

class wxWindowCreateEvent_php: public wxWindowCreateEvent{
    public:

    wxWindowCreateEvent_php(wxWindow* win=NULL):wxWindowCreateEvent(win){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxWindowCreateEvent{
    wxWindowCreateEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxWindowCreateEvent;

void php_wxWindowCreateEvent_free(void *object);
zend_object* php_wxWindowCreateEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxWindowCreateEvent_functions[] = {
    PHP_ME(php_wxWindowCreateEvent, GetWindow, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxWindowCreateEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxWindowCreateEvent * php_wxWindowCreateEvent_fetch_object(zend_object *obj) {
    return (zo_wxWindowCreateEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxWindowCreateEvent, zo)
    );
}

#define Z_wxWindowCreateEvent_P(zv) \
    php_wxWindowCreateEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxPaintEvent_entry;
extern zend_object_handlers wxphp_wxPaintEvent_object_handlers;
void php_wxPaintEvent_destruction_handler(zend_resource*);

class wxPaintEvent_php: public wxPaintEvent{
    public:

    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxPaintEvent{
    wxPaintEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxPaintEvent;

void php_wxPaintEvent_free(void *object);
zend_object* php_wxPaintEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxPaintEvent_functions[] = {
    PHP_FE_END
};
#endif


static inline zo_wxPaintEvent * php_wxPaintEvent_fetch_object(zend_object *obj) {
    return (zo_wxPaintEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxPaintEvent, zo)
    );
}

#define Z_wxPaintEvent_P(zv) \
    php_wxPaintEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxMaximizeEvent_entry;
extern zend_object_handlers wxphp_wxMaximizeEvent_object_handlers;
void php_wxMaximizeEvent_destruction_handler(zend_resource*);

class wxMaximizeEvent_php: public wxMaximizeEvent{
    public:

    wxMaximizeEvent_php(int id=0):wxMaximizeEvent(id){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxMaximizeEvent{
    wxMaximizeEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxMaximizeEvent;

void php_wxMaximizeEvent_free(void *object);
zend_object* php_wxMaximizeEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxMaximizeEvent_functions[] = {
    PHP_ME(php_wxMaximizeEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxMaximizeEvent * php_wxMaximizeEvent_fetch_object(zend_object *obj) {
    return (zo_wxMaximizeEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxMaximizeEvent, zo)
    );
}

#define Z_wxMaximizeEvent_P(zv) \
    php_wxMaximizeEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxUpdateUIEvent_entry;
extern zend_object_handlers wxphp_wxUpdateUIEvent_object_handlers;
void php_wxUpdateUIEvent_destruction_handler(zend_resource*);

class wxUpdateUIEvent_php: public wxUpdateUIEvent{
    public:

    wxUpdateUIEvent_php(wxWindowID commandId=0):wxUpdateUIEvent(commandId){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxUpdateUIEvent{
    wxUpdateUIEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxUpdateUIEvent;

void php_wxUpdateUIEvent_free(void *object);
zend_object* php_wxUpdateUIEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxUpdateUIEvent_functions[] = {
    PHP_ME(php_wxUpdateUIEvent, CanUpdate, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxUpdateUIEvent, Check, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxUpdateUIEvent, Enable, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxUpdateUIEvent, GetEnabled, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxUpdateUIEvent, GetChecked, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxUpdateUIEvent, GetMode, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxUpdateUIEvent, GetSetChecked, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxUpdateUIEvent, GetSetEnabled, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxUpdateUIEvent, GetSetShown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxUpdateUIEvent, GetSetText, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxUpdateUIEvent, GetShown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxUpdateUIEvent, GetText, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxUpdateUIEvent, GetUpdateInterval, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxUpdateUIEvent, ResetUpdateTime, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxUpdateUIEvent, SetMode, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxUpdateUIEvent, SetText, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxUpdateUIEvent, SetUpdateInterval, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxUpdateUIEvent, Show, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxUpdateUIEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxUpdateUIEvent * php_wxUpdateUIEvent_fetch_object(zend_object *obj) {
    return (zo_wxUpdateUIEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxUpdateUIEvent, zo)
    );
}

#define Z_wxUpdateUIEvent_P(zv) \
    php_wxUpdateUIEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxClipboardTextEvent_entry;
extern zend_object_handlers wxphp_wxClipboardTextEvent_object_handlers;
void php_wxClipboardTextEvent_destruction_handler(zend_resource*);

class wxClipboardTextEvent_php: public wxClipboardTextEvent{
    public:

    wxClipboardTextEvent_php(wxEventType commandType=wxEVT_NULL, int id=0):wxClipboardTextEvent(commandType, id){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxClipboardTextEvent{
    wxClipboardTextEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxClipboardTextEvent;

void php_wxClipboardTextEvent_free(void *object);
zend_object* php_wxClipboardTextEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxClipboardTextEvent_functions[] = {
    PHP_ME(php_wxClipboardTextEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxClipboardTextEvent * php_wxClipboardTextEvent_fetch_object(zend_object *obj) {
    return (zo_wxClipboardTextEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxClipboardTextEvent, zo)
    );
}

#define Z_wxClipboardTextEvent_P(zv) \
    php_wxClipboardTextEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxMouseEvent_entry;
extern zend_object_handlers wxphp_wxMouseEvent_object_handlers;
void php_wxMouseEvent_destruction_handler(zend_resource*);

class wxMouseEvent_php: public wxMouseEvent{
    public:

    wxMouseEvent_php(wxEventType mouseEventType=wxEVT_NULL):wxMouseEvent(mouseEventType){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxMouseEvent{
    wxMouseEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxMouseEvent;

void php_wxMouseEvent_free(void *object);
zend_object* php_wxMouseEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxMouseEvent_functions[] = {
    PHP_ME(php_wxObject, UnShare, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxObject, UnRef, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxObject, IsSameAs, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxObject, Ref, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxObject, GetClassInfo, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxObject, IsKindOf, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, GetEventCategory, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, GetEventObject, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, GetEventType, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, GetId, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, GetSkipped, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, GetTimestamp, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, IsCommandEvent, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, ResumePropagation, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, SetEventObject, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, SetEventType, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, SetId, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, SetTimestamp, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, ShouldPropagate, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, Skip, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEvent, StopPropagation, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, AltDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, ControlDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, GetModifiers, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, HasModifiers, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, RawControlDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, SetAltDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, SetControlDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, SetMetaDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, SetRawControlDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, SetShiftDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxKeyboardState, ShiftDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, Aux1IsDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, Aux2IsDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, GetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, GetX, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, GetY, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, LeftIsDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, MiddleIsDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, RightIsDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, SetAux1Down, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, SetAux2Down, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, SetLeftDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, SetMiddleDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, SetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, SetRightDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, SetState, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, SetX, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, SetY, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, Aux1DClick, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, Aux1Down, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, Aux1Up, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, Aux2DClick, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, Aux2Down, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, Aux2Up, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, Button, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, ButtonDClick, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, ButtonDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, ButtonUp, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, Dragging, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, Entering, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, GetButton, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, GetClickCount, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, GetLinesPerAction, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, GetLogicalPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, GetWheelDelta, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, GetWheelRotation, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, IsButton, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, IsPageScroll, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, Leaving, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, LeftDClick, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, LeftDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, LeftUp, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, MetaDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, MiddleDClick, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, MiddleDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, MiddleUp, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, Moving, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, RightDClick, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, RightDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, RightUp, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxMouseEvent, GetWheelAxis, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxMouseEvent * php_wxMouseEvent_fetch_object(zend_object *obj) {
    return (zo_wxMouseEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxMouseEvent, zo)
    );
}

#define Z_wxMouseEvent_P(zv) \
    php_wxMouseEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxActivateEvent_entry;
extern zend_object_handlers wxphp_wxActivateEvent_object_handlers;
void php_wxActivateEvent_destruction_handler(zend_resource*);

class wxActivateEvent_php: public wxActivateEvent{
    public:

    wxActivateEvent_php(wxEventType eventType=wxEVT_NULL, bool active=true, int id=0, Reason ActivationReason=Reason_Unknown):wxActivateEvent(eventType, active, id, ActivationReason){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxActivateEvent{
    wxActivateEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxActivateEvent;

void php_wxActivateEvent_free(void *object);
zend_object* php_wxActivateEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxActivateEvent_functions[] = {
    PHP_ME(php_wxActivateEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxActivateEvent, GetActive, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxActivateEvent * php_wxActivateEvent_fetch_object(zend_object *obj) {
    return (zo_wxActivateEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxActivateEvent, zo)
    );
}

#define Z_wxActivateEvent_P(zv) \
    php_wxActivateEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxContextMenuEvent_entry;
extern zend_object_handlers wxphp_wxContextMenuEvent_object_handlers;
void php_wxContextMenuEvent_destruction_handler(zend_resource*);

class wxContextMenuEvent_php: public wxContextMenuEvent{
    public:

    wxContextMenuEvent_php(wxEventType type=wxEVT_NULL, int id=0, const wxPoint& pos=wxDefaultPosition):wxContextMenuEvent(type, id, pos){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxContextMenuEvent{
    wxContextMenuEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxContextMenuEvent;

void php_wxContextMenuEvent_free(void *object);
zend_object* php_wxContextMenuEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxContextMenuEvent_functions[] = {
    PHP_ME(php_wxContextMenuEvent, GetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxContextMenuEvent, SetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxContextMenuEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxContextMenuEvent * php_wxContextMenuEvent_fetch_object(zend_object *obj) {
    return (zo_wxContextMenuEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxContextMenuEvent, zo)
    );
}

#define Z_wxContextMenuEvent_P(zv) \
    php_wxContextMenuEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxEraseEvent_entry;
extern zend_object_handlers wxphp_wxEraseEvent_object_handlers;
void php_wxEraseEvent_destruction_handler(zend_resource*);

class wxEraseEvent_php: public wxEraseEvent{
    public:

    wxEraseEvent_php(int id=0, wxDC* dc=NULL):wxEraseEvent(id, dc){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxEraseEvent{
    wxEraseEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxEraseEvent;

void php_wxEraseEvent_free(void *object);
zend_object* php_wxEraseEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxEraseEvent_functions[] = {
    PHP_ME(php_wxEraseEvent, GetDC, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEraseEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxEraseEvent * php_wxEraseEvent_fetch_object(zend_object *obj) {
    return (zo_wxEraseEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxEraseEvent, zo)
    );
}

#define Z_wxEraseEvent_P(zv) \
    php_wxEraseEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxFocusEvent_entry;
extern zend_object_handlers wxphp_wxFocusEvent_object_handlers;
void php_wxFocusEvent_destruction_handler(zend_resource*);

class wxFocusEvent_php: public wxFocusEvent{
    public:

    wxFocusEvent_php(wxEventType eventType=wxEVT_NULL, int id=0):wxFocusEvent(eventType, id){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxFocusEvent{
    wxFocusEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxFocusEvent;

void php_wxFocusEvent_free(void *object);
zend_object* php_wxFocusEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxFocusEvent_functions[] = {
    PHP_ME(php_wxFocusEvent, GetWindow, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFocusEvent, SetWindow, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFocusEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxFocusEvent * php_wxFocusEvent_fetch_object(zend_object *obj) {
    return (zo_wxFocusEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxFocusEvent, zo)
    );
}

#define Z_wxFocusEvent_P(zv) \
    php_wxFocusEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxChildFocusEvent_entry;
extern zend_object_handlers wxphp_wxChildFocusEvent_object_handlers;
void php_wxChildFocusEvent_destruction_handler(zend_resource*);

class wxChildFocusEvent_php: public wxChildFocusEvent{
    public:

    wxChildFocusEvent_php(wxWindow* win=NULL):wxChildFocusEvent(win){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxChildFocusEvent{
    wxChildFocusEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxChildFocusEvent;

void php_wxChildFocusEvent_free(void *object);
zend_object* php_wxChildFocusEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxChildFocusEvent_functions[] = {
    PHP_ME(php_wxChildFocusEvent, GetWindow, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxChildFocusEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxChildFocusEvent * php_wxChildFocusEvent_fetch_object(zend_object *obj) {
    return (zo_wxChildFocusEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxChildFocusEvent, zo)
    );
}

#define Z_wxChildFocusEvent_P(zv) \
    php_wxChildFocusEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxDisplayChangedEvent_entry;
extern zend_object_handlers wxphp_wxDisplayChangedEvent_object_handlers;
void php_wxDisplayChangedEvent_destruction_handler(zend_resource*);

class wxDisplayChangedEvent_php: public wxDisplayChangedEvent{
    public:

    wxDisplayChangedEvent_php():wxDisplayChangedEvent(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxDisplayChangedEvent{
    wxDisplayChangedEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxDisplayChangedEvent;

void php_wxDisplayChangedEvent_free(void *object);
zend_object* php_wxDisplayChangedEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxDisplayChangedEvent_functions[] = {
    PHP_ME(php_wxDisplayChangedEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxDisplayChangedEvent * php_wxDisplayChangedEvent_fetch_object(zend_object *obj) {
    return (zo_wxDisplayChangedEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxDisplayChangedEvent, zo)
    );
}

#define Z_wxDisplayChangedEvent_P(zv) \
    php_wxDisplayChangedEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxNotifyEvent_entry;
extern zend_object_handlers wxphp_wxNotifyEvent_object_handlers;
void php_wxNotifyEvent_destruction_handler(zend_resource*);

class wxNotifyEvent_php: public wxNotifyEvent{
    public:

    wxNotifyEvent_php(wxEventType eventType=wxEVT_NULL, int id=0):wxNotifyEvent(eventType, id){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxNotifyEvent{
    wxNotifyEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxNotifyEvent;

void php_wxNotifyEvent_free(void *object);
zend_object* php_wxNotifyEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxNotifyEvent_functions[] = {
    PHP_ME(php_wxNotifyEvent, Allow, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNotifyEvent, IsAllowed, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNotifyEvent, Veto, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNotifyEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxNotifyEvent * php_wxNotifyEvent_fetch_object(zend_object *obj) {
    return (zo_wxNotifyEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxNotifyEvent, zo)
    );
}

#define Z_wxNotifyEvent_P(zv) \
    php_wxNotifyEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxThreadEvent_entry;
extern zend_object_handlers wxphp_wxThreadEvent_object_handlers;
void php_wxThreadEvent_destruction_handler(zend_resource*);

class wxThreadEvent_php: public wxThreadEvent{
    public:

    wxThreadEvent_php(wxEventType eventType=wxEVT_THREAD, int id=wxID_ANY):wxThreadEvent(eventType, id){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxThreadEvent{
    wxThreadEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxThreadEvent;

void php_wxThreadEvent_free(void *object);
zend_object* php_wxThreadEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxThreadEvent_functions[] = {
    PHP_ME(php_wxThreadEvent, CloneMethod, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxThreadEvent, GetExtraLong, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxThreadEvent, GetEventCategory, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxThreadEvent, GetInt, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxThreadEvent, GetString, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxThreadEvent, SetInt, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxThreadEvent, SetExtraLong, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxThreadEvent, SetString, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxThreadEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxThreadEvent * php_wxThreadEvent_fetch_object(zend_object *obj) {
    return (zo_wxThreadEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxThreadEvent, zo)
    );
}

#define Z_wxThreadEvent_P(zv) \
    php_wxThreadEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxHelpEvent_entry;
extern zend_object_handlers wxphp_wxHelpEvent_object_handlers;
void php_wxHelpEvent_destruction_handler(zend_resource*);

class wxHelpEvent_php: public wxHelpEvent{
    public:

    wxHelpEvent_php(wxEventType type=wxEVT_NULL, wxWindowID winid=0, const wxPoint& pt=wxDefaultPosition, wxHelpEvent::Origin origin=Origin_Unknown):wxHelpEvent(type, winid, pt, origin){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxHelpEvent{
    wxHelpEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxHelpEvent;

void php_wxHelpEvent_free(void *object);
zend_object* php_wxHelpEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxHelpEvent_functions[] = {
    PHP_ME(php_wxHelpEvent, GetOrigin, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxHelpEvent, GetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxHelpEvent, SetOrigin, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxHelpEvent, SetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxHelpEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxHelpEvent * php_wxHelpEvent_fetch_object(zend_object *obj) {
    return (zo_wxHelpEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxHelpEvent, zo)
    );
}

#define Z_wxHelpEvent_P(zv) \
    php_wxHelpEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxScrollEvent_entry;
extern zend_object_handlers wxphp_wxScrollEvent_object_handlers;
void php_wxScrollEvent_destruction_handler(zend_resource*);

class wxScrollEvent_php: public wxScrollEvent{
    public:

    wxScrollEvent_php(wxEventType commandType=wxEVT_NULL, int id=0, int pos=0, int orientation=0):wxScrollEvent(commandType, id, pos, orientation){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxScrollEvent{
    wxScrollEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxScrollEvent;

void php_wxScrollEvent_free(void *object);
zend_object* php_wxScrollEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxScrollEvent_functions[] = {
    PHP_ME(php_wxScrollEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxScrollEvent, SetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxScrollEvent, SetOrientation, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxScrollEvent, GetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxScrollEvent, GetOrientation, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxScrollEvent * php_wxScrollEvent_fetch_object(zend_object *obj) {
    return (zo_wxScrollEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxScrollEvent, zo)
    );
}

#define Z_wxScrollEvent_P(zv) \
    php_wxScrollEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxIdleEvent_entry;
extern zend_object_handlers wxphp_wxIdleEvent_object_handlers;
void php_wxIdleEvent_destruction_handler(zend_resource*);

class wxIdleEvent_php: public wxIdleEvent{
    public:

    wxIdleEvent_php():wxIdleEvent(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxIdleEvent{
    wxIdleEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxIdleEvent;

void php_wxIdleEvent_free(void *object);
zend_object* php_wxIdleEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxIdleEvent_functions[] = {
    PHP_ME(php_wxIdleEvent, GetMode, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxIdleEvent, MoreRequested, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxIdleEvent, RequestMore, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxIdleEvent, SetMode, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxIdleEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxIdleEvent * php_wxIdleEvent_fetch_object(zend_object *obj) {
    return (zo_wxIdleEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxIdleEvent, zo)
    );
}

#define Z_wxIdleEvent_P(zv) \
    php_wxIdleEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxInitDialogEvent_entry;
extern zend_object_handlers wxphp_wxInitDialogEvent_object_handlers;
void php_wxInitDialogEvent_destruction_handler(zend_resource*);

class wxInitDialogEvent_php: public wxInitDialogEvent{
    public:

    wxInitDialogEvent_php(int id=0):wxInitDialogEvent(id){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxInitDialogEvent{
    wxInitDialogEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxInitDialogEvent;

void php_wxInitDialogEvent_free(void *object);
zend_object* php_wxInitDialogEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxInitDialogEvent_functions[] = {
    PHP_ME(php_wxInitDialogEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxInitDialogEvent * php_wxInitDialogEvent_fetch_object(zend_object *obj) {
    return (zo_wxInitDialogEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxInitDialogEvent, zo)
    );
}

#define Z_wxInitDialogEvent_P(zv) \
    php_wxInitDialogEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxWindowDestroyEvent_entry;
extern zend_object_handlers wxphp_wxWindowDestroyEvent_object_handlers;
void php_wxWindowDestroyEvent_destruction_handler(zend_resource*);

class wxWindowDestroyEvent_php: public wxWindowDestroyEvent{
    public:

    wxWindowDestroyEvent_php(wxWindow* win=NULL):wxWindowDestroyEvent(win){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxWindowDestroyEvent{
    wxWindowDestroyEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxWindowDestroyEvent;

void php_wxWindowDestroyEvent_free(void *object);
zend_object* php_wxWindowDestroyEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxWindowDestroyEvent_functions[] = {
    PHP_ME(php_wxWindowDestroyEvent, GetWindow, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxWindowDestroyEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxWindowDestroyEvent * php_wxWindowDestroyEvent_fetch_object(zend_object *obj) {
    return (zo_wxWindowDestroyEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxWindowDestroyEvent, zo)
    );
}

#define Z_wxWindowDestroyEvent_P(zv) \
    php_wxWindowDestroyEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxNavigationKeyEvent_entry;
extern zend_object_handlers wxphp_wxNavigationKeyEvent_object_handlers;
void php_wxNavigationKeyEvent_destruction_handler(zend_resource*);

class wxNavigationKeyEvent_php: public wxNavigationKeyEvent{
    public:

    wxNavigationKeyEvent_php():wxNavigationKeyEvent(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxNavigationKeyEvent{
    wxNavigationKeyEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxNavigationKeyEvent;

void php_wxNavigationKeyEvent_free(void *object);
zend_object* php_wxNavigationKeyEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxNavigationKeyEvent_functions[] = {
    PHP_ME(php_wxNavigationKeyEvent, GetCurrentFocus, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNavigationKeyEvent, GetDirection, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNavigationKeyEvent, IsFromTab, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNavigationKeyEvent, IsWindowChange, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNavigationKeyEvent, SetCurrentFocus, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNavigationKeyEvent, SetDirection, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNavigationKeyEvent, SetFlags, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNavigationKeyEvent, SetFromTab, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNavigationKeyEvent, SetWindowChange, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNavigationKeyEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxNavigationKeyEvent * php_wxNavigationKeyEvent_fetch_object(zend_object *obj) {
    return (zo_wxNavigationKeyEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxNavigationKeyEvent, zo)
    );
}

#define Z_wxNavigationKeyEvent_P(zv) \
    php_wxNavigationKeyEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxCloseEvent_entry;
extern zend_object_handlers wxphp_wxCloseEvent_object_handlers;
void php_wxCloseEvent_destruction_handler(zend_resource*);

class wxCloseEvent_php: public wxCloseEvent{
    public:

    wxCloseEvent_php(wxEventType commandEventType=wxEVT_NULL, int id=0):wxCloseEvent(commandEventType, id){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxCloseEvent{
    wxCloseEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxCloseEvent;

void php_wxCloseEvent_free(void *object);
zend_object* php_wxCloseEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxCloseEvent_functions[] = {
    PHP_ME(php_wxCloseEvent, CanVeto, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCloseEvent, GetLoggingOff, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCloseEvent, SetCanVeto, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCloseEvent, SetLoggingOff, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCloseEvent, Veto, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCloseEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxCloseEvent * php_wxCloseEvent_fetch_object(zend_object *obj) {
    return (zo_wxCloseEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxCloseEvent, zo)
    );
}

#define Z_wxCloseEvent_P(zv) \
    php_wxCloseEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxMenuEvent_entry;
extern zend_object_handlers wxphp_wxMenuEvent_object_handlers;
void php_wxMenuEvent_destruction_handler(zend_resource*);

class wxMenuEvent_php: public wxMenuEvent{
    public:

    wxMenuEvent_php(wxEventType type=wxEVT_NULL, int id=0, wxMenu* menu=NULL):wxMenuEvent(type, id, menu){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxMenuEvent{
    wxMenuEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxMenuEvent;

void php_wxMenuEvent_free(void *object);
zend_object* php_wxMenuEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxMenuEvent_functions[] = {
    PHP_ME(php_wxMenuEvent, GetMenu, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMenuEvent, GetMenuId, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMenuEvent, IsPopup, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMenuEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxMenuEvent * php_wxMenuEvent_fetch_object(zend_object *obj) {
    return (zo_wxMenuEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxMenuEvent, zo)
    );
}

#define Z_wxMenuEvent_P(zv) \
    php_wxMenuEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxMoveEvent_entry;
extern zend_object_handlers wxphp_wxMoveEvent_object_handlers;
void php_wxMoveEvent_destruction_handler(zend_resource*);

class wxMoveEvent_php: public wxMoveEvent{
    public:

    wxMoveEvent_php(const wxPoint& pt, int id=0):wxMoveEvent(pt, id){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxMoveEvent{
    wxMoveEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxMoveEvent;

void php_wxMoveEvent_free(void *object);
zend_object* php_wxMoveEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxMoveEvent_functions[] = {
    PHP_ME(php_wxMoveEvent, GetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMoveEvent, GetRect, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMoveEvent, SetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMoveEvent, SetRect, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMoveEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxMoveEvent * php_wxMoveEvent_fetch_object(zend_object *obj) {
    return (zo_wxMoveEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxMoveEvent, zo)
    );
}

#define Z_wxMoveEvent_P(zv) \
    php_wxMoveEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxSizeEvent_entry;
extern zend_object_handlers wxphp_wxSizeEvent_object_handlers;
void php_wxSizeEvent_destruction_handler(zend_resource*);

class wxSizeEvent_php: public wxSizeEvent{
    public:

    wxSizeEvent_php(const wxSize& sz, int id=0):wxSizeEvent(sz, id){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxSizeEvent{
    wxSizeEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxSizeEvent;

void php_wxSizeEvent_free(void *object);
zend_object* php_wxSizeEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxSizeEvent_functions[] = {
    PHP_ME(php_wxSizeEvent, GetRect, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSizeEvent, GetSize, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSizeEvent, SetRect, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSizeEvent, SetSize, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSizeEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxSizeEvent * php_wxSizeEvent_fetch_object(zend_object *obj) {
    return (zo_wxSizeEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxSizeEvent, zo)
    );
}

#define Z_wxSizeEvent_P(zv) \
    php_wxSizeEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxSetCursorEvent_entry;
extern zend_object_handlers wxphp_wxSetCursorEvent_object_handlers;
void php_wxSetCursorEvent_destruction_handler(zend_resource*);

class wxSetCursorEvent_php: public wxSetCursorEvent{
    public:

    wxSetCursorEvent_php(wxCoord x=0, wxCoord y=0):wxSetCursorEvent(x, y){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxSetCursorEvent{
    wxSetCursorEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxSetCursorEvent;

void php_wxSetCursorEvent_free(void *object);
zend_object* php_wxSetCursorEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxSetCursorEvent_functions[] = {
    PHP_ME(php_wxSetCursorEvent, GetCursor, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSetCursorEvent, GetX, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSetCursorEvent, GetY, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSetCursorEvent, HasCursor, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSetCursorEvent, SetCursor, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSetCursorEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxSetCursorEvent * php_wxSetCursorEvent_fetch_object(zend_object *obj) {
    return (zo_wxSetCursorEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxSetCursorEvent, zo)
    );
}

#define Z_wxSetCursorEvent_P(zv) \
    php_wxSetCursorEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxFileCtrlEvent_entry;
extern zend_object_handlers wxphp_wxFileCtrlEvent_object_handlers;
void php_wxFileCtrlEvent_destruction_handler(zend_resource*);

class wxFileCtrlEvent_php: public wxFileCtrlEvent{
    public:

    wxFileCtrlEvent_php(wxEventType type, wxObject* evtObject, int id):wxFileCtrlEvent(type, evtObject, id){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxFileCtrlEvent{
    wxFileCtrlEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxFileCtrlEvent;

void php_wxFileCtrlEvent_free(void *object);
zend_object* php_wxFileCtrlEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxFileCtrlEvent_functions[] = {
    PHP_ME(php_wxFileCtrlEvent, GetDirectory, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileCtrlEvent, GetFile, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileCtrlEvent, GetFiles, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileCtrlEvent, GetFilterIndex, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileCtrlEvent, SetDirectory, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileCtrlEvent, SetFiles, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileCtrlEvent, SetFilterIndex, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileCtrlEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxFileCtrlEvent * php_wxFileCtrlEvent_fetch_object(zend_object *obj) {
    return (zo_wxFileCtrlEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxFileCtrlEvent, zo)
    );
}

#define Z_wxFileCtrlEvent_P(zv) \
    php_wxFileCtrlEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxFileDirPickerEvent_entry;
extern zend_object_handlers wxphp_wxFileDirPickerEvent_object_handlers;
void php_wxFileDirPickerEvent_destruction_handler(zend_resource*);

class wxFileDirPickerEvent_php: public wxFileDirPickerEvent{
    public:

    wxFileDirPickerEvent_php(wxEventType type, wxObject* generator, int id, const wxString& path):wxFileDirPickerEvent(type, generator, id, path){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxFileDirPickerEvent{
    wxFileDirPickerEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxFileDirPickerEvent;

void php_wxFileDirPickerEvent_free(void *object);
zend_object* php_wxFileDirPickerEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxFileDirPickerEvent_functions[] = {
    PHP_ME(php_wxFileDirPickerEvent, GetPath, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileDirPickerEvent, SetPath, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileDirPickerEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxFileDirPickerEvent * php_wxFileDirPickerEvent_fetch_object(zend_object *obj) {
    return (zo_wxFileDirPickerEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxFileDirPickerEvent, zo)
    );
}

#define Z_wxFileDirPickerEvent_P(zv) \
    php_wxFileDirPickerEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxFontPickerEvent_entry;
extern zend_object_handlers wxphp_wxFontPickerEvent_object_handlers;
void php_wxFontPickerEvent_destruction_handler(zend_resource*);

class wxFontPickerEvent_php: public wxFontPickerEvent{
    public:

    wxFontPickerEvent_php(wxObject* generator, int id, const wxFont& font):wxFontPickerEvent(generator, id, font){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxFontPickerEvent{
    wxFontPickerEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxFontPickerEvent;

void php_wxFontPickerEvent_free(void *object);
zend_object* php_wxFontPickerEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxFontPickerEvent_functions[] = {
    PHP_ME(php_wxFontPickerEvent, GetFont, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontPickerEvent, SetFont, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontPickerEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxFontPickerEvent * php_wxFontPickerEvent_fetch_object(zend_object *obj) {
    return (zo_wxFontPickerEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxFontPickerEvent, zo)
    );
}

#define Z_wxFontPickerEvent_P(zv) \
    php_wxFontPickerEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxFileSystemWatcherEvent_entry;
extern zend_object_handlers wxphp_wxFileSystemWatcherEvent_object_handlers;
void php_wxFileSystemWatcherEvent_destruction_handler(zend_resource*);

class wxFileSystemWatcherEvent_php: public wxFileSystemWatcherEvent{
    public:

    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxFileSystemWatcherEvent{
    wxFileSystemWatcherEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxFileSystemWatcherEvent;

void php_wxFileSystemWatcherEvent_free(void *object);
zend_object* php_wxFileSystemWatcherEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxFileSystemWatcherEvent_functions[] = {
    PHP_ME(php_wxFileSystemWatcherEvent, GetChangeType, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileSystemWatcherEvent, GetErrorDescription, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileSystemWatcherEvent, GetNewPath, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileSystemWatcherEvent, GetPath, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileSystemWatcherEvent, IsError, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileSystemWatcherEvent, ToString, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxFileSystemWatcherEvent * php_wxFileSystemWatcherEvent_fetch_object(zend_object *obj) {
    return (zo_wxFileSystemWatcherEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxFileSystemWatcherEvent, zo)
    );
}

#define Z_wxFileSystemWatcherEvent_P(zv) \
    php_wxFileSystemWatcherEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxGridEvent_entry;
extern zend_object_handlers wxphp_wxGridEvent_object_handlers;
void php_wxGridEvent_destruction_handler(zend_resource*);

class wxGridEvent_php: public wxGridEvent{
    public:

    wxGridEvent_php():wxGridEvent(){}
    wxGridEvent_php(int id, wxEventType type, wxObject* obj, int row=-1, int col=-1, int x=-1, int y=-1, bool sel=true, const wxKeyboardState& kbd=wxKeyboardState()):wxGridEvent(id, type, obj, row, col, x, y, sel, kbd){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxGridEvent{
    wxGridEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxGridEvent;

void php_wxGridEvent_free(void *object);
zend_object* php_wxGridEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxGridEvent_functions[] = {
    PHP_ME(php_wxGridEvent, AltDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridEvent, ControlDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridEvent, GetCol, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridEvent, GetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridEvent, GetRow, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridEvent, MetaDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridEvent, Selecting, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridEvent, ShiftDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxGridEvent * php_wxGridEvent_fetch_object(zend_object *obj) {
    return (zo_wxGridEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxGridEvent, zo)
    );
}

#define Z_wxGridEvent_P(zv) \
    php_wxGridEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxGridSizeEvent_entry;
extern zend_object_handlers wxphp_wxGridSizeEvent_object_handlers;
void php_wxGridSizeEvent_destruction_handler(zend_resource*);

class wxGridSizeEvent_php: public wxGridSizeEvent{
    public:

    wxGridSizeEvent_php():wxGridSizeEvent(){}
    wxGridSizeEvent_php(int id, wxEventType type, wxObject* obj, int rowOrCol=-1, int x=-1, int y=-1, const wxKeyboardState& kbd=wxKeyboardState()):wxGridSizeEvent(id, type, obj, rowOrCol, x, y, kbd){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxGridSizeEvent{
    wxGridSizeEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxGridSizeEvent;

void php_wxGridSizeEvent_free(void *object);
zend_object* php_wxGridSizeEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxGridSizeEvent_functions[] = {
    PHP_ME(php_wxGridSizeEvent, AltDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridSizeEvent, ControlDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridSizeEvent, GetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridSizeEvent, GetRowOrCol, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridSizeEvent, MetaDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridSizeEvent, ShiftDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridSizeEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxGridSizeEvent * php_wxGridSizeEvent_fetch_object(zend_object *obj) {
    return (zo_wxGridSizeEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxGridSizeEvent, zo)
    );
}

#define Z_wxGridSizeEvent_P(zv) \
    php_wxGridSizeEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxGridRangeSelectEvent_entry;
extern zend_object_handlers wxphp_wxGridRangeSelectEvent_object_handlers;
void php_wxGridRangeSelectEvent_destruction_handler(zend_resource*);

class wxGridRangeSelectEvent_php: public wxGridRangeSelectEvent{
    public:

    wxGridRangeSelectEvent_php():wxGridRangeSelectEvent(){}
    wxGridRangeSelectEvent_php(int id, wxEventType type, wxObject* obj, const wxGridCellCoords& topLeft, const wxGridCellCoords& bottomRight, bool sel=true, const wxKeyboardState& kbd=wxKeyboardState()):wxGridRangeSelectEvent(id, type, obj, topLeft, bottomRight, sel, kbd){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxGridRangeSelectEvent{
    wxGridRangeSelectEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxGridRangeSelectEvent;

void php_wxGridRangeSelectEvent_free(void *object);
zend_object* php_wxGridRangeSelectEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxGridRangeSelectEvent_functions[] = {
    PHP_ME(php_wxGridRangeSelectEvent, AltDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridRangeSelectEvent, ControlDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridRangeSelectEvent, GetBottomRightCoords, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridRangeSelectEvent, GetBottomRow, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridRangeSelectEvent, GetLeftCol, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridRangeSelectEvent, GetRightCol, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridRangeSelectEvent, GetTopLeftCoords, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridRangeSelectEvent, GetTopRow, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridRangeSelectEvent, MetaDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridRangeSelectEvent, Selecting, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridRangeSelectEvent, ShiftDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridRangeSelectEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxGridRangeSelectEvent * php_wxGridRangeSelectEvent_fetch_object(zend_object *obj) {
    return (zo_wxGridRangeSelectEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxGridRangeSelectEvent, zo)
    );
}

#define Z_wxGridRangeSelectEvent_P(zv) \
    php_wxGridRangeSelectEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxGridEditorCreatedEvent_entry;
extern zend_object_handlers wxphp_wxGridEditorCreatedEvent_object_handlers;
void php_wxGridEditorCreatedEvent_destruction_handler(zend_resource*);

class wxGridEditorCreatedEvent_php: public wxGridEditorCreatedEvent{
    public:

    wxGridEditorCreatedEvent_php():wxGridEditorCreatedEvent(){}
    wxGridEditorCreatedEvent_php(int id, wxEventType type, wxObject* obj, int row, int col, wxControl* ctrl):wxGridEditorCreatedEvent(id, type, obj, row, col, ctrl){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxGridEditorCreatedEvent{
    wxGridEditorCreatedEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxGridEditorCreatedEvent;

void php_wxGridEditorCreatedEvent_free(void *object);
zend_object* php_wxGridEditorCreatedEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxGridEditorCreatedEvent_functions[] = {
    PHP_ME(php_wxGridEditorCreatedEvent, GetCol, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridEditorCreatedEvent, GetControl, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridEditorCreatedEvent, GetRow, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridEditorCreatedEvent, SetCol, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridEditorCreatedEvent, SetControl, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridEditorCreatedEvent, SetRow, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGridEditorCreatedEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxGridEditorCreatedEvent * php_wxGridEditorCreatedEvent_fetch_object(zend_object *obj) {
    return (zo_wxGridEditorCreatedEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxGridEditorCreatedEvent, zo)
    );
}

#define Z_wxGridEditorCreatedEvent_P(zv) \
    php_wxGridEditorCreatedEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxHeaderCtrlEvent_entry;
extern zend_object_handlers wxphp_wxHeaderCtrlEvent_object_handlers;
void php_wxHeaderCtrlEvent_destruction_handler(zend_resource*);

class wxHeaderCtrlEvent_php: public wxHeaderCtrlEvent{
    public:

    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxHeaderCtrlEvent{
    wxHeaderCtrlEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxHeaderCtrlEvent;

void php_wxHeaderCtrlEvent_free(void *object);
zend_object* php_wxHeaderCtrlEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxHeaderCtrlEvent_functions[] = {
    PHP_ME(php_wxHeaderCtrlEvent, GetColumn, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxHeaderCtrlEvent, GetNewOrder, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxHeaderCtrlEvent, GetWidth, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxHeaderCtrlEvent * php_wxHeaderCtrlEvent_fetch_object(zend_object *obj) {
    return (zo_wxHeaderCtrlEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxHeaderCtrlEvent, zo)
    );
}

#define Z_wxHeaderCtrlEvent_P(zv) \
    php_wxHeaderCtrlEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxHyperlinkEvent_entry;
extern zend_object_handlers wxphp_wxHyperlinkEvent_object_handlers;
void php_wxHyperlinkEvent_destruction_handler(zend_resource*);

class wxHyperlinkEvent_php: public wxHyperlinkEvent{
    public:

    wxHyperlinkEvent_php(wxObject* generator, int id, const wxString& url):wxHyperlinkEvent(generator, id, url){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxHyperlinkEvent{
    wxHyperlinkEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxHyperlinkEvent;

void php_wxHyperlinkEvent_free(void *object);
zend_object* php_wxHyperlinkEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxHyperlinkEvent_functions[] = {
    PHP_ME(php_wxHyperlinkEvent, GetURL, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxHyperlinkEvent, SetURL, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxHyperlinkEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxHyperlinkEvent * php_wxHyperlinkEvent_fetch_object(zend_object *obj) {
    return (zo_wxHyperlinkEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxHyperlinkEvent, zo)
    );
}

#define Z_wxHyperlinkEvent_P(zv) \
    php_wxHyperlinkEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxQueryLayoutInfoEvent_entry;
extern zend_object_handlers wxphp_wxQueryLayoutInfoEvent_object_handlers;
void php_wxQueryLayoutInfoEvent_destruction_handler(zend_resource*);

class wxQueryLayoutInfoEvent_php: public wxQueryLayoutInfoEvent{
    public:

    wxQueryLayoutInfoEvent_php(wxWindowID id=0):wxQueryLayoutInfoEvent(id){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxQueryLayoutInfoEvent{
    wxQueryLayoutInfoEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxQueryLayoutInfoEvent;

void php_wxQueryLayoutInfoEvent_free(void *object);
zend_object* php_wxQueryLayoutInfoEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxQueryLayoutInfoEvent_functions[] = {
    PHP_ME(php_wxQueryLayoutInfoEvent, GetAlignment, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxQueryLayoutInfoEvent, GetFlags, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxQueryLayoutInfoEvent, GetOrientation, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxQueryLayoutInfoEvent, GetRequestedLength, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxQueryLayoutInfoEvent, GetSize, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxQueryLayoutInfoEvent, SetAlignment, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxQueryLayoutInfoEvent, SetFlags, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxQueryLayoutInfoEvent, SetOrientation, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxQueryLayoutInfoEvent, SetRequestedLength, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxQueryLayoutInfoEvent, SetSize, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxQueryLayoutInfoEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxQueryLayoutInfoEvent * php_wxQueryLayoutInfoEvent_fetch_object(zend_object *obj) {
    return (zo_wxQueryLayoutInfoEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxQueryLayoutInfoEvent, zo)
    );
}

#define Z_wxQueryLayoutInfoEvent_P(zv) \
    php_wxQueryLayoutInfoEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxCalculateLayoutEvent_entry;
extern zend_object_handlers wxphp_wxCalculateLayoutEvent_object_handlers;
void php_wxCalculateLayoutEvent_destruction_handler(zend_resource*);

class wxCalculateLayoutEvent_php: public wxCalculateLayoutEvent{
    public:

    wxCalculateLayoutEvent_php(wxWindowID id=0):wxCalculateLayoutEvent(id){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxCalculateLayoutEvent{
    wxCalculateLayoutEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxCalculateLayoutEvent;

void php_wxCalculateLayoutEvent_free(void *object);
zend_object* php_wxCalculateLayoutEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxCalculateLayoutEvent_functions[] = {
    PHP_ME(php_wxCalculateLayoutEvent, GetFlags, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalculateLayoutEvent, GetRect, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalculateLayoutEvent, SetFlags, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalculateLayoutEvent, SetRect, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCalculateLayoutEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxCalculateLayoutEvent * php_wxCalculateLayoutEvent_fetch_object(zend_object *obj) {
    return (zo_wxCalculateLayoutEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxCalculateLayoutEvent, zo)
    );
}

#define Z_wxCalculateLayoutEvent_P(zv) \
    php_wxCalculateLayoutEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxListEvent_entry;
extern zend_object_handlers wxphp_wxListEvent_object_handlers;
void php_wxListEvent_destruction_handler(zend_resource*);

class wxListEvent_php: public wxListEvent{
    public:

    wxListEvent_php(wxEventType commandType=wxEVT_NULL, int id=0):wxListEvent(commandType, id){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxListEvent{
    wxListEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxListEvent;

void php_wxListEvent_free(void *object);
zend_object* php_wxListEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxListEvent_functions[] = {
    PHP_ME(php_wxListEvent, GetCacheFrom, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListEvent, GetCacheTo, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListEvent, GetColumn, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListEvent, GetImage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListEvent, GetIndex, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListEvent, GetItem, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListEvent, GetKeyCode, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListEvent, GetLabel, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListEvent, GetMask, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListEvent, GetPoint, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListEvent, GetText, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListEvent, IsEditCancelled, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxListEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxListEvent * php_wxListEvent_fetch_object(zend_object *obj) {
    return (zo_wxListEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxListEvent, zo)
    );
}

#define Z_wxListEvent_P(zv) \
    php_wxListEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxMediaEvent_entry;
extern zend_object_handlers wxphp_wxMediaEvent_object_handlers;
void php_wxMediaEvent_destruction_handler(zend_resource*);

class wxMediaEvent_php: public wxMediaEvent{
    public:

    wxMediaEvent_php(wxEventType commandType=wxEVT_NULL, int winid=0):wxMediaEvent(commandType, winid){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxMediaEvent{
    wxMediaEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxMediaEvent;

void php_wxMediaEvent_free(void *object);
zend_object* php_wxMediaEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxMediaEvent_functions[] = {
    PHP_ME(php_wxMediaEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxMediaEvent * php_wxMediaEvent_fetch_object(zend_object *obj) {
    return (zo_wxMediaEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxMediaEvent, zo)
    );
}

#define Z_wxMediaEvent_P(zv) \
    php_wxMediaEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxMouseEventsManager_entry;
extern zend_object_handlers wxphp_wxMouseEventsManager_object_handlers;
void php_wxMouseEventsManager_destruction_handler(zend_resource*);

class wxMouseEventsManager_php: public wxMouseEventsManager{
    public:

    wxMouseEventsManager_php():wxMouseEventsManager(){}
    wxMouseEventsManager_php(wxWindow* win):wxMouseEventsManager(win){}
    
    void MouseClickBegin(int item);
    void MouseClickCancelled(int item);
    bool MouseClicked(int item);
    bool MouseDragBegin(int item, const wxPoint& pos);
    void MouseDragCancelled(int item);
    void MouseDragEnd(int item, const wxPoint& pos);
    void MouseDragging(int item, const wxPoint& pos);
    int MouseHitTest(const wxPoint& pos);
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxMouseEventsManager{
    wxMouseEventsManager_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxMouseEventsManager;

void php_wxMouseEventsManager_free(void *object);
zend_object* php_wxMouseEventsManager_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxMouseEventsManager_functions[] = {
    PHP_ME(php_wxMouseEventsManager, Create, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseEventsManager, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxMouseEventsManager * php_wxMouseEventsManager_fetch_object(zend_object *obj) {
    return (zo_wxMouseEventsManager *)(
        (char *)(obj) - XtOffsetOf(zo_wxMouseEventsManager, zo)
    );
}

#define Z_wxMouseEventsManager_P(zv) \
    php_wxMouseEventsManager_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxMouseState_entry;
extern zend_object_handlers wxphp_wxMouseState_object_handlers;
void php_wxMouseState_destruction_handler(zend_resource*);

class wxMouseState_php: public wxMouseState{
    public:

    wxMouseState_php():wxMouseState(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxMouseState{
    wxMouseState_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxMouseState;

void php_wxMouseState_free(void *object);
zend_object* php_wxMouseState_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxMouseState_functions[] = {
    PHP_ME(php_wxMouseState, Aux1IsDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, Aux2IsDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, GetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, GetX, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, GetY, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, LeftIsDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, MiddleIsDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, RightIsDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, SetAux1Down, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, SetAux2Down, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, SetLeftDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, SetMiddleDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, SetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, SetRightDown, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, SetState, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, SetX, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, SetY, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMouseState, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxMouseState * php_wxMouseState_fetch_object(zend_object *obj) {
    return (zo_wxMouseState *)(
        (char *)(obj) - XtOffsetOf(zo_wxMouseState, zo)
    );
}

#define Z_wxMouseState_P(zv) \
    php_wxMouseState_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxProcessEvent_entry;
extern zend_object_handlers wxphp_wxProcessEvent_object_handlers;
void php_wxProcessEvent_destruction_handler(zend_resource*);

class wxProcessEvent_php: public wxProcessEvent{
    public:

    wxProcessEvent_php(int id=0, int pid=0, int exitcode=0):wxProcessEvent(id, pid, exitcode){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxProcessEvent{
    wxProcessEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxProcessEvent;

void php_wxProcessEvent_free(void *object);
zend_object* php_wxProcessEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxProcessEvent_functions[] = {
    PHP_ME(php_wxProcessEvent, GetExitCode, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxProcessEvent, GetPid, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxProcessEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxProcessEvent * php_wxProcessEvent_fetch_object(zend_object *obj) {
    return (zo_wxProcessEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxProcessEvent, zo)
    );
}

#define Z_wxProcessEvent_P(zv) \
    php_wxProcessEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxRibbonBarEvent_entry;
extern zend_object_handlers wxphp_wxRibbonBarEvent_object_handlers;
void php_wxRibbonBarEvent_destruction_handler(zend_resource*);

class wxRibbonBarEvent_php: public wxRibbonBarEvent{
    public:

    wxRibbonBarEvent_php(wxEventType command_type=wxEVT_NULL, int win_id=0, wxRibbonPage* page=NULL):wxRibbonBarEvent(command_type, win_id, page){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxRibbonBarEvent{
    wxRibbonBarEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxRibbonBarEvent;

void php_wxRibbonBarEvent_free(void *object);
zend_object* php_wxRibbonBarEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxRibbonBarEvent_functions[] = {
    PHP_ME(php_wxRibbonBarEvent, GetPage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRibbonBarEvent, SetPage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRibbonBarEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxRibbonBarEvent * php_wxRibbonBarEvent_fetch_object(zend_object *obj) {
    return (zo_wxRibbonBarEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxRibbonBarEvent, zo)
    );
}

#define Z_wxRibbonBarEvent_P(zv) \
    php_wxRibbonBarEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxRibbonButtonBarEvent_entry;
extern zend_object_handlers wxphp_wxRibbonButtonBarEvent_object_handlers;
void php_wxRibbonButtonBarEvent_destruction_handler(zend_resource*);

class wxRibbonButtonBarEvent_php: public wxRibbonButtonBarEvent{
    public:

    wxRibbonButtonBarEvent_php(wxEventType command_type=wxEVT_NULL, int win_id=0, wxRibbonButtonBar* bar=NULL, wxRibbonButtonBarButtonBase* button=NULL):wxRibbonButtonBarEvent(command_type, win_id, bar, button){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxRibbonButtonBarEvent{
    wxRibbonButtonBarEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxRibbonButtonBarEvent;

void php_wxRibbonButtonBarEvent_free(void *object);
zend_object* php_wxRibbonButtonBarEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxRibbonButtonBarEvent_functions[] = {
    PHP_ME(php_wxRibbonButtonBarEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxRibbonButtonBarEvent, GetBar, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRibbonButtonBarEvent, PopupMenu, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRibbonButtonBarEvent, SetBar, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxRibbonButtonBarEvent * php_wxRibbonButtonBarEvent_fetch_object(zend_object *obj) {
    return (zo_wxRibbonButtonBarEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxRibbonButtonBarEvent, zo)
    );
}

#define Z_wxRibbonButtonBarEvent_P(zv) \
    php_wxRibbonButtonBarEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxRibbonGalleryEvent_entry;
extern zend_object_handlers wxphp_wxRibbonGalleryEvent_object_handlers;
void php_wxRibbonGalleryEvent_destruction_handler(zend_resource*);

class wxRibbonGalleryEvent_php: public wxRibbonGalleryEvent{
    public:

    wxRibbonGalleryEvent_php(wxEventType command_type=wxEVT_NULL, int win_id=0, wxRibbonGallery* gallery=NULL, wxRibbonGalleryItem* item=NULL):wxRibbonGalleryEvent(command_type, win_id, gallery, item){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxRibbonGalleryEvent{
    wxRibbonGalleryEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxRibbonGalleryEvent;

void php_wxRibbonGalleryEvent_free(void *object);
zend_object* php_wxRibbonGalleryEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxRibbonGalleryEvent_functions[] = {
    PHP_ME(php_wxRibbonGalleryEvent, GetGallery, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRibbonGalleryEvent, GetGalleryItem, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRibbonGalleryEvent, SetGallery, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRibbonGalleryEvent, SetGalleryItem, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRibbonGalleryEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxRibbonGalleryEvent * php_wxRibbonGalleryEvent_fetch_object(zend_object *obj) {
    return (zo_wxRibbonGalleryEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxRibbonGalleryEvent, zo)
    );
}

#define Z_wxRibbonGalleryEvent_P(zv) \
    php_wxRibbonGalleryEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxSashEvent_entry;
extern zend_object_handlers wxphp_wxSashEvent_object_handlers;
void php_wxSashEvent_destruction_handler(zend_resource*);

class wxSashEvent_php: public wxSashEvent{
    public:

    wxSashEvent_php(int id=0, wxSashEdgePosition edge=wxSASH_NONE):wxSashEvent(id, edge){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxSashEvent{
    wxSashEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxSashEvent;

void php_wxSashEvent_free(void *object);
zend_object* php_wxSashEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxSashEvent_functions[] = {
    PHP_ME(php_wxSashEvent, GetDragRect, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSashEvent, GetDragStatus, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSashEvent, GetEdge, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSashEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxSashEvent * php_wxSashEvent_fetch_object(zend_object *obj) {
    return (zo_wxSashEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxSashEvent, zo)
    );
}

#define Z_wxSashEvent_P(zv) \
    php_wxSashEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxSpinEvent_entry;
extern zend_object_handlers wxphp_wxSpinEvent_object_handlers;
void php_wxSpinEvent_destruction_handler(zend_resource*);

class wxSpinEvent_php: public wxSpinEvent{
    public:

    wxSpinEvent_php(wxEventType commandType=wxEVT_NULL, int id=0):wxSpinEvent(commandType, id){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxSpinEvent{
    wxSpinEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxSpinEvent;

void php_wxSpinEvent_free(void *object);
zend_object* php_wxSpinEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxSpinEvent_functions[] = {
    PHP_ME(php_wxSpinEvent, GetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSpinEvent, SetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSpinEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxSpinEvent * php_wxSpinEvent_fetch_object(zend_object *obj) {
    return (zo_wxSpinEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxSpinEvent, zo)
    );
}

#define Z_wxSpinEvent_P(zv) \
    php_wxSpinEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxSpinDoubleEvent_entry;
extern zend_object_handlers wxphp_wxSpinDoubleEvent_object_handlers;
void php_wxSpinDoubleEvent_destruction_handler(zend_resource*);

class wxSpinDoubleEvent_php: public wxSpinDoubleEvent{
    public:

    wxSpinDoubleEvent_php(const wxSpinDoubleEvent& event):wxSpinDoubleEvent(event){}
    wxSpinDoubleEvent_php(wxEventType commandType=wxEVT_NULL, int winid=0, double value=0):wxSpinDoubleEvent(commandType, winid, value){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxSpinDoubleEvent{
    wxSpinDoubleEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxSpinDoubleEvent;

void php_wxSpinDoubleEvent_free(void *object);
zend_object* php_wxSpinDoubleEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxSpinDoubleEvent_functions[] = {
    PHP_ME(php_wxSpinDoubleEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxSpinDoubleEvent, SetValue, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSpinDoubleEvent, GetValue, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxSpinDoubleEvent * php_wxSpinDoubleEvent_fetch_object(zend_object *obj) {
    return (zo_wxSpinDoubleEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxSpinDoubleEvent, zo)
    );
}

#define Z_wxSpinDoubleEvent_P(zv) \
    php_wxSpinDoubleEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxSplitterEvent_entry;
extern zend_object_handlers wxphp_wxSplitterEvent_object_handlers;
void php_wxSplitterEvent_destruction_handler(zend_resource*);

class wxSplitterEvent_php: public wxSplitterEvent{
    public:

    wxSplitterEvent_php(wxEventType eventType=wxEVT_NULL, wxSplitterWindow* splitter=NULL):wxSplitterEvent(eventType, splitter){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxSplitterEvent{
    wxSplitterEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxSplitterEvent;

void php_wxSplitterEvent_free(void *object);
zend_object* php_wxSplitterEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxSplitterEvent_functions[] = {
    PHP_ME(php_wxSplitterEvent, GetSashPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSplitterEvent, GetWindowBeingRemoved, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSplitterEvent, GetX, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSplitterEvent, GetY, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSplitterEvent, SetSashPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSplitterEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxSplitterEvent * php_wxSplitterEvent_fetch_object(zend_object *obj) {
    return (zo_wxSplitterEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxSplitterEvent, zo)
    );
}

#define Z_wxSplitterEvent_P(zv) \
    php_wxSplitterEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxStyledTextEvent_entry;
extern zend_object_handlers wxphp_wxStyledTextEvent_object_handlers;
void php_wxStyledTextEvent_destruction_handler(zend_resource*);

class wxStyledTextEvent_php: public wxStyledTextEvent{
    public:

    wxStyledTextEvent_php(wxEventType commandType=0, int id=0):wxStyledTextEvent(commandType, id){}
    wxStyledTextEvent_php(const wxStyledTextEvent& event):wxStyledTextEvent(event){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxStyledTextEvent{
    wxStyledTextEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxStyledTextEvent;

void php_wxStyledTextEvent_free(void *object);
zend_object* php_wxStyledTextEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxStyledTextEvent_functions[] = {
    PHP_ME(php_wxStyledTextEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxStyledTextEvent, SetY, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, SetX, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, SetWParam, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, SetText, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, SetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, SetModifiers, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, SetModificationType, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, SetMessage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, SetMargin, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, SetListType, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, SetLinesAdded, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, SetLine, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetAlt, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetControl, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetDragText, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetFoldLevelNow, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetFoldLevelPrev, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetKey, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetLParam, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetLength, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetLine, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetLinesAdded, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetListType, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetMargin, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetMessage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetModificationType, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetModifiers, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetPosition, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetShift, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetText, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetWParam, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetX, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetY, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, SetDragResult, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, SetDragText, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, SetFoldLevelNow, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, SetFoldLevelPrev, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, SetKey, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, SetLParam, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, SetLength, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxStyledTextEvent, GetDragResult, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxStyledTextEvent * php_wxStyledTextEvent_fetch_object(zend_object *obj) {
    return (zo_wxStyledTextEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxStyledTextEvent, zo)
    );
}

#define Z_wxStyledTextEvent_P(zv) \
    php_wxStyledTextEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxTaskBarIconEvent_entry;
extern zend_object_handlers wxphp_wxTaskBarIconEvent_object_handlers;
void php_wxTaskBarIconEvent_destruction_handler(zend_resource*);

class wxTaskBarIconEvent_php: public wxTaskBarIconEvent{
    public:

    wxTaskBarIconEvent_php(wxEventType evtType, wxTaskBarIcon* tbIcon):wxTaskBarIconEvent(evtType, tbIcon){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxTaskBarIconEvent{
    wxTaskBarIconEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxTaskBarIconEvent;

void php_wxTaskBarIconEvent_free(void *object);
zend_object* php_wxTaskBarIconEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxTaskBarIconEvent_functions[] = {
    PHP_ME(php_wxTaskBarIconEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxTaskBarIconEvent * php_wxTaskBarIconEvent_fetch_object(zend_object *obj) {
    return (zo_wxTaskBarIconEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxTaskBarIconEvent, zo)
    );
}

#define Z_wxTaskBarIconEvent_P(zv) \
    php_wxTaskBarIconEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxTimerEvent_entry;
extern zend_object_handlers wxphp_wxTimerEvent_object_handlers;
void php_wxTimerEvent_destruction_handler(zend_resource*);

class wxTimerEvent_php: public wxTimerEvent{
    public:

    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxTimerEvent{
    wxTimerEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxTimerEvent;

void php_wxTimerEvent_free(void *object);
zend_object* php_wxTimerEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxTimerEvent_functions[] = {
    PHP_ME(php_wxTimerEvent, GetInterval, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxTimerEvent * php_wxTimerEvent_fetch_object(zend_object *obj) {
    return (zo_wxTimerEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxTimerEvent, zo)
    );
}

#define Z_wxTimerEvent_P(zv) \
    php_wxTimerEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxTreeEvent_entry;
extern zend_object_handlers wxphp_wxTreeEvent_object_handlers;
void php_wxTreeEvent_destruction_handler(zend_resource*);

class wxTreeEvent_php: public wxTreeEvent{
    public:

    wxTreeEvent_php(wxEventType commandType, wxTreeCtrl* tree, const wxTreeItemId& item=wxTreeItemId()):wxTreeEvent(commandType, tree, item){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxTreeEvent{
    wxTreeEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxTreeEvent;

void php_wxTreeEvent_free(void *object);
zend_object* php_wxTreeEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxTreeEvent_functions[] = {
    PHP_ME(php_wxTreeEvent, GetItem, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTreeEvent, GetKeyCode, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTreeEvent, GetKeyEvent, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTreeEvent, GetLabel, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTreeEvent, GetOldItem, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTreeEvent, GetPoint, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTreeEvent, IsEditCancelled, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTreeEvent, SetToolTip, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTreeEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxTreeEvent * php_wxTreeEvent_fetch_object(zend_object *obj) {
    return (zo_wxTreeEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxTreeEvent, zo)
    );
}

#define Z_wxTreeEvent_P(zv) \
    php_wxTreeEvent_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxWizardEvent_entry;
extern zend_object_handlers wxphp_wxWizardEvent_object_handlers;
void php_wxWizardEvent_destruction_handler(zend_resource*);

class wxWizardEvent_php: public wxWizardEvent{
    public:

    wxWizardEvent_php(wxEventType type=wxEVT_NULL, int id=wxID_ANY, bool direction=true, wxWizardPage* page=0):wxWizardEvent(type, id, direction, page){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxWizardEvent{
    wxWizardEvent_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxWizardEvent;

void php_wxWizardEvent_free(void *object);
zend_object* php_wxWizardEvent_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxWizardEvent_functions[] = {
    PHP_ME(php_wxWizardEvent, GetDirection, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxWizardEvent, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxWizardEvent, GetPage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxWizardEvent * php_wxWizardEvent_fetch_object(zend_object *obj) {
    return (zo_wxWizardEvent *)(
        (char *)(obj) - XtOffsetOf(zo_wxWizardEvent, zo)
    );
}

#define Z_wxWizardEvent_P(zv) \
    php_wxWizardEvent_fetch_object(Z_OBJ_P(zv))
#endif //WXPHP_EVENTS_H_GUARD
