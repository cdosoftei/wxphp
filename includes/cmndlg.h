/*
 * @author Mário Soares
 * @contributors Jefferson González
 * @contributors René Vögeli / Rangee GmbH
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @note
 * This file was auto-generated by the wxPHP source maker
*/

#ifndef WXPHP_CMNDLG_H_GUARD
#define WXPHP_CMNDLG_H_GUARD

#include "references.h"
#include "object_types.h"

ZEND_BEGIN_ARG_INFO_EX(wxphp_cmndlg_get_args, 0, 0, 1)
    ZEND_ARG_INFO(0, name)
ZEND_END_ARG_INFO()

extern zend_class_entry* php_wxAboutDialogInfo_entry;
extern zend_object_handlers wxphp_wxAboutDialogInfo_object_handlers;
void php_wxAboutDialogInfo_destruction_handler(zend_resource*);

class wxAboutDialogInfo_php: public wxAboutDialogInfo{
    public:

    wxAboutDialogInfo_php():wxAboutDialogInfo(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxAboutDialogInfo{
    wxAboutDialogInfo_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxAboutDialogInfo;

void php_wxAboutDialogInfo_free(void *object);
zend_object* php_wxAboutDialogInfo_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxAboutDialogInfo_functions[] = {
    PHP_ME(php_wxAboutDialogInfo, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxAboutDialogInfo, SetWebSite, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAboutDialogInfo, SetVersion, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAboutDialogInfo, AddDeveloper, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAboutDialogInfo, AddDocWriter, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAboutDialogInfo, AddTranslator, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAboutDialogInfo, GetCopyright, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAboutDialogInfo, GetDescription, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAboutDialogInfo, HasCopyright, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAboutDialogInfo, HasDescription, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAboutDialogInfo, SetArtists, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAboutDialogInfo, SetCopyright, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAboutDialogInfo, SetDescription, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAboutDialogInfo, SetDevelopers, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAboutDialogInfo, SetDocWriters, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAboutDialogInfo, SetIcon, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAboutDialogInfo, SetLicence, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAboutDialogInfo, SetLicense, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAboutDialogInfo, SetName, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAboutDialogInfo, SetTranslators, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAboutDialogInfo, AddArtist, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAboutDialogInfo, GetName, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxAboutDialogInfo * php_wxAboutDialogInfo_fetch_object(zend_object *obj) {
    return (zo_wxAboutDialogInfo *)(
        (char *)(obj) - XtOffsetOf(zo_wxAboutDialogInfo, zo)
    );
}

#define Z_wxAboutDialogInfo_P(zv) \
    php_wxAboutDialogInfo_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxBusyInfo_entry;
extern zend_object_handlers wxphp_wxBusyInfo_object_handlers;
void php_wxBusyInfo_destruction_handler(zend_resource*);

class wxBusyInfo_php: public wxBusyInfo{
    public:

    wxBusyInfo_php(const wxString& msg, wxWindow* parent=NULL):wxBusyInfo(msg, parent){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxBusyInfo{
    wxBusyInfo_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxBusyInfo;

void php_wxBusyInfo_free(void *object);
zend_object* php_wxBusyInfo_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxBusyInfo_functions[] = {
    PHP_ME(php_wxBusyInfo, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxBusyInfo * php_wxBusyInfo_fetch_object(zend_object *obj) {
    return (zo_wxBusyInfo *)(
        (char *)(obj) - XtOffsetOf(zo_wxBusyInfo, zo)
    );
}

#define Z_wxBusyInfo_P(zv) \
    php_wxBusyInfo_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxSingleChoiceDialog_entry;
extern zend_object_handlers wxphp_wxSingleChoiceDialog_object_handlers;
void php_wxSingleChoiceDialog_destruction_handler(zend_resource*);

class wxSingleChoiceDialog_php: public wxSingleChoiceDialog{
    public:

    wxSingleChoiceDialog_php(wxWindow* parent, const wxString& message, const wxString& caption, int n, const wxString* choices, void** clientData=NULL, long style=wxCHOICEDLG_STYLE, const wxPoint& pos=wxDefaultPosition):wxSingleChoiceDialog(parent, message, caption, n, choices, clientData, style, pos){}
    wxSingleChoiceDialog_php(wxWindow* parent, const wxString& message, const wxString& caption, const wxArrayString& choices, void** clientData=NULL, long style=wxCHOICEDLG_STYLE, const wxPoint& pos=wxDefaultPosition):wxSingleChoiceDialog(parent, message, caption, choices, clientData, style, pos){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxSingleChoiceDialog{
    wxSingleChoiceDialog_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxSingleChoiceDialog;

void php_wxSingleChoiceDialog_free(void *object);
zend_object* php_wxSingleChoiceDialog_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxSingleChoiceDialog_functions[] = {
    PHP_ME(php_wxSingleChoiceDialog, GetSelection, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSingleChoiceDialog, GetStringSelection, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSingleChoiceDialog, SetSelection, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSingleChoiceDialog, ShowModal, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSingleChoiceDialog, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxSingleChoiceDialog, GetSelectionData, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxSingleChoiceDialog * php_wxSingleChoiceDialog_fetch_object(zend_object *obj) {
    return (zo_wxSingleChoiceDialog *)(
        (char *)(obj) - XtOffsetOf(zo_wxSingleChoiceDialog, zo)
    );
}

#define Z_wxSingleChoiceDialog_P(zv) \
    php_wxSingleChoiceDialog_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxPrintDialogData_entry;
extern zend_object_handlers wxphp_wxPrintDialogData_object_handlers;
void php_wxPrintDialogData_destruction_handler(zend_resource*);

class wxPrintDialogData_php: public wxPrintDialogData{
    public:

    wxPrintDialogData_php():wxPrintDialogData(){}
    wxPrintDialogData_php(const wxPrintDialogData& dialogData):wxPrintDialogData(dialogData){}
    wxPrintDialogData_php(const wxPrintData& printData):wxPrintDialogData(printData){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxPrintDialogData{
    wxPrintDialogData_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxPrintDialogData;

void php_wxPrintDialogData_free(void *object);
zend_object* php_wxPrintDialogData_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxPrintDialogData_functions[] = {
    PHP_ME(php_wxPrintDialogData, EnableHelp, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, EnablePageNumbers, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, EnablePrintToFile, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, EnableSelection, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, GetAllPages, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, GetCollate, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, GetFromPage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, GetMaxPage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, GetMinPage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, GetNoCopies, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, GetPrintData, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, GetPrintToFile, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, GetSelection, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, GetToPage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, IsOk, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, SetCollate, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, SetFromPage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, SetMaxPage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, SetMinPage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, SetNoCopies, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, SetPrintData, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, SetPrintToFile, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, SetSelection, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, SetToPage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPrintDialogData, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxPrintDialogData * php_wxPrintDialogData_fetch_object(zend_object *obj) {
    return (zo_wxPrintDialogData *)(
        (char *)(obj) - XtOffsetOf(zo_wxPrintDialogData, zo)
    );
}

#define Z_wxPrintDialogData_P(zv) \
    php_wxPrintDialogData_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxColourDialog_entry;
extern zend_object_handlers wxphp_wxColourDialog_object_handlers;
void php_wxColourDialog_destruction_handler(zend_resource*);

class wxColourDialog_php: public wxColourDialog{
    public:

    wxColourDialog_php(wxWindow* parent, const wxColourData* data=NULL):wxColourDialog(parent, data){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxColourDialog{
    wxColourDialog_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxColourDialog;

void php_wxColourDialog_free(void *object);
zend_object* php_wxColourDialog_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxColourDialog_functions[] = {
    PHP_ME(php_wxColourDialog, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxColourDialog, ShowModal, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColourDialog, GetColourData, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColourDialog, Create, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxColourDialog * php_wxColourDialog_fetch_object(zend_object *obj) {
    return (zo_wxColourDialog *)(
        (char *)(obj) - XtOffsetOf(zo_wxColourDialog, zo)
    );
}

#define Z_wxColourDialog_P(zv) \
    php_wxColourDialog_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxColourData_entry;
extern zend_object_handlers wxphp_wxColourData_object_handlers;
void php_wxColourData_destruction_handler(zend_resource*);

class wxColourData_php: public wxColourData{
    public:

    wxColourData_php():wxColourData(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxColourData{
    wxColourData_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxColourData;

void php_wxColourData_free(void *object);
zend_object* php_wxColourData_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxColourData_functions[] = {
    PHP_ME(php_wxColourData, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxColourData, ToString, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColourData, SetCustomColour, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColourData, SetColour, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColourData, SetChooseFull, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColourData, GetCustomColour, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColourData, GetColour, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColourData, GetChooseFull, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColourData, FromString, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxColourData * php_wxColourData_fetch_object(zend_object *obj) {
    return (zo_wxColourData *)(
        (char *)(obj) - XtOffsetOf(zo_wxColourData, zo)
    );
}

#define Z_wxColourData_P(zv) \
    php_wxColourData_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxDialog_entry;
extern zend_object_handlers wxphp_wxDialog_object_handlers;
void php_wxDialog_destruction_handler(zend_resource*);

class wxDialog_php: public wxDialog{
    public:

    wxDialog_php():wxDialog(){}
    wxDialog_php(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos=wxDefaultPosition, const wxSize& size=wxDefaultSize, long style=wxDEFAULT_DIALOG_STYLE, const wxString& name=wxDialogNameStr):wxDialog(parent, id, title, pos, size, style, name){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxDialog{
    wxDialog_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxDialog;

void php_wxDialog_free(void *object);
zend_object* php_wxDialog_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxDialog_functions[] = {
    PHP_ME(php_wxDialog, AddMainButtonId, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, Centre, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, Create, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, CreateButtonSizer, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, CreateSeparatedButtonSizer, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, CreateSeparatedSizer, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, CreateStdDialogButtonSizer, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, EndModal, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, GetAffirmativeId, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, GetContentWindow, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, GetEscapeId, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, GetReturnCode, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, Iconize, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, IsIconized, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, IsModal, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, SetAffirmativeId, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxDialog, ShowWindowModal, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, ShowModal, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, Show, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, SetReturnCode, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, SetLayoutAdaptationMode, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, SetLayoutAdaptationLevel, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, SetIcons, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, SetIcon, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, SetEscapeId, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, SetLayoutAdaptationDone, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, GetLayoutAdaptationDone, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, GetLayoutAdaptationLevel, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, EnableLayoutAdaptation, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, DoLayoutAdaptation, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, CanDoLayoutAdaptation, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDialog, IsLayoutAdaptationEnabled, arginfo_null, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxDialog * php_wxDialog_fetch_object(zend_object *obj) {
    return (zo_wxDialog *)(
        (char *)(obj) - XtOffsetOf(zo_wxDialog, zo)
    );
}

#define Z_wxDialog_P(zv) \
    php_wxDialog_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxDirDialog_entry;
extern zend_object_handlers wxphp_wxDirDialog_object_handlers;
void php_wxDirDialog_destruction_handler(zend_resource*);

class wxDirDialog_php: public wxDirDialog{
    public:

    wxDirDialog_php(wxWindow* parent, const wxString& message=wxDirSelectorPromptStr, const wxString& defaultPath=wxEmptyString, long style=wxDD_DEFAULT_STYLE, const wxPoint& pos=wxDefaultPosition, const wxSize& size=wxDefaultSize, const wxString& name=wxDirDialogNameStr):wxDirDialog(parent, message, defaultPath, style, pos, size, name){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxDirDialog{
    wxDirDialog_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxDirDialog;

void php_wxDirDialog_free(void *object);
zend_object* php_wxDirDialog_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxDirDialog_functions[] = {
    PHP_ME(php_wxDirDialog, GetMessage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDirDialog, GetPath, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDirDialog, SetMessage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDirDialog, SetPath, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDirDialog, ShowModal, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxDirDialog, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxDirDialog * php_wxDirDialog_fetch_object(zend_object *obj) {
    return (zo_wxDirDialog *)(
        (char *)(obj) - XtOffsetOf(zo_wxDirDialog, zo)
    );
}

#define Z_wxDirDialog_P(zv) \
    php_wxDirDialog_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxFindReplaceData_entry;
extern zend_object_handlers wxphp_wxFindReplaceData_object_handlers;
void php_wxFindReplaceData_destruction_handler(zend_resource*);

class wxFindReplaceData_php: public wxFindReplaceData{
    public:

    wxFindReplaceData_php(wxUint32 flags=0):wxFindReplaceData(flags){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxFindReplaceData{
    wxFindReplaceData_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxFindReplaceData;

void php_wxFindReplaceData_free(void *object);
zend_object* php_wxFindReplaceData_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxFindReplaceData_functions[] = {
    PHP_ME(php_wxFindReplaceData, GetFindString, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFindReplaceData, GetReplaceString, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFindReplaceData, GetFlags, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFindReplaceData, SetFindString, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFindReplaceData, SetFlags, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFindReplaceData, SetReplaceString, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFindReplaceData, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxFindReplaceData * php_wxFindReplaceData_fetch_object(zend_object *obj) {
    return (zo_wxFindReplaceData *)(
        (char *)(obj) - XtOffsetOf(zo_wxFindReplaceData, zo)
    );
}

#define Z_wxFindReplaceData_P(zv) \
    php_wxFindReplaceData_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxFindReplaceDialog_entry;
extern zend_object_handlers wxphp_wxFindReplaceDialog_object_handlers;
void php_wxFindReplaceDialog_destruction_handler(zend_resource*);

class wxFindReplaceDialog_php: public wxFindReplaceDialog{
    public:

    wxFindReplaceDialog_php():wxFindReplaceDialog(){}
    wxFindReplaceDialog_php(wxWindow* parent, wxFindReplaceData* data, const wxString& title, int style=0):wxFindReplaceDialog(parent, data, title, style){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxFindReplaceDialog{
    wxFindReplaceDialog_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxFindReplaceDialog;

void php_wxFindReplaceDialog_free(void *object);
zend_object* php_wxFindReplaceDialog_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxFindReplaceDialog_functions[] = {
    PHP_ME(php_wxFindReplaceDialog, Create, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFindReplaceDialog, GetData, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFindReplaceDialog, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxFindReplaceDialog * php_wxFindReplaceDialog_fetch_object(zend_object *obj) {
    return (zo_wxFindReplaceDialog *)(
        (char *)(obj) - XtOffsetOf(zo_wxFindReplaceDialog, zo)
    );
}

#define Z_wxFindReplaceDialog_P(zv) \
    php_wxFindReplaceDialog_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxFileDialog_entry;
extern zend_object_handlers wxphp_wxFileDialog_object_handlers;
void php_wxFileDialog_destruction_handler(zend_resource*);

class wxFileDialog_php: public wxFileDialog{
    public:

    wxFileDialog_php(wxWindow* parent, const wxString& message=wxFileSelectorPromptStr, const wxString& defaultDir=wxEmptyString, const wxString& defaultFile=wxEmptyString, const wxString& wildcard=wxFileSelectorDefaultWildcardStr, long style=wxFD_DEFAULT_STYLE, const wxPoint& pos=wxDefaultPosition, const wxSize& size=wxDefaultSize, const wxString& name=wxFileDialogNameStr):wxFileDialog(parent, message, defaultDir, defaultFile, wildcard, style, pos, size, name){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxFileDialog{
    wxFileDialog_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxFileDialog;

void php_wxFileDialog_free(void *object);
zend_object* php_wxFileDialog_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxFileDialog_functions[] = {
    PHP_ME(php_wxFileDialog, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxFileDialog, ShowModal, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileDialog, SetWildcard, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileDialog, SetPath, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileDialog, SetMessage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileDialog, SetFilterIndex, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileDialog, SetFilename, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileDialog, SetDirectory, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileDialog, GetWildcard, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileDialog, GetPaths, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileDialog, GetMessage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileDialog, GetPath, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileDialog, GetFilterIndex, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileDialog, GetFilenames, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileDialog, GetFilename, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileDialog, GetExtraControl, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFileDialog, GetDirectory, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxFileDialog * php_wxFileDialog_fetch_object(zend_object *obj) {
    return (zo_wxFileDialog *)(
        (char *)(obj) - XtOffsetOf(zo_wxFileDialog, zo)
    );
}

#define Z_wxFileDialog_P(zv) \
    php_wxFileDialog_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxFontData_entry;
extern zend_object_handlers wxphp_wxFontData_object_handlers;
void php_wxFontData_destruction_handler(zend_resource*);

class wxFontData_php: public wxFontData{
    public:

    wxFontData_php():wxFontData(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxFontData{
    wxFontData_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxFontData;

void php_wxFontData_free(void *object);
zend_object* php_wxFontData_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxFontData_functions[] = {
    PHP_ME(php_wxFontData, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxFontData, SetShowHelp, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontData, SetRange, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontData, SetInitialFont, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontData, SetColour, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontData, SetChosenFont, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontData, SetAllowSymbols, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontData, GetShowHelp, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontData, GetInitialFont, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontData, GetEnableEffects, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontData, GetColour, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontData, GetChosenFont, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontData, GetAllowSymbols, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontData, EnableEffects, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxFontData * php_wxFontData_fetch_object(zend_object *obj) {
    return (zo_wxFontData *)(
        (char *)(obj) - XtOffsetOf(zo_wxFontData, zo)
    );
}

#define Z_wxFontData_P(zv) \
    php_wxFontData_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxFontDialog_entry;
extern zend_object_handlers wxphp_wxFontDialog_object_handlers;
void php_wxFontDialog_destruction_handler(zend_resource*);

class wxFontDialog_php: public wxFontDialog{
    public:

    wxFontDialog_php():wxFontDialog(){}
    wxFontDialog_php(wxWindow* parent):wxFontDialog(parent){}
    wxFontDialog_php(wxWindow* parent, const wxFontData& data):wxFontDialog(parent, data){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxFontDialog{
    wxFontDialog_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxFontDialog;

void php_wxFontDialog_free(void *object);
zend_object* php_wxFontDialog_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxFontDialog_functions[] = {
    PHP_ME(php_wxFontDialog, Create, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontDialog, GetFontData, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontDialog, ShowModal, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontDialog, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxFontDialog * php_wxFontDialog_fetch_object(zend_object *obj) {
    return (zo_wxFontDialog *)(
        (char *)(obj) - XtOffsetOf(zo_wxFontDialog, zo)
    );
}

#define Z_wxFontDialog_P(zv) \
    php_wxFontDialog_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxMessageDialog_entry;
extern zend_object_handlers wxphp_wxMessageDialog_object_handlers;
void php_wxMessageDialog_destruction_handler(zend_resource*);

class wxMessageDialog_php: public wxMessageDialog{
    public:

    wxMessageDialog_php(wxWindow* parent, const wxString& message, const wxString& caption=wxMessageBoxCaptionStr, long style=wxOK|wxCENTRE, const wxPoint& pos=wxDefaultPosition):wxMessageDialog(parent, message, caption, style, pos){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxMessageDialog{
    wxMessageDialog_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxMessageDialog;

void php_wxMessageDialog_free(void *object);
zend_object* php_wxMessageDialog_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxMessageDialog_functions[] = {
    PHP_ME(php_wxMessageDialog, GetCancelLabel, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMessageDialog, GetCaption, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMessageDialog, GetEffectiveIcon, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMessageDialog, GetExtendedMessage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMessageDialog, GetHelpLabel, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMessageDialog, GetMessage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMessageDialog, GetMessageDialogStyle, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMessageDialog, GetNoLabel, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMessageDialog, GetOKLabel, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMessageDialog, GetYesLabel, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMessageDialog, HasCustomLabels, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMessageDialog, SetExtendedMessage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMessageDialog, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxMessageDialog, ShowModal, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMessageDialog, SetYesNoLabels, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMessageDialog, SetYesNoCancelLabels, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMessageDialog, SetOKLabel, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMessageDialog, SetOKCancelLabels, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMessageDialog, SetMessage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMessageDialog, SetHelpLabel, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxMessageDialog * php_wxMessageDialog_fetch_object(zend_object *obj) {
    return (zo_wxMessageDialog *)(
        (char *)(obj) - XtOffsetOf(zo_wxMessageDialog, zo)
    );
}

#define Z_wxMessageDialog_P(zv) \
    php_wxMessageDialog_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxGenericProgressDialog_entry;
extern zend_object_handlers wxphp_wxGenericProgressDialog_object_handlers;
void php_wxGenericProgressDialog_destruction_handler(zend_resource*);

class wxGenericProgressDialog_php: public wxGenericProgressDialog{
    public:

    wxGenericProgressDialog_php(const wxString& title, const wxString& message, int maximum=100, wxWindow* parent=NULL, int style=wxPD_AUTO_HIDE|wxPD_APP_MODAL):wxGenericProgressDialog(title, message, maximum, parent, style){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxGenericProgressDialog{
    wxGenericProgressDialog_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxGenericProgressDialog;

void php_wxGenericProgressDialog_free(void *object);
zend_object* php_wxGenericProgressDialog_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxGenericProgressDialog_functions[] = {
    PHP_ME(php_wxGenericProgressDialog, GetMessage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGenericProgressDialog, GetRange, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGenericProgressDialog, GetValue, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGenericProgressDialog, Resume, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGenericProgressDialog, Pulse, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGenericProgressDialog, SetRange, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGenericProgressDialog, Update, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGenericProgressDialog, WasCancelled, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGenericProgressDialog, WasSkipped, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGenericProgressDialog, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxGenericProgressDialog * php_wxGenericProgressDialog_fetch_object(zend_object *obj) {
    return (zo_wxGenericProgressDialog *)(
        (char *)(obj) - XtOffsetOf(zo_wxGenericProgressDialog, zo)
    );
}

#define Z_wxGenericProgressDialog_P(zv) \
    php_wxGenericProgressDialog_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxRearrangeDialog_entry;
extern zend_object_handlers wxphp_wxRearrangeDialog_object_handlers;
void php_wxRearrangeDialog_destruction_handler(zend_resource*);

class wxRearrangeDialog_php: public wxRearrangeDialog{
    public:

    wxRearrangeDialog_php():wxRearrangeDialog(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxRearrangeDialog{
    wxRearrangeDialog_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxRearrangeDialog;

void php_wxRearrangeDialog_free(void *object);
zend_object* php_wxRearrangeDialog_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxRearrangeDialog_functions[] = {
    PHP_ME(php_wxRearrangeDialog, AddExtraControls, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRearrangeDialog, GetList, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRearrangeDialog, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxRearrangeDialog * php_wxRearrangeDialog_fetch_object(zend_object *obj) {
    return (zo_wxRearrangeDialog *)(
        (char *)(obj) - XtOffsetOf(zo_wxRearrangeDialog, zo)
    );
}

#define Z_wxRearrangeDialog_P(zv) \
    php_wxRearrangeDialog_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxSymbolPickerDialog_entry;
extern zend_object_handlers wxphp_wxSymbolPickerDialog_object_handlers;
void php_wxSymbolPickerDialog_destruction_handler(zend_resource*);

class wxSymbolPickerDialog_php: public wxSymbolPickerDialog{
    public:

    wxSymbolPickerDialog_php():wxSymbolPickerDialog(){}
    wxSymbolPickerDialog_php(const wxString& symbol, const wxString& initialFont, const wxString& normalTextFont, wxWindow* parent, wxWindowID id=wxID_ANY, const wxString& title=_("Symbols"), const wxPoint& pos=wxDefaultPosition, const wxSize& size=wxDefaultSize, long style=wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxCLOSE_BOX):wxSymbolPickerDialog(symbol, initialFont, normalTextFont, parent, id, title, pos, size, style){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxSymbolPickerDialog{
    wxSymbolPickerDialog_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxSymbolPickerDialog;

void php_wxSymbolPickerDialog_free(void *object);
zend_object* php_wxSymbolPickerDialog_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxSymbolPickerDialog_functions[] = {
    PHP_ME(php_wxSymbolPickerDialog, Create, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSymbolPickerDialog, GetFontName, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSymbolPickerDialog, GetFromUnicode, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSymbolPickerDialog, GetNormalTextFontName, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSymbolPickerDialog, GetSymbol, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSymbolPickerDialog, GetSymbolChar, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSymbolPickerDialog, HasSelection, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSymbolPickerDialog, SetFontName, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSymbolPickerDialog, SetFromUnicode, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSymbolPickerDialog, SetNormalTextFontName, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSymbolPickerDialog, SetSymbol, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSymbolPickerDialog, SetUnicodeMode, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSymbolPickerDialog, UseNormalFont, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSymbolPickerDialog, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxSymbolPickerDialog * php_wxSymbolPickerDialog_fetch_object(zend_object *obj) {
    return (zo_wxSymbolPickerDialog *)(
        (char *)(obj) - XtOffsetOf(zo_wxSymbolPickerDialog, zo)
    );
}

#define Z_wxSymbolPickerDialog_P(zv) \
    php_wxSymbolPickerDialog_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxPasswordEntryDialog_entry;
extern zend_object_handlers wxphp_wxPasswordEntryDialog_object_handlers;
void php_wxPasswordEntryDialog_destruction_handler(zend_resource*);

class wxPasswordEntryDialog_php: public wxPasswordEntryDialog{
    public:

    wxPasswordEntryDialog_php(wxWindow* parent, const wxString& message, const wxString& caption=wxGetPasswordFromUserPromptStr, const wxString& defaultValue=wxEmptyString, long style=wxTextEntryDialogStyle, const wxPoint& pos=wxDefaultPosition):wxPasswordEntryDialog(parent, message, caption, defaultValue, style, pos){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxPasswordEntryDialog{
    wxPasswordEntryDialog_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxPasswordEntryDialog;

void php_wxPasswordEntryDialog_free(void *object);
zend_object* php_wxPasswordEntryDialog_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxPasswordEntryDialog_functions[] = {
    PHP_ME(php_wxPasswordEntryDialog, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxPasswordEntryDialog * php_wxPasswordEntryDialog_fetch_object(zend_object *obj) {
    return (zo_wxPasswordEntryDialog *)(
        (char *)(obj) - XtOffsetOf(zo_wxPasswordEntryDialog, zo)
    );
}

#define Z_wxPasswordEntryDialog_P(zv) \
    php_wxPasswordEntryDialog_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxTextEntryDialog_entry;
extern zend_object_handlers wxphp_wxTextEntryDialog_object_handlers;
void php_wxTextEntryDialog_destruction_handler(zend_resource*);

class wxTextEntryDialog_php: public wxTextEntryDialog{
    public:

    wxTextEntryDialog_php():wxTextEntryDialog(){}
    wxTextEntryDialog_php(wxWindow* parent, const wxString& message, const wxString& caption=wxGetTextFromUserPromptStr, const wxString& value=wxEmptyString, long style=wxTextEntryDialogStyle, const wxPoint& pos=wxDefaultPosition):wxTextEntryDialog(parent, message, caption, value, style, pos){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxTextEntryDialog{
    wxTextEntryDialog_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxTextEntryDialog;

void php_wxTextEntryDialog_free(void *object);
zend_object* php_wxTextEntryDialog_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxTextEntryDialog_functions[] = {
    PHP_ME(php_wxTextEntryDialog, GetValue, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTextEntryDialog, SetValue, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTextEntryDialog, ShowModal, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTextEntryDialog, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxTextEntryDialog * php_wxTextEntryDialog_fetch_object(zend_object *obj) {
    return (zo_wxTextEntryDialog *)(
        (char *)(obj) - XtOffsetOf(zo_wxTextEntryDialog, zo)
    );
}

#define Z_wxTextEntryDialog_P(zv) \
    php_wxTextEntryDialog_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxWizard_entry;
extern zend_object_handlers wxphp_wxWizard_object_handlers;
void php_wxWizard_destruction_handler(zend_resource*);

class wxWizard_php: public wxWizard{
    public:

    wxWizard_php():wxWizard(){}
    wxWizard_php(wxWindow* parent, int id=wxID_ANY, const wxString& title=wxEmptyString, const wxBitmapBundle& bitmap=wxBitmapBundle(), const wxPoint& pos=wxDefaultPosition, long style=wxDEFAULT_DIALOG_STYLE):wxWizard(parent, id, title, bitmap, pos, style){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxWizard{
    wxWizard_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxWizard;

void php_wxWizard_free(void *object);
zend_object* php_wxWizard_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxWizard_functions[] = {
    PHP_ME(php_wxWizard, Create, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxWizard, FitToPage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxWizard, GetBitmap, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxWizard, GetBitmapBackgroundColour, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxWizard, GetBitmapPlacement, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxWizard, GetCurrentPage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxWizard, GetMinimumBitmapWidth, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxWizard, GetPageSize, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxWizard, HasNextPage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxWizard, HasPrevPage, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxWizard, RunWizard, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxWizard, SetBitmap, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxWizard, SetBitmapBackgroundColour, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxWizard, SetBitmapPlacement, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxWizard, SetBorder, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxWizard, SetMinimumBitmapWidth, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxWizard, SetPageSize, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxWizard, __construct, arginfo_null, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxWizard, GetPageAreaSizer, arginfo_null, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxWizard * php_wxWizard_fetch_object(zend_object *obj) {
    return (zo_wxWizard *)(
        (char *)(obj) - XtOffsetOf(zo_wxWizard, zo)
    );
}

#define Z_wxWizard_P(zv) \
    php_wxWizard_fetch_object(Z_OBJ_P(zv))
#endif //WXPHP_CMNDLG_H_GUARD
