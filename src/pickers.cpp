/*
 * @author Mário Soares
 * @contributors Jefferson González
 * @contributors René Vögeli / Rangee GmbH
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @note
 * This file was auto-generated by the wxPHP source maker
*/

#include "php_wxwidgets.h"
#include "appmanagement.h"
#include "cfg.h"
#include "bookctrl.h"
#include "dnd.h"
#include "cmndlg.h"
#include "containers.h"
#include "ctrl.h"
#include "data.h"
#include "dc.h"
#include "docview.h"
#include "events.h"
#include "file.h"
#include "gdi.h"
#include "grid.h"
#include "html.h"
#include "help.h"
#include "logging.h"
#include "managedwnd.h"
#include "menus.h"
#include "misc.h"
#include "miscwnd.h"
#include "media.h"
#include "net.h"
#include "pickers.h"
#include "printing.h"
#include "ribbon.h"
#include "richtext.h"
#include "rtti.h"
#include "stc.h"
#include "streams.h"
#include "threading.h"
#include "validator.h"
#include "vfs.h"
#include "aui.h"
#include "winlayout.h"
#include "xml.h"
#include "xrc.h"
#include "dvc.h"
#include "others.h"


BEGIN_EXTERN_C()
void php_wxColourPickerCtrl_free(void *object)
{
    zo_wxColourPickerCtrl* custom_object = (zo_wxColourPickerCtrl*) object;

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Obviate delete call for wxColourPickerCtrl on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n\n");
    #endif

    zend_object_std_dtor(&custom_object->zo);
    efree(custom_object);
}

zend_object* php_wxColourPickerCtrl_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxColourPickerCtrl_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxColourPickerCtrl* custom_object;

    custom_object = (zo_wxColourPickerCtrl*) ecalloc(
        1,
        sizeof(zo_wxColourPickerCtrl)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    custom_object->zo.handlers = &wxphp_wxColourPickerCtrl_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXCOLOURPICKERCTRL_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto bool wxColourPickerCtrl::Create(wxWindow &parent, int id, wxColour colour, wxPoint pos, wxSize size, int style, wxValidator validator, string name)
   Creates a colour picker with the given arguments. */
PHP_METHOD(php_wxColourPickerCtrl, Create)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxColourPickerCtrl::Create\n");
    php_printf("===========================================\n");
    #endif

    zo_wxColourPickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxColourPickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxColourPickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxColourPickerCtrl::Create call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE){
                references = &((wxColourPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* parent0;
    wxWindow* object_pointer0_0 = 0;
    long id0;
    zval* colour0;
    wxColour* object_pointer0_2 = 0;
    zval* pos0;
    wxPoint* object_pointer0_3 = 0;
    zval* size0;
    wxSize* object_pointer0_4 = 0;
    long style0;
    zval* validator0;
    wxValidator* object_pointer0_6 = 0;
    char* name0;
    size_t name_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 2  && arguments_received <= 8)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zl|OOOlos' (&parent0, &id0, &colour0, php_wxColour_entry, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &validator0, &name0, &name_len0)\n");
        #endif

        char parse_parameters_string[] = "zl|OOOlos";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent0, &id0, &colour0, php_wxColour_entry, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &validator0, &name0, &name_len0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(colour0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(colour0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(colour0)->native_object;
                    object_pointer0_2 = (wxColour*) argument_native_object;
                    if (!object_pointer0_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'colour' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(colour0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'colour' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(pos0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos0)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos0)->native_object;
                    object_pointer0_3 = (wxPoint*) argument_native_object;
                    if (!object_pointer0_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 5){
                if(Z_TYPE_P(size0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size0)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size0)->native_object;
                    object_pointer0_4 = (wxSize*) argument_native_object;
                    if (!object_pointer0_4 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 7){
                if(Z_TYPE_P(validator0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxValidator_P(validator0)->object_type;
                    argument_native_object = (void*) Z_wxValidator_P(validator0)->native_object;
                    object_pointer0_6 = (wxValidator*) argument_native_object;
                    if (!object_pointer0_6 || (argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'validator' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(validator0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'validator' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxColourPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0))\n\n");
                #endif

                RETVAL_BOOL(((wxColourPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0));

                references->AddReference(parent0, "wxColourPickerCtrl::Create at call 1 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxColourPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxColour*) object_pointer0_2))\n\n");
                #endif

                RETVAL_BOOL(((wxColourPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxColour*) object_pointer0_2));

                references->AddReference(parent0, "wxColourPickerCtrl::Create at call 1 with 3 argument(s)");
                references->AddReference(colour0, "wxColourPickerCtrl::Create at call 3 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxColourPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxColour*) object_pointer0_2, *(wxPoint*) object_pointer0_3))\n\n");
                #endif

                RETVAL_BOOL(((wxColourPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxColour*) object_pointer0_2, *(wxPoint*) object_pointer0_3));

                references->AddReference(parent0, "wxColourPickerCtrl::Create at call 1 with 4 argument(s)");
                references->AddReference(colour0, "wxColourPickerCtrl::Create at call 3 with 4 argument(s)");
                references->AddReference(pos0, "wxColourPickerCtrl::Create at call 3 with 4 argument(s)");

                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxColourPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxColour*) object_pointer0_2, *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4))\n\n");
                #endif

                RETVAL_BOOL(((wxColourPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxColour*) object_pointer0_2, *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4));

                references->AddReference(parent0, "wxColourPickerCtrl::Create at call 1 with 5 argument(s)");
                references->AddReference(colour0, "wxColourPickerCtrl::Create at call 3 with 5 argument(s)");
                references->AddReference(pos0, "wxColourPickerCtrl::Create at call 3 with 5 argument(s)");
                references->AddReference(size0, "wxColourPickerCtrl::Create at call 3 with 5 argument(s)");

                return;
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxColourPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxColour*) object_pointer0_2, *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0))\n\n");
                #endif

                RETVAL_BOOL(((wxColourPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxColour*) object_pointer0_2, *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0));

                references->AddReference(parent0, "wxColourPickerCtrl::Create at call 1 with 6 argument(s)");
                references->AddReference(colour0, "wxColourPickerCtrl::Create at call 3 with 6 argument(s)");
                references->AddReference(pos0, "wxColourPickerCtrl::Create at call 3 with 6 argument(s)");
                references->AddReference(size0, "wxColourPickerCtrl::Create at call 3 with 6 argument(s)");

                return;
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxColourPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxColour*) object_pointer0_2, *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, *(wxValidator*) object_pointer0_6))\n\n");
                #endif

                RETVAL_BOOL(((wxColourPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxColour*) object_pointer0_2, *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, *(wxValidator*) object_pointer0_6));

                references->AddReference(parent0, "wxColourPickerCtrl::Create at call 1 with 7 argument(s)");
                references->AddReference(colour0, "wxColourPickerCtrl::Create at call 3 with 7 argument(s)");
                references->AddReference(pos0, "wxColourPickerCtrl::Create at call 3 with 7 argument(s)");
                references->AddReference(size0, "wxColourPickerCtrl::Create at call 3 with 7 argument(s)");
                references->AddReference(validator0, "wxColourPickerCtrl::Create at call 3 with 7 argument(s)");

                return;
                break;
            }
            case 8:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxColourPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxColour*) object_pointer0_2, *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, *(wxValidator*) object_pointer0_6, wxString(name0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(((wxColourPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxColour*) object_pointer0_2, *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, *(wxValidator*) object_pointer0_6, wxString(name0, wxConvUTF8)));

                references->AddReference(parent0, "wxColourPickerCtrl::Create at call 1 with 8 argument(s)");
                references->AddReference(colour0, "wxColourPickerCtrl::Create at call 3 with 8 argument(s)");
                references->AddReference(pos0, "wxColourPickerCtrl::Create at call 3 with 8 argument(s)");
                references->AddReference(size0, "wxColourPickerCtrl::Create at call 3 with 8 argument(s)");
                references->AddReference(validator0, "wxColourPickerCtrl::Create at call 3 with 8 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxColourPickerCtrl::Create\n"
        );
    }
}
/* }}} */

/* {{{ proto wxColour wxColourPickerCtrl::GetColour()
   Returns the currently selected colour. */
PHP_METHOD(php_wxColourPickerCtrl, GetColour)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxColourPickerCtrl::GetColour\n");
    php_printf("===========================================\n");
    #endif

    zo_wxColourPickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxColourPickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxColourPickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxColourPickerCtrl::GetColour call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE){
                references = &((wxColourPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxColourPickerCtrl::GetColour() to return new object\n\n");
                #endif

                wxColour value_to_return0;
                value_to_return0 = ((wxColourPickerCtrl_php*)native_object)->GetColour();
                ((wxRefCounter *) value_to_return0.GetRefData())->IncRef();
                void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
                memcpy(ptr, (void*) &value_to_return0, sizeof(wxColour));
                object_init_ex(return_value, php_wxColour_entry);
                ((wxColour_php*)ptr)->phpObj = *return_value;
                zo_wxColour* zo0 = Z_wxColour_P(return_value);
                zo0->native_object = (wxColour_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxColourPickerCtrl::GetColour\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxColourPickerCtrl::SetColour(wxColour col)
   Sets the currently selected colour. */
PHP_METHOD(php_wxColourPickerCtrl, SetColour)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxColourPickerCtrl::SetColour\n");
    php_printf("===========================================\n");
    #endif

    zo_wxColourPickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxColourPickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxColourPickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxColourPickerCtrl::SetColour call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE){
                references = &((wxColourPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* col0;
    wxColour* object_pointer0_0 = 0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* colname1;
    size_t colname_len1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&col0, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &col0, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(col0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(col0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(col0)->native_object;
                    object_pointer0_0 = (wxColour*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(col0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&colname1, &colname_len1)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &colname1, &colname_len1 ) == SUCCESS)
        {
            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxColourPickerCtrl::SetColour(*(wxColour*) object_pointer0_0)\n\n");
                #endif

                ((wxColourPickerCtrl_php*)native_object)->SetColour(*(wxColour*) object_pointer0_0);

                references->AddReference(col0, "wxColourPickerCtrl::SetColour at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxColourPickerCtrl::SetColour(wxString(colname1, wxConvUTF8))\n\n");
                #endif

                ((wxColourPickerCtrl_php*)native_object)->SetColour(wxString(colname1, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxColourPickerCtrl::SetColour\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxColourPickerCtrl::wxColourPickerCtrl() */
PHP_METHOD(php_wxColourPickerCtrl, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxColourPickerCtrl::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxColourPickerCtrl* current_object;
    wxColourPickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    bool overload0_called = false;

    //Parameters for overload 1
    zval* parent1;
    wxWindow* object_pointer1_0 = 0;
    long id1;
    zval* colour1;
    wxColour* object_pointer1_2 = 0;
    zval* pos1;
    wxPoint* object_pointer1_3 = 0;
    zval* size1;
    wxSize* object_pointer1_4 = 0;
    long style1;
    zval* validator1;
    wxValidator* object_pointer1_6 = 0;
    char* name1;
    size_t name_len1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 2  && arguments_received <= 8)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zl|OOOlos' (&parent1, &id1, &colour1, php_wxColour_entry, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &validator1, &name1, &name_len1)\n");
        #endif

        char parse_parameters_string[] = "zl|OOOlos";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent1, &id1, &colour1, php_wxColour_entry, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &validator1, &name1, &name_len1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent1)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent1)->native_object;
                    object_pointer1_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer1_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(colour1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(colour1)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(colour1)->native_object;
                    object_pointer1_2 = (wxColour*) argument_native_object;
                    if (!object_pointer1_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'colour' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(colour1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'colour' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(pos1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos1)->native_object;
                    object_pointer1_3 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 5){
                if(Z_TYPE_P(size1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size1)->native_object;
                    object_pointer1_4 = (wxSize*) argument_native_object;
                    if (!object_pointer1_4 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 7){
                if(Z_TYPE_P(validator1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxValidator_P(validator1)->object_type;
                    argument_native_object = (void*) Z_wxValidator_P(validator1)->native_object;
                    object_pointer1_6 = (wxValidator*) argument_native_object;
                    if (!object_pointer1_6 || (argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'validator' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(validator1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'validator' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct()\n");
                #endif

                native_object = new wxColourPickerCtrl_php();

                native_object->references.Initialize();
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1)\n");
                #endif

                native_object = new wxColourPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1);

                native_object->references.Initialize();
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxColourPickerCtrl::wxColourPickerCtrl at call 2 with 2 argument(s)");
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxColour*) object_pointer1_2)\n");
                #endif

                native_object = new wxColourPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxColour*) object_pointer1_2);

                native_object->references.Initialize();
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxColourPickerCtrl::wxColourPickerCtrl at call 2 with 3 argument(s)");
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(colour1, "wxColourPickerCtrl::wxColourPickerCtrl at call 4 with 3 argument(s)");
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3)\n");
                #endif

                native_object = new wxColourPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);

                native_object->references.Initialize();
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxColourPickerCtrl::wxColourPickerCtrl at call 2 with 4 argument(s)");
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(colour1, "wxColourPickerCtrl::wxColourPickerCtrl at call 4 with 4 argument(s)");
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(pos1, "wxColourPickerCtrl::wxColourPickerCtrl at call 4 with 4 argument(s)");
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4)\n");
                #endif

                native_object = new wxColourPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4);

                native_object->references.Initialize();
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxColourPickerCtrl::wxColourPickerCtrl at call 2 with 5 argument(s)");
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(colour1, "wxColourPickerCtrl::wxColourPickerCtrl at call 4 with 5 argument(s)");
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(pos1, "wxColourPickerCtrl::wxColourPickerCtrl at call 4 with 5 argument(s)");
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(size1, "wxColourPickerCtrl::wxColourPickerCtrl at call 4 with 5 argument(s)");
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1)\n");
                #endif

                native_object = new wxColourPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1);

                native_object->references.Initialize();
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxColourPickerCtrl::wxColourPickerCtrl at call 2 with 6 argument(s)");
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(colour1, "wxColourPickerCtrl::wxColourPickerCtrl at call 4 with 6 argument(s)");
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(pos1, "wxColourPickerCtrl::wxColourPickerCtrl at call 4 with 6 argument(s)");
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(size1, "wxColourPickerCtrl::wxColourPickerCtrl at call 4 with 6 argument(s)");
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, *(wxValidator*) object_pointer1_6)\n");
                #endif

                native_object = new wxColourPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, *(wxValidator*) object_pointer1_6);

                native_object->references.Initialize();
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxColourPickerCtrl::wxColourPickerCtrl at call 2 with 7 argument(s)");
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(colour1, "wxColourPickerCtrl::wxColourPickerCtrl at call 4 with 7 argument(s)");
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(pos1, "wxColourPickerCtrl::wxColourPickerCtrl at call 4 with 7 argument(s)");
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(size1, "wxColourPickerCtrl::wxColourPickerCtrl at call 4 with 7 argument(s)");
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(validator1, "wxColourPickerCtrl::wxColourPickerCtrl at call 4 with 7 argument(s)");
                break;
            }
            case 8:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, *(wxValidator*) object_pointer1_6, wxString(name1, wxConvUTF8))\n");
                #endif

                native_object = new wxColourPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, *(wxValidator*) object_pointer1_6, wxString(name1, wxConvUTF8));

                native_object->references.Initialize();
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxColourPickerCtrl::wxColourPickerCtrl at call 2 with 8 argument(s)");
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(colour1, "wxColourPickerCtrl::wxColourPickerCtrl at call 4 with 8 argument(s)");
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(pos1, "wxColourPickerCtrl::wxColourPickerCtrl at call 4 with 8 argument(s)");
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(size1, "wxColourPickerCtrl::wxColourPickerCtrl at call 4 with 8 argument(s)");
                ((wxColourPickerCtrl_php*) native_object)->references.AddReference(validator1, "wxColourPickerCtrl::wxColourPickerCtrl at call 4 with 8 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxColourPickerCtrl_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxColourPickerCtrl::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDatePickerCtrl_free(void *object)
{
    zo_wxDatePickerCtrl* custom_object = (zo_wxDatePickerCtrl*) object;

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Obviate delete call for wxDatePickerCtrl on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n\n");
    #endif

    zend_object_std_dtor(&custom_object->zo);
    efree(custom_object);
}

zend_object* php_wxDatePickerCtrl_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxDatePickerCtrl_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxDatePickerCtrl* custom_object;

    custom_object = (zo_wxDatePickerCtrl*) ecalloc(
        1,
        sizeof(zo_wxDatePickerCtrl)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    custom_object->zo.handlers = &wxphp_wxDatePickerCtrl_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXDATEPICKERCTRL_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto  wxDatePickerCtrl::wxDatePickerCtrl()
   Default constructor. */
PHP_METHOD(php_wxDatePickerCtrl, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDatePickerCtrl::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDatePickerCtrl* current_object;
    wxDatePickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    bool overload0_called = false;

    //Parameters for overload 1
    zval* parent1;
    wxWindow* object_pointer1_0 = 0;
    long id1;
    time_t dt1;
    zval* pos1;
    wxPoint* object_pointer1_3 = 0;
    zval* size1;
    wxSize* object_pointer1_4 = 0;
    long style1;
    zval* validator1;
    wxValidator* object_pointer1_6 = 0;
    char* name1;
    size_t name_len1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 2  && arguments_received <= 8)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zl|lOOlos' (&parent1, &id1, &dt1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &validator1, &name1, &name_len1)\n");
        #endif

        char parse_parameters_string[] = "zl|lOOlos";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent1, &id1, &dt1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &validator1, &name1, &name_len1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent1)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent1)->native_object;
                    object_pointer1_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer1_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(pos1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos1)->native_object;
                    object_pointer1_3 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 5){
                if(Z_TYPE_P(size1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size1)->native_object;
                    object_pointer1_4 = (wxSize*) argument_native_object;
                    if (!object_pointer1_4 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 7){
                if(Z_TYPE_P(validator1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxValidator_P(validator1)->object_type;
                    argument_native_object = (void*) Z_wxValidator_P(validator1)->native_object;
                    object_pointer1_6 = (wxValidator*) argument_native_object;
                    if (!object_pointer1_6 || (argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'validator' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(validator1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'validator' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct()\n");
                #endif

                native_object = new wxDatePickerCtrl_php();

                native_object->references.Initialize();
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1)\n");
                #endif

                native_object = new wxDatePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1);

                native_object->references.Initialize();
                ((wxDatePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxDatePickerCtrl::wxDatePickerCtrl at call 2 with 2 argument(s)");
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1))\n");
                #endif

                native_object = new wxDatePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1));

                native_object->references.Initialize();
                ((wxDatePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxDatePickerCtrl::wxDatePickerCtrl at call 2 with 3 argument(s)");
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1), *(wxPoint*) object_pointer1_3)\n");
                #endif

                native_object = new wxDatePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1), *(wxPoint*) object_pointer1_3);

                native_object->references.Initialize();
                ((wxDatePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxDatePickerCtrl::wxDatePickerCtrl at call 2 with 4 argument(s)");
                ((wxDatePickerCtrl_php*) native_object)->references.AddReference(pos1, "wxDatePickerCtrl::wxDatePickerCtrl at call 4 with 4 argument(s)");
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4)\n");
                #endif

                native_object = new wxDatePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4);

                native_object->references.Initialize();
                ((wxDatePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxDatePickerCtrl::wxDatePickerCtrl at call 2 with 5 argument(s)");
                ((wxDatePickerCtrl_php*) native_object)->references.AddReference(pos1, "wxDatePickerCtrl::wxDatePickerCtrl at call 4 with 5 argument(s)");
                ((wxDatePickerCtrl_php*) native_object)->references.AddReference(size1, "wxDatePickerCtrl::wxDatePickerCtrl at call 4 with 5 argument(s)");
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1)\n");
                #endif

                native_object = new wxDatePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1);

                native_object->references.Initialize();
                ((wxDatePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxDatePickerCtrl::wxDatePickerCtrl at call 2 with 6 argument(s)");
                ((wxDatePickerCtrl_php*) native_object)->references.AddReference(pos1, "wxDatePickerCtrl::wxDatePickerCtrl at call 4 with 6 argument(s)");
                ((wxDatePickerCtrl_php*) native_object)->references.AddReference(size1, "wxDatePickerCtrl::wxDatePickerCtrl at call 4 with 6 argument(s)");
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, *(wxValidator*) object_pointer1_6)\n");
                #endif

                native_object = new wxDatePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, *(wxValidator*) object_pointer1_6);

                native_object->references.Initialize();
                ((wxDatePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxDatePickerCtrl::wxDatePickerCtrl at call 2 with 7 argument(s)");
                ((wxDatePickerCtrl_php*) native_object)->references.AddReference(pos1, "wxDatePickerCtrl::wxDatePickerCtrl at call 4 with 7 argument(s)");
                ((wxDatePickerCtrl_php*) native_object)->references.AddReference(size1, "wxDatePickerCtrl::wxDatePickerCtrl at call 4 with 7 argument(s)");
                ((wxDatePickerCtrl_php*) native_object)->references.AddReference(validator1, "wxDatePickerCtrl::wxDatePickerCtrl at call 4 with 7 argument(s)");
                break;
            }
            case 8:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, *(wxValidator*) object_pointer1_6, wxString(name1, wxConvUTF8))\n");
                #endif

                native_object = new wxDatePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, *(wxValidator*) object_pointer1_6, wxString(name1, wxConvUTF8));

                native_object->references.Initialize();
                ((wxDatePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxDatePickerCtrl::wxDatePickerCtrl at call 2 with 8 argument(s)");
                ((wxDatePickerCtrl_php*) native_object)->references.AddReference(pos1, "wxDatePickerCtrl::wxDatePickerCtrl at call 4 with 8 argument(s)");
                ((wxDatePickerCtrl_php*) native_object)->references.AddReference(size1, "wxDatePickerCtrl::wxDatePickerCtrl at call 4 with 8 argument(s)");
                ((wxDatePickerCtrl_php*) native_object)->references.AddReference(validator1, "wxDatePickerCtrl::wxDatePickerCtrl at call 4 with 8 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxDatePickerCtrl_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxDatePickerCtrl::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

/* {{{ proto bool wxDatePickerCtrl::Create(wxWindow &parent, int id, timestamp dt, wxPoint pos, wxSize size, int style, wxValidator validator, string name)
   Create the control window. */
PHP_METHOD(php_wxDatePickerCtrl, Create)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDatePickerCtrl::Create\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDatePickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxDatePickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDatePickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDatePickerCtrl::Create call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDATEPICKERCTRL_TYPE){
                references = &((wxDatePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* parent0;
    wxWindow* object_pointer0_0 = 0;
    long id0;
    time_t dt0;
    zval* pos0;
    wxPoint* object_pointer0_3 = 0;
    zval* size0;
    wxSize* object_pointer0_4 = 0;
    long style0;
    zval* validator0;
    wxValidator* object_pointer0_6 = 0;
    char* name0;
    size_t name_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 2  && arguments_received <= 8)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zl|lOOlos' (&parent0, &id0, &dt0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &validator0, &name0, &name_len0)\n");
        #endif

        char parse_parameters_string[] = "zl|lOOlos";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent0, &id0, &dt0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &validator0, &name0, &name_len0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(pos0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos0)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos0)->native_object;
                    object_pointer0_3 = (wxPoint*) argument_native_object;
                    if (!object_pointer0_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 5){
                if(Z_TYPE_P(size0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size0)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size0)->native_object;
                    object_pointer0_4 = (wxSize*) argument_native_object;
                    if (!object_pointer0_4 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 7){
                if(Z_TYPE_P(validator0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxValidator_P(validator0)->object_type;
                    argument_native_object = (void*) Z_wxValidator_P(validator0)->native_object;
                    object_pointer0_6 = (wxValidator*) argument_native_object;
                    if (!object_pointer0_6 || (argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'validator' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(validator0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'validator' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDatePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0))\n\n");
                #endif

                RETVAL_BOOL(((wxDatePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0));

                references->AddReference(parent0, "wxDatePickerCtrl::Create at call 1 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDatePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0)))\n\n");
                #endif

                RETVAL_BOOL(((wxDatePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0)));

                references->AddReference(parent0, "wxDatePickerCtrl::Create at call 1 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDatePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0), *(wxPoint*) object_pointer0_3))\n\n");
                #endif

                RETVAL_BOOL(((wxDatePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0), *(wxPoint*) object_pointer0_3));

                references->AddReference(parent0, "wxDatePickerCtrl::Create at call 1 with 4 argument(s)");
                references->AddReference(pos0, "wxDatePickerCtrl::Create at call 3 with 4 argument(s)");

                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDatePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4))\n\n");
                #endif

                RETVAL_BOOL(((wxDatePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4));

                references->AddReference(parent0, "wxDatePickerCtrl::Create at call 1 with 5 argument(s)");
                references->AddReference(pos0, "wxDatePickerCtrl::Create at call 3 with 5 argument(s)");
                references->AddReference(size0, "wxDatePickerCtrl::Create at call 3 with 5 argument(s)");

                return;
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDatePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0))\n\n");
                #endif

                RETVAL_BOOL(((wxDatePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0));

                references->AddReference(parent0, "wxDatePickerCtrl::Create at call 1 with 6 argument(s)");
                references->AddReference(pos0, "wxDatePickerCtrl::Create at call 3 with 6 argument(s)");
                references->AddReference(size0, "wxDatePickerCtrl::Create at call 3 with 6 argument(s)");

                return;
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDatePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, *(wxValidator*) object_pointer0_6))\n\n");
                #endif

                RETVAL_BOOL(((wxDatePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, *(wxValidator*) object_pointer0_6));

                references->AddReference(parent0, "wxDatePickerCtrl::Create at call 1 with 7 argument(s)");
                references->AddReference(pos0, "wxDatePickerCtrl::Create at call 3 with 7 argument(s)");
                references->AddReference(size0, "wxDatePickerCtrl::Create at call 3 with 7 argument(s)");
                references->AddReference(validator0, "wxDatePickerCtrl::Create at call 3 with 7 argument(s)");

                return;
                break;
            }
            case 8:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDatePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, *(wxValidator*) object_pointer0_6, wxString(name0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(((wxDatePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, *(wxValidator*) object_pointer0_6, wxString(name0, wxConvUTF8)));

                references->AddReference(parent0, "wxDatePickerCtrl::Create at call 1 with 8 argument(s)");
                references->AddReference(pos0, "wxDatePickerCtrl::Create at call 3 with 8 argument(s)");
                references->AddReference(size0, "wxDatePickerCtrl::Create at call 3 with 8 argument(s)");
                references->AddReference(validator0, "wxDatePickerCtrl::Create at call 3 with 8 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDatePickerCtrl::Create\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDatePickerCtrl::SetValue(timestamp dt)
   Changes the current value of the control. */
PHP_METHOD(php_wxDatePickerCtrl, SetValue)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDatePickerCtrl::SetValue\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDatePickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxDatePickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDatePickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDatePickerCtrl::SetValue call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDATEPICKERCTRL_TYPE){
                references = &((wxDatePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    time_t dt0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&dt0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dt0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDatePickerCtrl::SetValue(wxDateTime(dt0))\n\n");
                #endif

                ((wxDatePickerCtrl_php*)native_object)->SetValue(wxDateTime(dt0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDatePickerCtrl::SetValue\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDatePickerCtrl::SetRange(timestamp dt1, timestamp dt2)
   Sets the valid range for the date selection. */
PHP_METHOD(php_wxDatePickerCtrl, SetRange)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDatePickerCtrl::SetRange\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDatePickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxDatePickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDatePickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDatePickerCtrl::SetRange call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDATEPICKERCTRL_TYPE){
                references = &((wxDatePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    time_t dt10;
    time_t dt20;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&dt10, &dt20)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dt10, &dt20 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDatePickerCtrl::SetRange(wxDateTime(dt10), wxDateTime(dt20))\n\n");
                #endif

                ((wxDatePickerCtrl_php*)native_object)->SetRange(wxDateTime(dt10), wxDateTime(dt20));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDatePickerCtrl::SetRange\n"
        );
    }
}
/* }}} */

/* {{{ proto timestamp wxDatePickerCtrl::GetValue()
   Returns the currently entered date. */
PHP_METHOD(php_wxDatePickerCtrl, GetValue)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDatePickerCtrl::GetValue\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDatePickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxDatePickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDatePickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDatePickerCtrl::GetValue call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDATEPICKERCTRL_TYPE){
                references = &((wxDatePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDatePickerCtrl::GetValue() to return timestamp\n\n");
                #endif

                time_t value_to_return0;
                value_to_return0 = ((wxDatePickerCtrl_php*)native_object)->GetValue().GetTicks();
                RETVAL_LONG(value_to_return0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDatePickerCtrl::GetValue\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxDatePickerCtrl::GetRange(timestamp &dt1, timestamp &dt2)
   If the control had been previously limited to a range of dates using SetRange(), returns the lower and upper bounds of this range. */
PHP_METHOD(php_wxDatePickerCtrl, GetRange)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDatePickerCtrl::GetRange\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDatePickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxDatePickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDatePickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDatePickerCtrl::GetRange call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDATEPICKERCTRL_TYPE){
                references = &((wxDatePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    time_t dt10;
    zval dt10_ref;
    time_t dt20;
    zval dt20_ref;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&dt10, &dt20)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dt10, &dt20 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, dt10_ref, dt20_ref );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                wxDateTime date_time0_0 = wxDateTime(dt10);
                wxDateTime date_time0_1 = wxDateTime(dt20);
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDatePickerCtrl::GetRange(&date_time0_0, &date_time0_1))\n\n");
                #endif

                RETVAL_BOOL(((wxDatePickerCtrl_php*)native_object)->GetRange(&date_time0_0, &date_time0_1));

                ZVAL_LONG(&dt10_ref, date_time0_0.GetTicks());
                ZVAL_LONG(&dt20_ref, date_time0_1.GetTicks());

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDatePickerCtrl::GetRange\n"
        );
    }
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxFilePickerCtrl_free(void *object)
{
    zo_wxFilePickerCtrl* custom_object = (zo_wxFilePickerCtrl*) object;

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Obviate delete call for wxFilePickerCtrl on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n\n");
    #endif

    zend_object_std_dtor(&custom_object->zo);
    efree(custom_object);
}

zend_object* php_wxFilePickerCtrl_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxFilePickerCtrl_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxFilePickerCtrl* custom_object;

    custom_object = (zo_wxFilePickerCtrl*) ecalloc(
        1,
        sizeof(zo_wxFilePickerCtrl)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    custom_object->zo.handlers = &wxphp_wxFilePickerCtrl_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXFILEPICKERCTRL_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto bool wxFilePickerCtrl::Create(wxWindow &parent, int id, string path, string message, string wildcard, wxPoint pos, wxSize size, int style, wxValidator validator, string name)
   Creates this widget with the given parameters. */
PHP_METHOD(php_wxFilePickerCtrl, Create)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxFilePickerCtrl::Create\n");
    php_printf("===========================================\n");
    #endif

    zo_wxFilePickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxFilePickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxFilePickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxFilePickerCtrl::Create call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXFILEPICKERCTRL_TYPE){
                references = &((wxFilePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* parent0;
    wxWindow* object_pointer0_0 = 0;
    long id0;
    char* path0;
    size_t path_len0;
    char* message0;
    size_t message_len0;
    char* wildcard0;
    size_t wildcard_len0;
    zval* pos0;
    wxPoint* object_pointer0_5 = 0;
    zval* size0;
    wxSize* object_pointer0_6 = 0;
    long style0;
    zval* validator0;
    wxValidator* object_pointer0_8 = 0;
    char* name0;
    size_t name_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 2  && arguments_received <= 10)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zl|sssOOlos' (&parent0, &id0, &path0, &path_len0, &message0, &message_len0, &wildcard0, &wildcard_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &validator0, &name0, &name_len0)\n");
        #endif

        char parse_parameters_string[] = "zl|sssOOlos";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent0, &id0, &path0, &path_len0, &message0, &message_len0, &wildcard0, &wildcard_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &validator0, &name0, &name_len0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 6){
                if(Z_TYPE_P(pos0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos0)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos0)->native_object;
                    object_pointer0_5 = (wxPoint*) argument_native_object;
                    if (!object_pointer0_5 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 7){
                if(Z_TYPE_P(size0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size0)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size0)->native_object;
                    object_pointer0_6 = (wxSize*) argument_native_object;
                    if (!object_pointer0_6 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 9){
                if(Z_TYPE_P(validator0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxValidator_P(validator0)->object_type;
                    argument_native_object = (void*) Z_wxValidator_P(validator0)->native_object;
                    object_pointer0_8 = (wxValidator*) argument_native_object;
                    if (!object_pointer0_8 || (argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'validator' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(validator0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'validator' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxFilePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0))\n\n");
                #endif

                RETVAL_BOOL(((wxFilePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0));

                references->AddReference(parent0, "wxFilePickerCtrl::Create at call 1 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxFilePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(((wxFilePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8)));

                references->AddReference(parent0, "wxFilePickerCtrl::Create at call 1 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxFilePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(((wxFilePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8)));

                references->AddReference(parent0, "wxFilePickerCtrl::Create at call 1 with 4 argument(s)");

                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxFilePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), wxString(wildcard0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(((wxFilePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), wxString(wildcard0, wxConvUTF8)));

                references->AddReference(parent0, "wxFilePickerCtrl::Create at call 1 with 5 argument(s)");

                return;
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxFilePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), *(wxPoint*) object_pointer0_5))\n\n");
                #endif

                RETVAL_BOOL(((wxFilePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), *(wxPoint*) object_pointer0_5));

                references->AddReference(parent0, "wxFilePickerCtrl::Create at call 1 with 6 argument(s)");
                references->AddReference(pos0, "wxFilePickerCtrl::Create at call 3 with 6 argument(s)");

                return;
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxFilePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), *(wxPoint*) object_pointer0_5, *(wxSize*) object_pointer0_6))\n\n");
                #endif

                RETVAL_BOOL(((wxFilePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), *(wxPoint*) object_pointer0_5, *(wxSize*) object_pointer0_6));

                references->AddReference(parent0, "wxFilePickerCtrl::Create at call 1 with 7 argument(s)");
                references->AddReference(pos0, "wxFilePickerCtrl::Create at call 3 with 7 argument(s)");
                references->AddReference(size0, "wxFilePickerCtrl::Create at call 3 with 7 argument(s)");

                return;
                break;
            }
            case 8:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxFilePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), *(wxPoint*) object_pointer0_5, *(wxSize*) object_pointer0_6, (long) style0))\n\n");
                #endif

                RETVAL_BOOL(((wxFilePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), *(wxPoint*) object_pointer0_5, *(wxSize*) object_pointer0_6, (long) style0));

                references->AddReference(parent0, "wxFilePickerCtrl::Create at call 1 with 8 argument(s)");
                references->AddReference(pos0, "wxFilePickerCtrl::Create at call 3 with 8 argument(s)");
                references->AddReference(size0, "wxFilePickerCtrl::Create at call 3 with 8 argument(s)");

                return;
                break;
            }
            case 9:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxFilePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), *(wxPoint*) object_pointer0_5, *(wxSize*) object_pointer0_6, (long) style0, *(wxValidator*) object_pointer0_8))\n\n");
                #endif

                RETVAL_BOOL(((wxFilePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), *(wxPoint*) object_pointer0_5, *(wxSize*) object_pointer0_6, (long) style0, *(wxValidator*) object_pointer0_8));

                references->AddReference(parent0, "wxFilePickerCtrl::Create at call 1 with 9 argument(s)");
                references->AddReference(pos0, "wxFilePickerCtrl::Create at call 3 with 9 argument(s)");
                references->AddReference(size0, "wxFilePickerCtrl::Create at call 3 with 9 argument(s)");
                references->AddReference(validator0, "wxFilePickerCtrl::Create at call 3 with 9 argument(s)");

                return;
                break;
            }
            case 10:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxFilePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), *(wxPoint*) object_pointer0_5, *(wxSize*) object_pointer0_6, (long) style0, *(wxValidator*) object_pointer0_8, wxString(name0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(((wxFilePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), *(wxPoint*) object_pointer0_5, *(wxSize*) object_pointer0_6, (long) style0, *(wxValidator*) object_pointer0_8, wxString(name0, wxConvUTF8)));

                references->AddReference(parent0, "wxFilePickerCtrl::Create at call 1 with 10 argument(s)");
                references->AddReference(pos0, "wxFilePickerCtrl::Create at call 3 with 10 argument(s)");
                references->AddReference(size0, "wxFilePickerCtrl::Create at call 3 with 10 argument(s)");
                references->AddReference(validator0, "wxFilePickerCtrl::Create at call 3 with 10 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxFilePickerCtrl::Create\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxFilePickerCtrl::GetPath()
   Returns the absolute path of the currently selected file. */
PHP_METHOD(php_wxFilePickerCtrl, GetPath)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxFilePickerCtrl::GetPath\n");
    php_printf("===========================================\n");
    #endif

    zo_wxFilePickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxFilePickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxFilePickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxFilePickerCtrl::GetPath call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXFILEPICKERCTRL_TYPE){
                references = &((wxFilePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxFilePickerCtrl::GetPath().fn_str(), 1)\n\n");
                #endif

                wxString value_to_return0;
                value_to_return0 = ((wxFilePickerCtrl_php*)native_object)->GetPath();
                RETVAL_STRING(value_to_return0.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxFilePickerCtrl::GetPath\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxFilePickerCtrl::SetFileName(wxFileName filename)
   This method does the same thing as SetPath() but takes a wxFileName object instead of a string. */
PHP_METHOD(php_wxFilePickerCtrl, SetFileName)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxFilePickerCtrl::SetFileName\n");
    php_printf("===========================================\n");
    #endif

    zo_wxFilePickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxFilePickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxFilePickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxFilePickerCtrl::SetFileName call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXFILEPICKERCTRL_TYPE){
                references = &((wxFilePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* filename0;
    wxFileName* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&filename0, php_wxFileName_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &filename0, php_wxFileName_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(filename0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxFileName_P(filename0)->object_type;
                    argument_native_object = (void*) Z_wxFileName_P(filename0)->native_object;
                    object_pointer0_0 = (wxFileName*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'filename' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(filename0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'filename' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxFilePickerCtrl::SetFileName(*(wxFileName*) object_pointer0_0)\n\n");
                #endif

                ((wxFilePickerCtrl_php*)native_object)->SetFileName(*(wxFileName*) object_pointer0_0);

                references->AddReference(filename0, "wxFilePickerCtrl::SetFileName at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxFilePickerCtrl::SetFileName\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxFilePickerCtrl::SetPath(string filename)
   Sets the absolute path of the currently selected file. */
PHP_METHOD(php_wxFilePickerCtrl, SetPath)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxFilePickerCtrl::SetPath\n");
    php_printf("===========================================\n");
    #endif

    zo_wxFilePickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxFilePickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxFilePickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxFilePickerCtrl::SetPath call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXFILEPICKERCTRL_TYPE){
                references = &((wxFilePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* filename0;
    size_t filename_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&filename0, &filename_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &filename0, &filename_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxFilePickerCtrl::SetPath(wxString(filename0, wxConvUTF8))\n\n");
                #endif

                ((wxFilePickerCtrl_php*)native_object)->SetPath(wxString(filename0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxFilePickerCtrl::SetPath\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxFilePickerCtrl::wxFilePickerCtrl() */
PHP_METHOD(php_wxFilePickerCtrl, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxFilePickerCtrl::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxFilePickerCtrl* current_object;
    wxFilePickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    bool overload0_called = false;

    //Parameters for overload 1
    zval* parent1;
    wxWindow* object_pointer1_0 = 0;
    long id1;
    char* path1;
    size_t path_len1;
    char* message1;
    size_t message_len1;
    char* wildcard1;
    size_t wildcard_len1;
    zval* pos1;
    wxPoint* object_pointer1_5 = 0;
    zval* size1;
    wxSize* object_pointer1_6 = 0;
    long style1;
    zval* validator1;
    wxValidator* object_pointer1_8 = 0;
    char* name1;
    size_t name_len1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 2  && arguments_received <= 10)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zl|sssOOlos' (&parent1, &id1, &path1, &path_len1, &message1, &message_len1, &wildcard1, &wildcard_len1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &validator1, &name1, &name_len1)\n");
        #endif

        char parse_parameters_string[] = "zl|sssOOlos";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent1, &id1, &path1, &path_len1, &message1, &message_len1, &wildcard1, &wildcard_len1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &validator1, &name1, &name_len1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent1)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent1)->native_object;
                    object_pointer1_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer1_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 6){
                if(Z_TYPE_P(pos1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos1)->native_object;
                    object_pointer1_5 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_5 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 7){
                if(Z_TYPE_P(size1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size1)->native_object;
                    object_pointer1_6 = (wxSize*) argument_native_object;
                    if (!object_pointer1_6 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 9){
                if(Z_TYPE_P(validator1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxValidator_P(validator1)->object_type;
                    argument_native_object = (void*) Z_wxValidator_P(validator1)->native_object;
                    object_pointer1_8 = (wxValidator*) argument_native_object;
                    if (!object_pointer1_8 || (argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'validator' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(validator1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'validator' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct()\n");
                #endif

                native_object = new wxFilePickerCtrl_php();

                native_object->references.Initialize();
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1)\n");
                #endif

                native_object = new wxFilePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1);

                native_object->references.Initialize();
                ((wxFilePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxFilePickerCtrl::wxFilePickerCtrl at call 2 with 2 argument(s)");
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8))\n");
                #endif

                native_object = new wxFilePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8));

                native_object->references.Initialize();
                ((wxFilePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxFilePickerCtrl::wxFilePickerCtrl at call 2 with 3 argument(s)");
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8))\n");
                #endif

                native_object = new wxFilePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8));

                native_object->references.Initialize();
                ((wxFilePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxFilePickerCtrl::wxFilePickerCtrl at call 2 with 4 argument(s)");
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), wxString(wildcard1, wxConvUTF8))\n");
                #endif

                native_object = new wxFilePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), wxString(wildcard1, wxConvUTF8));

                native_object->references.Initialize();
                ((wxFilePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxFilePickerCtrl::wxFilePickerCtrl at call 2 with 5 argument(s)");
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), wxString(wildcard1, wxConvUTF8), *(wxPoint*) object_pointer1_5)\n");
                #endif

                native_object = new wxFilePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), wxString(wildcard1, wxConvUTF8), *(wxPoint*) object_pointer1_5);

                native_object->references.Initialize();
                ((wxFilePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxFilePickerCtrl::wxFilePickerCtrl at call 2 with 6 argument(s)");
                ((wxFilePickerCtrl_php*) native_object)->references.AddReference(pos1, "wxFilePickerCtrl::wxFilePickerCtrl at call 4 with 6 argument(s)");
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), wxString(wildcard1, wxConvUTF8), *(wxPoint*) object_pointer1_5, *(wxSize*) object_pointer1_6)\n");
                #endif

                native_object = new wxFilePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), wxString(wildcard1, wxConvUTF8), *(wxPoint*) object_pointer1_5, *(wxSize*) object_pointer1_6);

                native_object->references.Initialize();
                ((wxFilePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxFilePickerCtrl::wxFilePickerCtrl at call 2 with 7 argument(s)");
                ((wxFilePickerCtrl_php*) native_object)->references.AddReference(pos1, "wxFilePickerCtrl::wxFilePickerCtrl at call 4 with 7 argument(s)");
                ((wxFilePickerCtrl_php*) native_object)->references.AddReference(size1, "wxFilePickerCtrl::wxFilePickerCtrl at call 4 with 7 argument(s)");
                break;
            }
            case 8:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), wxString(wildcard1, wxConvUTF8), *(wxPoint*) object_pointer1_5, *(wxSize*) object_pointer1_6, (long) style1)\n");
                #endif

                native_object = new wxFilePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), wxString(wildcard1, wxConvUTF8), *(wxPoint*) object_pointer1_5, *(wxSize*) object_pointer1_6, (long) style1);

                native_object->references.Initialize();
                ((wxFilePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxFilePickerCtrl::wxFilePickerCtrl at call 2 with 8 argument(s)");
                ((wxFilePickerCtrl_php*) native_object)->references.AddReference(pos1, "wxFilePickerCtrl::wxFilePickerCtrl at call 4 with 8 argument(s)");
                ((wxFilePickerCtrl_php*) native_object)->references.AddReference(size1, "wxFilePickerCtrl::wxFilePickerCtrl at call 4 with 8 argument(s)");
                break;
            }
            case 9:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), wxString(wildcard1, wxConvUTF8), *(wxPoint*) object_pointer1_5, *(wxSize*) object_pointer1_6, (long) style1, *(wxValidator*) object_pointer1_8)\n");
                #endif

                native_object = new wxFilePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), wxString(wildcard1, wxConvUTF8), *(wxPoint*) object_pointer1_5, *(wxSize*) object_pointer1_6, (long) style1, *(wxValidator*) object_pointer1_8);

                native_object->references.Initialize();
                ((wxFilePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxFilePickerCtrl::wxFilePickerCtrl at call 2 with 9 argument(s)");
                ((wxFilePickerCtrl_php*) native_object)->references.AddReference(pos1, "wxFilePickerCtrl::wxFilePickerCtrl at call 4 with 9 argument(s)");
                ((wxFilePickerCtrl_php*) native_object)->references.AddReference(size1, "wxFilePickerCtrl::wxFilePickerCtrl at call 4 with 9 argument(s)");
                ((wxFilePickerCtrl_php*) native_object)->references.AddReference(validator1, "wxFilePickerCtrl::wxFilePickerCtrl at call 4 with 9 argument(s)");
                break;
            }
            case 10:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), wxString(wildcard1, wxConvUTF8), *(wxPoint*) object_pointer1_5, *(wxSize*) object_pointer1_6, (long) style1, *(wxValidator*) object_pointer1_8, wxString(name1, wxConvUTF8))\n");
                #endif

                native_object = new wxFilePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), wxString(wildcard1, wxConvUTF8), *(wxPoint*) object_pointer1_5, *(wxSize*) object_pointer1_6, (long) style1, *(wxValidator*) object_pointer1_8, wxString(name1, wxConvUTF8));

                native_object->references.Initialize();
                ((wxFilePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxFilePickerCtrl::wxFilePickerCtrl at call 2 with 10 argument(s)");
                ((wxFilePickerCtrl_php*) native_object)->references.AddReference(pos1, "wxFilePickerCtrl::wxFilePickerCtrl at call 4 with 10 argument(s)");
                ((wxFilePickerCtrl_php*) native_object)->references.AddReference(size1, "wxFilePickerCtrl::wxFilePickerCtrl at call 4 with 10 argument(s)");
                ((wxFilePickerCtrl_php*) native_object)->references.AddReference(validator1, "wxFilePickerCtrl::wxFilePickerCtrl at call 4 with 10 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxFilePickerCtrl_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxFilePickerCtrl::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

/* {{{ proto wxFileName wxFilePickerCtrl::GetFileName()
   Similar to GetPath() but returns the path of the currently selected file as a wxFileName object. */
PHP_METHOD(php_wxFilePickerCtrl, GetFileName)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxFilePickerCtrl::GetFileName\n");
    php_printf("===========================================\n");
    #endif

    zo_wxFilePickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxFilePickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxFilePickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxFilePickerCtrl::GetFileName call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXFILEPICKERCTRL_TYPE){
                references = &((wxFilePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxFilePickerCtrl::GetFileName() to return new object\n\n");
                #endif

                wxFileName value_to_return0;
                value_to_return0 = ((wxFilePickerCtrl_php*)native_object)->GetFileName();
                void* ptr = safe_emalloc(1, sizeof(wxFileName_php), 0);
                memcpy(ptr, (void*) &value_to_return0, sizeof(wxFileName));
                object_init_ex(return_value, php_wxFileName_entry);
                ((wxFileName_php*)ptr)->phpObj = *return_value;
                zo_wxFileName* zo0 = Z_wxFileName_P(return_value);
                zo0->native_object = (wxFileName_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxFilePickerCtrl::GetFileName\n"
        );
    }
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDirPickerCtrl_free(void *object)
{
    zo_wxDirPickerCtrl* custom_object = (zo_wxDirPickerCtrl*) object;

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Obviate delete call for wxDirPickerCtrl on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n\n");
    #endif

    zend_object_std_dtor(&custom_object->zo);
    efree(custom_object);
}

zend_object* php_wxDirPickerCtrl_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxDirPickerCtrl_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxDirPickerCtrl* custom_object;

    custom_object = (zo_wxDirPickerCtrl*) ecalloc(
        1,
        sizeof(zo_wxDirPickerCtrl)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    custom_object->zo.handlers = &wxphp_wxDirPickerCtrl_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXDIRPICKERCTRL_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto bool wxDirPickerCtrl::Create(wxWindow &parent, int id, string path, string message, wxPoint pos, wxSize size, int style, wxValidator validator, string name)
   Creates the widgets with the given parameters. */
PHP_METHOD(php_wxDirPickerCtrl, Create)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDirPickerCtrl::Create\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDirPickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxDirPickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDirPickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDirPickerCtrl::Create call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDIRPICKERCTRL_TYPE){
                references = &((wxDirPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* parent0;
    wxWindow* object_pointer0_0 = 0;
    long id0;
    char* path0;
    size_t path_len0;
    char* message0;
    size_t message_len0;
    zval* pos0;
    wxPoint* object_pointer0_4 = 0;
    zval* size0;
    wxSize* object_pointer0_5 = 0;
    long style0;
    zval* validator0;
    wxValidator* object_pointer0_7 = 0;
    char* name0;
    size_t name_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 2  && arguments_received <= 9)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zl|ssOOlos' (&parent0, &id0, &path0, &path_len0, &message0, &message_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &validator0, &name0, &name_len0)\n");
        #endif

        char parse_parameters_string[] = "zl|ssOOlos";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent0, &id0, &path0, &path_len0, &message0, &message_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &validator0, &name0, &name_len0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 5){
                if(Z_TYPE_P(pos0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos0)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos0)->native_object;
                    object_pointer0_4 = (wxPoint*) argument_native_object;
                    if (!object_pointer0_4 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 6){
                if(Z_TYPE_P(size0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size0)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size0)->native_object;
                    object_pointer0_5 = (wxSize*) argument_native_object;
                    if (!object_pointer0_5 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 8){
                if(Z_TYPE_P(validator0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxValidator_P(validator0)->object_type;
                    argument_native_object = (void*) Z_wxValidator_P(validator0)->native_object;
                    object_pointer0_7 = (wxValidator*) argument_native_object;
                    if (!object_pointer0_7 || (argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'validator' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(validator0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'validator' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDirPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0))\n\n");
                #endif

                RETVAL_BOOL(((wxDirPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0));

                references->AddReference(parent0, "wxDirPickerCtrl::Create at call 1 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDirPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(((wxDirPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8)));

                references->AddReference(parent0, "wxDirPickerCtrl::Create at call 1 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDirPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(((wxDirPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8)));

                references->AddReference(parent0, "wxDirPickerCtrl::Create at call 1 with 4 argument(s)");

                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDirPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), *(wxPoint*) object_pointer0_4))\n\n");
                #endif

                RETVAL_BOOL(((wxDirPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), *(wxPoint*) object_pointer0_4));

                references->AddReference(parent0, "wxDirPickerCtrl::Create at call 1 with 5 argument(s)");
                references->AddReference(pos0, "wxDirPickerCtrl::Create at call 3 with 5 argument(s)");

                return;
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDirPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), *(wxPoint*) object_pointer0_4, *(wxSize*) object_pointer0_5))\n\n");
                #endif

                RETVAL_BOOL(((wxDirPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), *(wxPoint*) object_pointer0_4, *(wxSize*) object_pointer0_5));

                references->AddReference(parent0, "wxDirPickerCtrl::Create at call 1 with 6 argument(s)");
                references->AddReference(pos0, "wxDirPickerCtrl::Create at call 3 with 6 argument(s)");
                references->AddReference(size0, "wxDirPickerCtrl::Create at call 3 with 6 argument(s)");

                return;
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDirPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), *(wxPoint*) object_pointer0_4, *(wxSize*) object_pointer0_5, (long) style0))\n\n");
                #endif

                RETVAL_BOOL(((wxDirPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), *(wxPoint*) object_pointer0_4, *(wxSize*) object_pointer0_5, (long) style0));

                references->AddReference(parent0, "wxDirPickerCtrl::Create at call 1 with 7 argument(s)");
                references->AddReference(pos0, "wxDirPickerCtrl::Create at call 3 with 7 argument(s)");
                references->AddReference(size0, "wxDirPickerCtrl::Create at call 3 with 7 argument(s)");

                return;
                break;
            }
            case 8:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDirPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), *(wxPoint*) object_pointer0_4, *(wxSize*) object_pointer0_5, (long) style0, *(wxValidator*) object_pointer0_7))\n\n");
                #endif

                RETVAL_BOOL(((wxDirPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), *(wxPoint*) object_pointer0_4, *(wxSize*) object_pointer0_5, (long) style0, *(wxValidator*) object_pointer0_7));

                references->AddReference(parent0, "wxDirPickerCtrl::Create at call 1 with 8 argument(s)");
                references->AddReference(pos0, "wxDirPickerCtrl::Create at call 3 with 8 argument(s)");
                references->AddReference(size0, "wxDirPickerCtrl::Create at call 3 with 8 argument(s)");
                references->AddReference(validator0, "wxDirPickerCtrl::Create at call 3 with 8 argument(s)");

                return;
                break;
            }
            case 9:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxDirPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), *(wxPoint*) object_pointer0_4, *(wxSize*) object_pointer0_5, (long) style0, *(wxValidator*) object_pointer0_7, wxString(name0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(((wxDirPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(path0, wxConvUTF8), wxString(message0, wxConvUTF8), *(wxPoint*) object_pointer0_4, *(wxSize*) object_pointer0_5, (long) style0, *(wxValidator*) object_pointer0_7, wxString(name0, wxConvUTF8)));

                references->AddReference(parent0, "wxDirPickerCtrl::Create at call 1 with 9 argument(s)");
                references->AddReference(pos0, "wxDirPickerCtrl::Create at call 3 with 9 argument(s)");
                references->AddReference(size0, "wxDirPickerCtrl::Create at call 3 with 9 argument(s)");
                references->AddReference(validator0, "wxDirPickerCtrl::Create at call 3 with 9 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDirPickerCtrl::Create\n"
        );
    }
}
/* }}} */

/* {{{ proto wxFileName wxDirPickerCtrl::GetDirName()
   Returns the absolute path of the currently selected directory as a wxFileName object. */
PHP_METHOD(php_wxDirPickerCtrl, GetDirName)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDirPickerCtrl::GetDirName\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDirPickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxDirPickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDirPickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDirPickerCtrl::GetDirName call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDIRPICKERCTRL_TYPE){
                references = &((wxDirPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDirPickerCtrl::GetDirName() to return new object\n\n");
                #endif

                wxFileName value_to_return0;
                value_to_return0 = ((wxDirPickerCtrl_php*)native_object)->GetDirName();
                void* ptr = safe_emalloc(1, sizeof(wxFileName_php), 0);
                memcpy(ptr, (void*) &value_to_return0, sizeof(wxFileName));
                object_init_ex(return_value, php_wxFileName_entry);
                ((wxFileName_php*)ptr)->phpObj = *return_value;
                zo_wxFileName* zo0 = Z_wxFileName_P(return_value);
                zo0->native_object = (wxFileName_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDirPickerCtrl::GetDirName\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxDirPickerCtrl::GetPath()
   Returns the absolute path of the currently selected directory. */
PHP_METHOD(php_wxDirPickerCtrl, GetPath)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDirPickerCtrl::GetPath\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDirPickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxDirPickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDirPickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDirPickerCtrl::GetPath call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDIRPICKERCTRL_TYPE){
                references = &((wxDirPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(wxDirPickerCtrl::GetPath().fn_str(), 1)\n\n");
                #endif

                wxString value_to_return0;
                value_to_return0 = ((wxDirPickerCtrl_php*)native_object)->GetPath();
                RETVAL_STRING(value_to_return0.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDirPickerCtrl::GetPath\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDirPickerCtrl::SetDirName(wxFileName dirname)
   Just like SetPath() but this function takes a wxFileName object. */
PHP_METHOD(php_wxDirPickerCtrl, SetDirName)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDirPickerCtrl::SetDirName\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDirPickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxDirPickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDirPickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDirPickerCtrl::SetDirName call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDIRPICKERCTRL_TYPE){
                references = &((wxDirPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* dirname0;
    wxFileName* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&dirname0, php_wxFileName_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dirname0, php_wxFileName_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(dirname0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxFileName_P(dirname0)->object_type;
                    argument_native_object = (void*) Z_wxFileName_P(dirname0)->native_object;
                    object_pointer0_0 = (wxFileName*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'dirname' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(dirname0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'dirname' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDirPickerCtrl::SetDirName(*(wxFileName*) object_pointer0_0)\n\n");
                #endif

                ((wxDirPickerCtrl_php*)native_object)->SetDirName(*(wxFileName*) object_pointer0_0);

                references->AddReference(dirname0, "wxDirPickerCtrl::SetDirName at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDirPickerCtrl::SetDirName\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDirPickerCtrl::SetPath(string dirname)
   Sets the absolute path of the currently selected directory. */
PHP_METHOD(php_wxDirPickerCtrl, SetPath)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDirPickerCtrl::SetPath\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDirPickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxDirPickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxDirPickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxDirPickerCtrl::SetPath call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXDIRPICKERCTRL_TYPE){
                references = &((wxDirPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    char* dirname0;
    size_t dirname_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&dirname0, &dirname_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dirname0, &dirname_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxDirPickerCtrl::SetPath(wxString(dirname0, wxConvUTF8))\n\n");
                #endif

                ((wxDirPickerCtrl_php*)native_object)->SetPath(wxString(dirname0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxDirPickerCtrl::SetPath\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDirPickerCtrl::wxDirPickerCtrl() */
PHP_METHOD(php_wxDirPickerCtrl, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxDirPickerCtrl::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxDirPickerCtrl* current_object;
    wxDirPickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    bool overload0_called = false;

    //Parameters for overload 1
    zval* parent1;
    wxWindow* object_pointer1_0 = 0;
    long id1;
    char* path1;
    size_t path_len1;
    char* message1;
    size_t message_len1;
    zval* pos1;
    wxPoint* object_pointer1_4 = 0;
    zval* size1;
    wxSize* object_pointer1_5 = 0;
    long style1;
    zval* validator1;
    wxValidator* object_pointer1_7 = 0;
    char* name1;
    size_t name_len1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 2  && arguments_received <= 9)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zl|ssOOlos' (&parent1, &id1, &path1, &path_len1, &message1, &message_len1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &validator1, &name1, &name_len1)\n");
        #endif

        char parse_parameters_string[] = "zl|ssOOlos";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent1, &id1, &path1, &path_len1, &message1, &message_len1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &validator1, &name1, &name_len1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent1)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent1)->native_object;
                    object_pointer1_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer1_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 5){
                if(Z_TYPE_P(pos1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos1)->native_object;
                    object_pointer1_4 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_4 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 6){
                if(Z_TYPE_P(size1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size1)->native_object;
                    object_pointer1_5 = (wxSize*) argument_native_object;
                    if (!object_pointer1_5 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 8){
                if(Z_TYPE_P(validator1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxValidator_P(validator1)->object_type;
                    argument_native_object = (void*) Z_wxValidator_P(validator1)->native_object;
                    object_pointer1_7 = (wxValidator*) argument_native_object;
                    if (!object_pointer1_7 || (argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'validator' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(validator1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'validator' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct()\n");
                #endif

                native_object = new wxDirPickerCtrl_php();

                native_object->references.Initialize();
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1)\n");
                #endif

                native_object = new wxDirPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1);

                native_object->references.Initialize();
                ((wxDirPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxDirPickerCtrl::wxDirPickerCtrl at call 2 with 2 argument(s)");
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8))\n");
                #endif

                native_object = new wxDirPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8));

                native_object->references.Initialize();
                ((wxDirPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxDirPickerCtrl::wxDirPickerCtrl at call 2 with 3 argument(s)");
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8))\n");
                #endif

                native_object = new wxDirPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8));

                native_object->references.Initialize();
                ((wxDirPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxDirPickerCtrl::wxDirPickerCtrl at call 2 with 4 argument(s)");
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), *(wxPoint*) object_pointer1_4)\n");
                #endif

                native_object = new wxDirPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), *(wxPoint*) object_pointer1_4);

                native_object->references.Initialize();
                ((wxDirPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxDirPickerCtrl::wxDirPickerCtrl at call 2 with 5 argument(s)");
                ((wxDirPickerCtrl_php*) native_object)->references.AddReference(pos1, "wxDirPickerCtrl::wxDirPickerCtrl at call 4 with 5 argument(s)");
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), *(wxPoint*) object_pointer1_4, *(wxSize*) object_pointer1_5)\n");
                #endif

                native_object = new wxDirPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), *(wxPoint*) object_pointer1_4, *(wxSize*) object_pointer1_5);

                native_object->references.Initialize();
                ((wxDirPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxDirPickerCtrl::wxDirPickerCtrl at call 2 with 6 argument(s)");
                ((wxDirPickerCtrl_php*) native_object)->references.AddReference(pos1, "wxDirPickerCtrl::wxDirPickerCtrl at call 4 with 6 argument(s)");
                ((wxDirPickerCtrl_php*) native_object)->references.AddReference(size1, "wxDirPickerCtrl::wxDirPickerCtrl at call 4 with 6 argument(s)");
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), *(wxPoint*) object_pointer1_4, *(wxSize*) object_pointer1_5, (long) style1)\n");
                #endif

                native_object = new wxDirPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), *(wxPoint*) object_pointer1_4, *(wxSize*) object_pointer1_5, (long) style1);

                native_object->references.Initialize();
                ((wxDirPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxDirPickerCtrl::wxDirPickerCtrl at call 2 with 7 argument(s)");
                ((wxDirPickerCtrl_php*) native_object)->references.AddReference(pos1, "wxDirPickerCtrl::wxDirPickerCtrl at call 4 with 7 argument(s)");
                ((wxDirPickerCtrl_php*) native_object)->references.AddReference(size1, "wxDirPickerCtrl::wxDirPickerCtrl at call 4 with 7 argument(s)");
                break;
            }
            case 8:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), *(wxPoint*) object_pointer1_4, *(wxSize*) object_pointer1_5, (long) style1, *(wxValidator*) object_pointer1_7)\n");
                #endif

                native_object = new wxDirPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), *(wxPoint*) object_pointer1_4, *(wxSize*) object_pointer1_5, (long) style1, *(wxValidator*) object_pointer1_7);

                native_object->references.Initialize();
                ((wxDirPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxDirPickerCtrl::wxDirPickerCtrl at call 2 with 8 argument(s)");
                ((wxDirPickerCtrl_php*) native_object)->references.AddReference(pos1, "wxDirPickerCtrl::wxDirPickerCtrl at call 4 with 8 argument(s)");
                ((wxDirPickerCtrl_php*) native_object)->references.AddReference(size1, "wxDirPickerCtrl::wxDirPickerCtrl at call 4 with 8 argument(s)");
                ((wxDirPickerCtrl_php*) native_object)->references.AddReference(validator1, "wxDirPickerCtrl::wxDirPickerCtrl at call 4 with 8 argument(s)");
                break;
            }
            case 9:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), *(wxPoint*) object_pointer1_4, *(wxSize*) object_pointer1_5, (long) style1, *(wxValidator*) object_pointer1_7, wxString(name1, wxConvUTF8))\n");
                #endif

                native_object = new wxDirPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(path1, wxConvUTF8), wxString(message1, wxConvUTF8), *(wxPoint*) object_pointer1_4, *(wxSize*) object_pointer1_5, (long) style1, *(wxValidator*) object_pointer1_7, wxString(name1, wxConvUTF8));

                native_object->references.Initialize();
                ((wxDirPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxDirPickerCtrl::wxDirPickerCtrl at call 2 with 9 argument(s)");
                ((wxDirPickerCtrl_php*) native_object)->references.AddReference(pos1, "wxDirPickerCtrl::wxDirPickerCtrl at call 4 with 9 argument(s)");
                ((wxDirPickerCtrl_php*) native_object)->references.AddReference(size1, "wxDirPickerCtrl::wxDirPickerCtrl at call 4 with 9 argument(s)");
                ((wxDirPickerCtrl_php*) native_object)->references.AddReference(validator1, "wxDirPickerCtrl::wxDirPickerCtrl at call 4 with 9 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxDirPickerCtrl_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxDirPickerCtrl::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxFontPickerCtrl_free(void *object)
{
    zo_wxFontPickerCtrl* custom_object = (zo_wxFontPickerCtrl*) object;

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Obviate delete call for wxFontPickerCtrl on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n\n");
    #endif

    zend_object_std_dtor(&custom_object->zo);
    efree(custom_object);
}

zend_object* php_wxFontPickerCtrl_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxFontPickerCtrl_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxFontPickerCtrl* custom_object;

    custom_object = (zo_wxFontPickerCtrl*) ecalloc(
        1,
        sizeof(zo_wxFontPickerCtrl)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    custom_object->zo.handlers = &wxphp_wxFontPickerCtrl_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXFONTPICKERCTRL_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto bool wxFontPickerCtrl::Create(wxWindow &parent, int id, wxFont font, wxPoint pos, wxSize size, int style, wxValidator validator, string name)
   Creates this widget with given parameters. */
PHP_METHOD(php_wxFontPickerCtrl, Create)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxFontPickerCtrl::Create\n");
    php_printf("===========================================\n");
    #endif

    zo_wxFontPickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxFontPickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxFontPickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxFontPickerCtrl::Create call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXFONTPICKERCTRL_TYPE){
                references = &((wxFontPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* parent0;
    wxWindow* object_pointer0_0 = 0;
    long id0;
    zval* font0;
    wxFont* object_pointer0_2 = 0;
    zval* pos0;
    wxPoint* object_pointer0_3 = 0;
    zval* size0;
    wxSize* object_pointer0_4 = 0;
    long style0;
    zval* validator0;
    wxValidator* object_pointer0_6 = 0;
    char* name0;
    size_t name_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 2  && arguments_received <= 8)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zl|OOOlos' (&parent0, &id0, &font0, php_wxFont_entry, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &validator0, &name0, &name_len0)\n");
        #endif

        char parse_parameters_string[] = "zl|OOOlos";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent0, &id0, &font0, php_wxFont_entry, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &validator0, &name0, &name_len0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(font0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxFont_P(font0)->object_type;
                    argument_native_object = (void*) Z_wxFont_P(font0)->native_object;
                    object_pointer0_2 = (wxFont*) argument_native_object;
                    if (!object_pointer0_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'font' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(font0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'font' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(pos0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos0)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos0)->native_object;
                    object_pointer0_3 = (wxPoint*) argument_native_object;
                    if (!object_pointer0_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 5){
                if(Z_TYPE_P(size0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size0)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size0)->native_object;
                    object_pointer0_4 = (wxSize*) argument_native_object;
                    if (!object_pointer0_4 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 7){
                if(Z_TYPE_P(validator0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxValidator_P(validator0)->object_type;
                    argument_native_object = (void*) Z_wxValidator_P(validator0)->native_object;
                    object_pointer0_6 = (wxValidator*) argument_native_object;
                    if (!object_pointer0_6 || (argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'validator' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(validator0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'validator' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxFontPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0))\n\n");
                #endif

                RETVAL_BOOL(((wxFontPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0));

                references->AddReference(parent0, "wxFontPickerCtrl::Create at call 1 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxFontPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxFont*) object_pointer0_2))\n\n");
                #endif

                RETVAL_BOOL(((wxFontPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxFont*) object_pointer0_2));

                references->AddReference(parent0, "wxFontPickerCtrl::Create at call 1 with 3 argument(s)");
                references->AddReference(font0, "wxFontPickerCtrl::Create at call 3 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxFontPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxFont*) object_pointer0_2, *(wxPoint*) object_pointer0_3))\n\n");
                #endif

                RETVAL_BOOL(((wxFontPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxFont*) object_pointer0_2, *(wxPoint*) object_pointer0_3));

                references->AddReference(parent0, "wxFontPickerCtrl::Create at call 1 with 4 argument(s)");
                references->AddReference(font0, "wxFontPickerCtrl::Create at call 3 with 4 argument(s)");
                references->AddReference(pos0, "wxFontPickerCtrl::Create at call 3 with 4 argument(s)");

                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxFontPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxFont*) object_pointer0_2, *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4))\n\n");
                #endif

                RETVAL_BOOL(((wxFontPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxFont*) object_pointer0_2, *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4));

                references->AddReference(parent0, "wxFontPickerCtrl::Create at call 1 with 5 argument(s)");
                references->AddReference(font0, "wxFontPickerCtrl::Create at call 3 with 5 argument(s)");
                references->AddReference(pos0, "wxFontPickerCtrl::Create at call 3 with 5 argument(s)");
                references->AddReference(size0, "wxFontPickerCtrl::Create at call 3 with 5 argument(s)");

                return;
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxFontPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxFont*) object_pointer0_2, *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0))\n\n");
                #endif

                RETVAL_BOOL(((wxFontPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxFont*) object_pointer0_2, *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0));

                references->AddReference(parent0, "wxFontPickerCtrl::Create at call 1 with 6 argument(s)");
                references->AddReference(font0, "wxFontPickerCtrl::Create at call 3 with 6 argument(s)");
                references->AddReference(pos0, "wxFontPickerCtrl::Create at call 3 with 6 argument(s)");
                references->AddReference(size0, "wxFontPickerCtrl::Create at call 3 with 6 argument(s)");

                return;
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxFontPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxFont*) object_pointer0_2, *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, *(wxValidator*) object_pointer0_6))\n\n");
                #endif

                RETVAL_BOOL(((wxFontPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxFont*) object_pointer0_2, *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, *(wxValidator*) object_pointer0_6));

                references->AddReference(parent0, "wxFontPickerCtrl::Create at call 1 with 7 argument(s)");
                references->AddReference(font0, "wxFontPickerCtrl::Create at call 3 with 7 argument(s)");
                references->AddReference(pos0, "wxFontPickerCtrl::Create at call 3 with 7 argument(s)");
                references->AddReference(size0, "wxFontPickerCtrl::Create at call 3 with 7 argument(s)");
                references->AddReference(validator0, "wxFontPickerCtrl::Create at call 3 with 7 argument(s)");

                return;
                break;
            }
            case 8:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxFontPickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxFont*) object_pointer0_2, *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, *(wxValidator*) object_pointer0_6, wxString(name0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(((wxFontPickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, *(wxFont*) object_pointer0_2, *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, *(wxValidator*) object_pointer0_6, wxString(name0, wxConvUTF8)));

                references->AddReference(parent0, "wxFontPickerCtrl::Create at call 1 with 8 argument(s)");
                references->AddReference(font0, "wxFontPickerCtrl::Create at call 3 with 8 argument(s)");
                references->AddReference(pos0, "wxFontPickerCtrl::Create at call 3 with 8 argument(s)");
                references->AddReference(size0, "wxFontPickerCtrl::Create at call 3 with 8 argument(s)");
                references->AddReference(validator0, "wxFontPickerCtrl::Create at call 3 with 8 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxFontPickerCtrl::Create\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxFontPickerCtrl::GetMaxPointSize()
   Returns the maximum point size value allowed for the user-chosen font. */
PHP_METHOD(php_wxFontPickerCtrl, GetMaxPointSize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxFontPickerCtrl::GetMaxPointSize\n");
    php_printf("===========================================\n");
    #endif

    zo_wxFontPickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxFontPickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxFontPickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxFontPickerCtrl::GetMaxPointSize call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXFONTPICKERCTRL_TYPE){
                references = &((wxFontPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxFontPickerCtrl::GetMaxPointSize())\n\n");
                #endif

                RETVAL_LONG(((wxFontPickerCtrl_php*)native_object)->GetMaxPointSize());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxFontPickerCtrl::GetMaxPointSize\n"
        );
    }
}
/* }}} */

/* {{{ proto wxFont wxFontPickerCtrl::GetSelectedFont()
   Returns the currently selected font. */
PHP_METHOD(php_wxFontPickerCtrl, GetSelectedFont)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxFontPickerCtrl::GetSelectedFont\n");
    php_printf("===========================================\n");
    #endif

    zo_wxFontPickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxFontPickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxFontPickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxFontPickerCtrl::GetSelectedFont call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXFONTPICKERCTRL_TYPE){
                references = &((wxFontPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxFontPickerCtrl::GetSelectedFont() to return new object\n\n");
                #endif

                wxFont value_to_return0;
                value_to_return0 = ((wxFontPickerCtrl_php*)native_object)->GetSelectedFont();
                ((wxRefCounter *) value_to_return0.GetRefData())->IncRef();
                void* ptr = safe_emalloc(1, sizeof(wxFont_php), 0);
                memcpy(ptr, (void*) &value_to_return0, sizeof(wxFont));
                object_init_ex(return_value, php_wxFont_entry);
                ((wxFont_php*)ptr)->phpObj = *return_value;
                zo_wxFont* zo0 = Z_wxFont_P(return_value);
                zo0->native_object = (wxFont_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxFontPickerCtrl::GetSelectedFont\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxFontPickerCtrl::SetMaxPointSize(int max)
   Sets the maximum point size value allowed for the user-chosen font. */
PHP_METHOD(php_wxFontPickerCtrl, SetMaxPointSize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxFontPickerCtrl::SetMaxPointSize\n");
    php_printf("===========================================\n");
    #endif

    zo_wxFontPickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxFontPickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxFontPickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxFontPickerCtrl::SetMaxPointSize call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXFONTPICKERCTRL_TYPE){
                references = &((wxFontPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long max0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&max0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &max0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxFontPickerCtrl::SetMaxPointSize((unsigned int) max0)\n\n");
                #endif

                ((wxFontPickerCtrl_php*)native_object)->SetMaxPointSize((unsigned int) max0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxFontPickerCtrl::SetMaxPointSize\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxFontPickerCtrl::SetSelectedFont(wxFont font)
   Sets the currently selected font. */
PHP_METHOD(php_wxFontPickerCtrl, SetSelectedFont)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxFontPickerCtrl::SetSelectedFont\n");
    php_printf("===========================================\n");
    #endif

    zo_wxFontPickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxFontPickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxFontPickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxFontPickerCtrl::SetSelectedFont call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXFONTPICKERCTRL_TYPE){
                references = &((wxFontPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* font0;
    wxFont* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&font0, php_wxFont_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &font0, php_wxFont_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(font0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxFont_P(font0)->object_type;
                    argument_native_object = (void*) Z_wxFont_P(font0)->native_object;
                    object_pointer0_0 = (wxFont*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'font' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(font0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'font' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxFontPickerCtrl::SetSelectedFont(*(wxFont*) object_pointer0_0)\n\n");
                #endif

                ((wxFontPickerCtrl_php*)native_object)->SetSelectedFont(*(wxFont*) object_pointer0_0);

                references->AddReference(font0, "wxFontPickerCtrl::SetSelectedFont at call 3 with 1 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxFontPickerCtrl::SetSelectedFont\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxFontPickerCtrl::wxFontPickerCtrl() */
PHP_METHOD(php_wxFontPickerCtrl, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxFontPickerCtrl::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxFontPickerCtrl* current_object;
    wxFontPickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    bool overload0_called = false;

    //Parameters for overload 1
    zval* parent1;
    wxWindow* object_pointer1_0 = 0;
    long id1;
    zval* font1;
    wxFont* object_pointer1_2 = 0;
    zval* pos1;
    wxPoint* object_pointer1_3 = 0;
    zval* size1;
    wxSize* object_pointer1_4 = 0;
    long style1;
    zval* validator1;
    wxValidator* object_pointer1_6 = 0;
    char* name1;
    size_t name_len1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 2  && arguments_received <= 8)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zl|OOOlos' (&parent1, &id1, &font1, php_wxFont_entry, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &validator1, &name1, &name_len1)\n");
        #endif

        char parse_parameters_string[] = "zl|OOOlos";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent1, &id1, &font1, php_wxFont_entry, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &validator1, &name1, &name_len1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent1)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent1)->native_object;
                    object_pointer1_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer1_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(font1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxFont_P(font1)->object_type;
                    argument_native_object = (void*) Z_wxFont_P(font1)->native_object;
                    object_pointer1_2 = (wxFont*) argument_native_object;
                    if (!object_pointer1_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'font' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(font1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'font' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(pos1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos1)->native_object;
                    object_pointer1_3 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 5){
                if(Z_TYPE_P(size1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size1)->native_object;
                    object_pointer1_4 = (wxSize*) argument_native_object;
                    if (!object_pointer1_4 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 7){
                if(Z_TYPE_P(validator1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxValidator_P(validator1)->object_type;
                    argument_native_object = (void*) Z_wxValidator_P(validator1)->native_object;
                    object_pointer1_6 = (wxValidator*) argument_native_object;
                    if (!object_pointer1_6 || (argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'validator' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(validator1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'validator' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct()\n");
                #endif

                native_object = new wxFontPickerCtrl_php();

                native_object->references.Initialize();
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1)\n");
                #endif

                native_object = new wxFontPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1);

                native_object->references.Initialize();
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxFontPickerCtrl::wxFontPickerCtrl at call 2 with 2 argument(s)");
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxFont*) object_pointer1_2)\n");
                #endif

                native_object = new wxFontPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxFont*) object_pointer1_2);

                native_object->references.Initialize();
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxFontPickerCtrl::wxFontPickerCtrl at call 2 with 3 argument(s)");
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(font1, "wxFontPickerCtrl::wxFontPickerCtrl at call 4 with 3 argument(s)");
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxFont*) object_pointer1_2, *(wxPoint*) object_pointer1_3)\n");
                #endif

                native_object = new wxFontPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxFont*) object_pointer1_2, *(wxPoint*) object_pointer1_3);

                native_object->references.Initialize();
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxFontPickerCtrl::wxFontPickerCtrl at call 2 with 4 argument(s)");
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(font1, "wxFontPickerCtrl::wxFontPickerCtrl at call 4 with 4 argument(s)");
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(pos1, "wxFontPickerCtrl::wxFontPickerCtrl at call 4 with 4 argument(s)");
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxFont*) object_pointer1_2, *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4)\n");
                #endif

                native_object = new wxFontPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxFont*) object_pointer1_2, *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4);

                native_object->references.Initialize();
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxFontPickerCtrl::wxFontPickerCtrl at call 2 with 5 argument(s)");
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(font1, "wxFontPickerCtrl::wxFontPickerCtrl at call 4 with 5 argument(s)");
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(pos1, "wxFontPickerCtrl::wxFontPickerCtrl at call 4 with 5 argument(s)");
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(size1, "wxFontPickerCtrl::wxFontPickerCtrl at call 4 with 5 argument(s)");
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxFont*) object_pointer1_2, *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1)\n");
                #endif

                native_object = new wxFontPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxFont*) object_pointer1_2, *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1);

                native_object->references.Initialize();
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxFontPickerCtrl::wxFontPickerCtrl at call 2 with 6 argument(s)");
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(font1, "wxFontPickerCtrl::wxFontPickerCtrl at call 4 with 6 argument(s)");
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(pos1, "wxFontPickerCtrl::wxFontPickerCtrl at call 4 with 6 argument(s)");
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(size1, "wxFontPickerCtrl::wxFontPickerCtrl at call 4 with 6 argument(s)");
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxFont*) object_pointer1_2, *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, *(wxValidator*) object_pointer1_6)\n");
                #endif

                native_object = new wxFontPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxFont*) object_pointer1_2, *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, *(wxValidator*) object_pointer1_6);

                native_object->references.Initialize();
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxFontPickerCtrl::wxFontPickerCtrl at call 2 with 7 argument(s)");
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(font1, "wxFontPickerCtrl::wxFontPickerCtrl at call 4 with 7 argument(s)");
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(pos1, "wxFontPickerCtrl::wxFontPickerCtrl at call 4 with 7 argument(s)");
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(size1, "wxFontPickerCtrl::wxFontPickerCtrl at call 4 with 7 argument(s)");
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(validator1, "wxFontPickerCtrl::wxFontPickerCtrl at call 4 with 7 argument(s)");
                break;
            }
            case 8:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxFont*) object_pointer1_2, *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, *(wxValidator*) object_pointer1_6, wxString(name1, wxConvUTF8))\n");
                #endif

                native_object = new wxFontPickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxFont*) object_pointer1_2, *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, *(wxValidator*) object_pointer1_6, wxString(name1, wxConvUTF8));

                native_object->references.Initialize();
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(parent1, "wxFontPickerCtrl::wxFontPickerCtrl at call 2 with 8 argument(s)");
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(font1, "wxFontPickerCtrl::wxFontPickerCtrl at call 4 with 8 argument(s)");
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(pos1, "wxFontPickerCtrl::wxFontPickerCtrl at call 4 with 8 argument(s)");
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(size1, "wxFontPickerCtrl::wxFontPickerCtrl at call 4 with 8 argument(s)");
                ((wxFontPickerCtrl_php*) native_object)->references.AddReference(validator1, "wxFontPickerCtrl::wxFontPickerCtrl at call 4 with 8 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxFontPickerCtrl_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxFontPickerCtrl::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxPickerBase_free(void *object)
{
    zo_wxPickerBase* custom_object = (zo_wxPickerBase*) object;

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Obviate delete call for wxPickerBase on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n\n");
    #endif

    zend_object_std_dtor(&custom_object->zo);
    efree(custom_object);
}

zend_object* php_wxPickerBase_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxPickerBase_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxPickerBase* custom_object;

    custom_object = (zo_wxPickerBase*) ecalloc(
        1,
        sizeof(zo_wxPickerBase)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    custom_object->zo.handlers = &wxphp_wxPickerBase_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXPICKERBASE_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto int wxPickerBase::GetInternalMargin()
   Returns the margin (in pixel) between the picker and the text control. */
PHP_METHOD(php_wxPickerBase, GetInternalMargin)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxPickerBase::GetInternalMargin\n");
    php_printf("===========================================\n");
    #endif

    zo_wxPickerBase* current_object;
    wxphp_object_type current_object_type;
    wxPickerBase_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxPickerBase_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxPickerBase::GetInternalMargin call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXPICKERBASE_TYPE){
                references = &((wxPickerBase_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxColourPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFontPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFilePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxDirPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxPickerBase::GetInternalMargin())\n\n");
                #endif

                if(current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE)
                {
                    RETVAL_LONG(((wxColourPickerCtrl_php*)native_object)->GetInternalMargin());
                }
                else if(current_object_type == PHP_WXFONTPICKERCTRL_TYPE)
                {
                    RETVAL_LONG(((wxFontPickerCtrl_php*)native_object)->GetInternalMargin());
                }
                else if(current_object_type == PHP_WXFILEPICKERCTRL_TYPE)
                {
                    RETVAL_LONG(((wxFilePickerCtrl_php*)native_object)->GetInternalMargin());
                }
                else if(current_object_type == PHP_WXDIRPICKERCTRL_TYPE)
                {
                    RETVAL_LONG(((wxDirPickerCtrl_php*)native_object)->GetInternalMargin());
                }
                else if(current_object_type == PHP_WXPICKERBASE_TYPE)
                {
                    RETVAL_LONG(((wxPickerBase_php*)native_object)->GetInternalMargin());
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxPickerBase::GetInternalMargin\n"
        );
    }
}
/* }}} */

/* {{{ proto wxControl wxPickerBase::GetPickerCtrl()
   Returns the native implementation of the real picker control. */
PHP_METHOD(php_wxPickerBase, GetPickerCtrl)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxPickerBase::GetPickerCtrl\n");
    php_printf("===========================================\n");
    #endif

    zo_wxPickerBase* current_object;
    wxphp_object_type current_object_type;
    wxPickerBase_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxPickerBase_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxPickerBase::GetPickerCtrl call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXPICKERBASE_TYPE){
                references = &((wxPickerBase_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxColourPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFontPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFilePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxDirPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxPickerBase::GetPickerCtrl() to return object pointer\n\n");
                #endif

                wxControl_php* value_to_return0;
                if(current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE)
                {
                    value_to_return0 = (wxControl_php*) ((wxColourPickerCtrl_php*)native_object)->GetPickerCtrl();

                }
                else if(current_object_type == PHP_WXFONTPICKERCTRL_TYPE)
                {
                    value_to_return0 = (wxControl_php*) ((wxFontPickerCtrl_php*)native_object)->GetPickerCtrl();

                }
                else if(current_object_type == PHP_WXFILEPICKERCTRL_TYPE)
                {
                    value_to_return0 = (wxControl_php*) ((wxFilePickerCtrl_php*)native_object)->GetPickerCtrl();

                }
                else if(current_object_type == PHP_WXDIRPICKERCTRL_TYPE)
                {
                    value_to_return0 = (wxControl_php*) ((wxDirPickerCtrl_php*)native_object)->GetPickerCtrl();

                }
                else if(current_object_type == PHP_WXPICKERBASE_TYPE)
                {
                    value_to_return0 = (wxControl_php*) ((wxPickerBase_php*)native_object)->GetPickerCtrl();

                }
                if(value_to_return0 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return0->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return0->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return0->phpObj);
                        zval_add_ref(&value_to_return0->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxControl_entry);
                    Z_wxControl_P(return_value)->native_object = (wxControl_php*) value_to_return0;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxPickerBase::GetPickerCtrl at call 5 with 0 argument(s)");
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxPickerBase::GetPickerCtrl\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxPickerBase::GetPickerCtrlProportion()
   Returns the proportion value of the picker. */
PHP_METHOD(php_wxPickerBase, GetPickerCtrlProportion)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxPickerBase::GetPickerCtrlProportion\n");
    php_printf("===========================================\n");
    #endif

    zo_wxPickerBase* current_object;
    wxphp_object_type current_object_type;
    wxPickerBase_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxPickerBase_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxPickerBase::GetPickerCtrlProportion call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXPICKERBASE_TYPE){
                references = &((wxPickerBase_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxColourPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFontPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFilePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxDirPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxPickerBase::GetPickerCtrlProportion())\n\n");
                #endif

                if(current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE)
                {
                    RETVAL_LONG(((wxColourPickerCtrl_php*)native_object)->GetPickerCtrlProportion());
                }
                else if(current_object_type == PHP_WXFONTPICKERCTRL_TYPE)
                {
                    RETVAL_LONG(((wxFontPickerCtrl_php*)native_object)->GetPickerCtrlProportion());
                }
                else if(current_object_type == PHP_WXFILEPICKERCTRL_TYPE)
                {
                    RETVAL_LONG(((wxFilePickerCtrl_php*)native_object)->GetPickerCtrlProportion());
                }
                else if(current_object_type == PHP_WXDIRPICKERCTRL_TYPE)
                {
                    RETVAL_LONG(((wxDirPickerCtrl_php*)native_object)->GetPickerCtrlProportion());
                }
                else if(current_object_type == PHP_WXPICKERBASE_TYPE)
                {
                    RETVAL_LONG(((wxPickerBase_php*)native_object)->GetPickerCtrlProportion());
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxPickerBase::GetPickerCtrlProportion\n"
        );
    }
}
/* }}} */

/* {{{ proto wxTextCtrl wxPickerBase::GetTextCtrl()
   Returns a pointer to the text control handled by this window or NULL if the wxPB_USE_TEXTCTRL style was not specified when this control was created. */
PHP_METHOD(php_wxPickerBase, GetTextCtrl)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxPickerBase::GetTextCtrl\n");
    php_printf("===========================================\n");
    #endif

    zo_wxPickerBase* current_object;
    wxphp_object_type current_object_type;
    wxPickerBase_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxPickerBase_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxPickerBase::GetTextCtrl call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXPICKERBASE_TYPE){
                references = &((wxPickerBase_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxColourPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFontPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFilePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxDirPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxPickerBase::GetTextCtrl() to return object pointer\n\n");
                #endif

                wxTextCtrl_php* value_to_return0;
                if(current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE)
                {
                    value_to_return0 = (wxTextCtrl_php*) ((wxColourPickerCtrl_php*)native_object)->GetTextCtrl();

                }
                else if(current_object_type == PHP_WXFONTPICKERCTRL_TYPE)
                {
                    value_to_return0 = (wxTextCtrl_php*) ((wxFontPickerCtrl_php*)native_object)->GetTextCtrl();

                }
                else if(current_object_type == PHP_WXFILEPICKERCTRL_TYPE)
                {
                    value_to_return0 = (wxTextCtrl_php*) ((wxFilePickerCtrl_php*)native_object)->GetTextCtrl();

                }
                else if(current_object_type == PHP_WXDIRPICKERCTRL_TYPE)
                {
                    value_to_return0 = (wxTextCtrl_php*) ((wxDirPickerCtrl_php*)native_object)->GetTextCtrl();

                }
                else if(current_object_type == PHP_WXPICKERBASE_TYPE)
                {
                    value_to_return0 = (wxTextCtrl_php*) ((wxPickerBase_php*)native_object)->GetTextCtrl();

                }
                if(value_to_return0 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return0->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return0->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return0->phpObj);
                        zval_add_ref(&value_to_return0->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxTextCtrl_entry);
                    Z_wxTextCtrl_P(return_value)->native_object = (wxTextCtrl_php*) value_to_return0;
                }

                if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
                    references->AddReference(return_value, "wxPickerBase::GetTextCtrl at call 5 with 0 argument(s)");
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxPickerBase::GetTextCtrl\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxPickerBase::GetTextCtrlProportion()
   Returns the proportion value of the text control. */
PHP_METHOD(php_wxPickerBase, GetTextCtrlProportion)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxPickerBase::GetTextCtrlProportion\n");
    php_printf("===========================================\n");
    #endif

    zo_wxPickerBase* current_object;
    wxphp_object_type current_object_type;
    wxPickerBase_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxPickerBase_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxPickerBase::GetTextCtrlProportion call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXPICKERBASE_TYPE){
                references = &((wxPickerBase_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxColourPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFontPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFilePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxDirPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(wxPickerBase::GetTextCtrlProportion())\n\n");
                #endif

                if(current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE)
                {
                    RETVAL_LONG(((wxColourPickerCtrl_php*)native_object)->GetTextCtrlProportion());
                }
                else if(current_object_type == PHP_WXFONTPICKERCTRL_TYPE)
                {
                    RETVAL_LONG(((wxFontPickerCtrl_php*)native_object)->GetTextCtrlProportion());
                }
                else if(current_object_type == PHP_WXFILEPICKERCTRL_TYPE)
                {
                    RETVAL_LONG(((wxFilePickerCtrl_php*)native_object)->GetTextCtrlProportion());
                }
                else if(current_object_type == PHP_WXDIRPICKERCTRL_TYPE)
                {
                    RETVAL_LONG(((wxDirPickerCtrl_php*)native_object)->GetTextCtrlProportion());
                }
                else if(current_object_type == PHP_WXPICKERBASE_TYPE)
                {
                    RETVAL_LONG(((wxPickerBase_php*)native_object)->GetTextCtrlProportion());
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxPickerBase::GetTextCtrlProportion\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxPickerBase::HasTextCtrl()
   Returns true if this window has a valid text control (i.e. if the wxPB_USE_TEXTCTRL style was given when creating this control). */
PHP_METHOD(php_wxPickerBase, HasTextCtrl)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxPickerBase::HasTextCtrl\n");
    php_printf("===========================================\n");
    #endif

    zo_wxPickerBase* current_object;
    wxphp_object_type current_object_type;
    wxPickerBase_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxPickerBase_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxPickerBase::HasTextCtrl call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXPICKERBASE_TYPE){
                references = &((wxPickerBase_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxColourPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFontPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFilePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxDirPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxPickerBase::HasTextCtrl())\n\n");
                #endif

                if(current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE)
                {
                    RETVAL_BOOL(((wxColourPickerCtrl_php*)native_object)->HasTextCtrl());
                }
                else if(current_object_type == PHP_WXFONTPICKERCTRL_TYPE)
                {
                    RETVAL_BOOL(((wxFontPickerCtrl_php*)native_object)->HasTextCtrl());
                }
                else if(current_object_type == PHP_WXFILEPICKERCTRL_TYPE)
                {
                    RETVAL_BOOL(((wxFilePickerCtrl_php*)native_object)->HasTextCtrl());
                }
                else if(current_object_type == PHP_WXDIRPICKERCTRL_TYPE)
                {
                    RETVAL_BOOL(((wxDirPickerCtrl_php*)native_object)->HasTextCtrl());
                }
                else if(current_object_type == PHP_WXPICKERBASE_TYPE)
                {
                    RETVAL_BOOL(((wxPickerBase_php*)native_object)->HasTextCtrl());
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxPickerBase::HasTextCtrl\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxPickerBase::IsPickerCtrlGrowable()
   Returns true if the picker control is growable. */
PHP_METHOD(php_wxPickerBase, IsPickerCtrlGrowable)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxPickerBase::IsPickerCtrlGrowable\n");
    php_printf("===========================================\n");
    #endif

    zo_wxPickerBase* current_object;
    wxphp_object_type current_object_type;
    wxPickerBase_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxPickerBase_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxPickerBase::IsPickerCtrlGrowable call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXPICKERBASE_TYPE){
                references = &((wxPickerBase_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxColourPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFontPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFilePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxDirPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxPickerBase::IsPickerCtrlGrowable())\n\n");
                #endif

                if(current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE)
                {
                    RETVAL_BOOL(((wxColourPickerCtrl_php*)native_object)->IsPickerCtrlGrowable());
                }
                else if(current_object_type == PHP_WXFONTPICKERCTRL_TYPE)
                {
                    RETVAL_BOOL(((wxFontPickerCtrl_php*)native_object)->IsPickerCtrlGrowable());
                }
                else if(current_object_type == PHP_WXFILEPICKERCTRL_TYPE)
                {
                    RETVAL_BOOL(((wxFilePickerCtrl_php*)native_object)->IsPickerCtrlGrowable());
                }
                else if(current_object_type == PHP_WXDIRPICKERCTRL_TYPE)
                {
                    RETVAL_BOOL(((wxDirPickerCtrl_php*)native_object)->IsPickerCtrlGrowable());
                }
                else if(current_object_type == PHP_WXPICKERBASE_TYPE)
                {
                    RETVAL_BOOL(((wxPickerBase_php*)native_object)->IsPickerCtrlGrowable());
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxPickerBase::IsPickerCtrlGrowable\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxPickerBase::IsTextCtrlGrowable()
   Returns true if the text control is growable. */
PHP_METHOD(php_wxPickerBase, IsTextCtrlGrowable)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxPickerBase::IsTextCtrlGrowable\n");
    php_printf("===========================================\n");
    #endif

    zo_wxPickerBase* current_object;
    wxphp_object_type current_object_type;
    wxPickerBase_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxPickerBase_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxPickerBase::IsTextCtrlGrowable call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXPICKERBASE_TYPE){
                references = &((wxPickerBase_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxColourPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFontPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFilePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxDirPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxPickerBase::IsTextCtrlGrowable())\n\n");
                #endif

                if(current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE)
                {
                    RETVAL_BOOL(((wxColourPickerCtrl_php*)native_object)->IsTextCtrlGrowable());
                }
                else if(current_object_type == PHP_WXFONTPICKERCTRL_TYPE)
                {
                    RETVAL_BOOL(((wxFontPickerCtrl_php*)native_object)->IsTextCtrlGrowable());
                }
                else if(current_object_type == PHP_WXFILEPICKERCTRL_TYPE)
                {
                    RETVAL_BOOL(((wxFilePickerCtrl_php*)native_object)->IsTextCtrlGrowable());
                }
                else if(current_object_type == PHP_WXDIRPICKERCTRL_TYPE)
                {
                    RETVAL_BOOL(((wxDirPickerCtrl_php*)native_object)->IsTextCtrlGrowable());
                }
                else if(current_object_type == PHP_WXPICKERBASE_TYPE)
                {
                    RETVAL_BOOL(((wxPickerBase_php*)native_object)->IsTextCtrlGrowable());
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxPickerBase::IsTextCtrlGrowable\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxPickerBase::SetInternalMargin(int margin)
   Sets the margin (in pixel) between the picker and the text control. */
PHP_METHOD(php_wxPickerBase, SetInternalMargin)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxPickerBase::SetInternalMargin\n");
    php_printf("===========================================\n");
    #endif

    zo_wxPickerBase* current_object;
    wxphp_object_type current_object_type;
    wxPickerBase_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxPickerBase_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxPickerBase::SetInternalMargin call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXPICKERBASE_TYPE){
                references = &((wxPickerBase_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxColourPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFontPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFilePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxDirPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long margin0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&margin0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &margin0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxPickerBase::SetInternalMargin((int) margin0)\n\n");
                #endif

                if(current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE)
                {
                    ((wxColourPickerCtrl_php*)native_object)->SetInternalMargin((int) margin0);
                }
                else if(current_object_type == PHP_WXFONTPICKERCTRL_TYPE)
                {
                    ((wxFontPickerCtrl_php*)native_object)->SetInternalMargin((int) margin0);
                }
                else if(current_object_type == PHP_WXFILEPICKERCTRL_TYPE)
                {
                    ((wxFilePickerCtrl_php*)native_object)->SetInternalMargin((int) margin0);
                }
                else if(current_object_type == PHP_WXDIRPICKERCTRL_TYPE)
                {
                    ((wxDirPickerCtrl_php*)native_object)->SetInternalMargin((int) margin0);
                }
                else if(current_object_type == PHP_WXPICKERBASE_TYPE)
                {
                    ((wxPickerBase_php*)native_object)->SetInternalMargin((int) margin0);
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxPickerBase::SetInternalMargin\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxPickerBase::SetPickerCtrlGrowable(bool grow)
   Sets the picker control as growable when grow is true. */
PHP_METHOD(php_wxPickerBase, SetPickerCtrlGrowable)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxPickerBase::SetPickerCtrlGrowable\n");
    php_printf("===========================================\n");
    #endif

    zo_wxPickerBase* current_object;
    wxphp_object_type current_object_type;
    wxPickerBase_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxPickerBase_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxPickerBase::SetPickerCtrlGrowable call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXPICKERBASE_TYPE){
                references = &((wxPickerBase_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxColourPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFontPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFilePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxDirPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool grow0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 0  && arguments_received <= 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '|b' (&grow0)\n");
        #endif

        char parse_parameters_string[] = "|b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &grow0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxPickerBase::SetPickerCtrlGrowable()\n\n");
                #endif

                if(current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE)
                {
                    ((wxColourPickerCtrl_php*)native_object)->SetPickerCtrlGrowable();
                }
                else if(current_object_type == PHP_WXFONTPICKERCTRL_TYPE)
                {
                    ((wxFontPickerCtrl_php*)native_object)->SetPickerCtrlGrowable();
                }
                else if(current_object_type == PHP_WXFILEPICKERCTRL_TYPE)
                {
                    ((wxFilePickerCtrl_php*)native_object)->SetPickerCtrlGrowable();
                }
                else if(current_object_type == PHP_WXDIRPICKERCTRL_TYPE)
                {
                    ((wxDirPickerCtrl_php*)native_object)->SetPickerCtrlGrowable();
                }
                else if(current_object_type == PHP_WXPICKERBASE_TYPE)
                {
                    ((wxPickerBase_php*)native_object)->SetPickerCtrlGrowable();
                }


                return;
                break;
            }
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxPickerBase::SetPickerCtrlGrowable(grow0)\n\n");
                #endif

                if(current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE)
                {
                    ((wxColourPickerCtrl_php*)native_object)->SetPickerCtrlGrowable(grow0);
                }
                else if(current_object_type == PHP_WXFONTPICKERCTRL_TYPE)
                {
                    ((wxFontPickerCtrl_php*)native_object)->SetPickerCtrlGrowable(grow0);
                }
                else if(current_object_type == PHP_WXFILEPICKERCTRL_TYPE)
                {
                    ((wxFilePickerCtrl_php*)native_object)->SetPickerCtrlGrowable(grow0);
                }
                else if(current_object_type == PHP_WXDIRPICKERCTRL_TYPE)
                {
                    ((wxDirPickerCtrl_php*)native_object)->SetPickerCtrlGrowable(grow0);
                }
                else if(current_object_type == PHP_WXPICKERBASE_TYPE)
                {
                    ((wxPickerBase_php*)native_object)->SetPickerCtrlGrowable(grow0);
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxPickerBase::SetPickerCtrlGrowable\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxPickerBase::SetPickerCtrlProportion(int prop)
   Sets the proportion value of the picker. */
PHP_METHOD(php_wxPickerBase, SetPickerCtrlProportion)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxPickerBase::SetPickerCtrlProportion\n");
    php_printf("===========================================\n");
    #endif

    zo_wxPickerBase* current_object;
    wxphp_object_type current_object_type;
    wxPickerBase_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxPickerBase_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxPickerBase::SetPickerCtrlProportion call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXPICKERBASE_TYPE){
                references = &((wxPickerBase_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxColourPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFontPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFilePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxDirPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long prop0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&prop0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &prop0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxPickerBase::SetPickerCtrlProportion((int) prop0)\n\n");
                #endif

                if(current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE)
                {
                    ((wxColourPickerCtrl_php*)native_object)->SetPickerCtrlProportion((int) prop0);
                }
                else if(current_object_type == PHP_WXFONTPICKERCTRL_TYPE)
                {
                    ((wxFontPickerCtrl_php*)native_object)->SetPickerCtrlProportion((int) prop0);
                }
                else if(current_object_type == PHP_WXFILEPICKERCTRL_TYPE)
                {
                    ((wxFilePickerCtrl_php*)native_object)->SetPickerCtrlProportion((int) prop0);
                }
                else if(current_object_type == PHP_WXDIRPICKERCTRL_TYPE)
                {
                    ((wxDirPickerCtrl_php*)native_object)->SetPickerCtrlProportion((int) prop0);
                }
                else if(current_object_type == PHP_WXPICKERBASE_TYPE)
                {
                    ((wxPickerBase_php*)native_object)->SetPickerCtrlProportion((int) prop0);
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxPickerBase::SetPickerCtrlProportion\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxPickerBase::SetTextCtrlGrowable(bool grow)
   Sets the text control as growable when grow is true. */
PHP_METHOD(php_wxPickerBase, SetTextCtrlGrowable)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxPickerBase::SetTextCtrlGrowable\n");
    php_printf("===========================================\n");
    #endif

    zo_wxPickerBase* current_object;
    wxphp_object_type current_object_type;
    wxPickerBase_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxPickerBase_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxPickerBase::SetTextCtrlGrowable call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXPICKERBASE_TYPE){
                references = &((wxPickerBase_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxColourPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFontPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFilePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxDirPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool grow0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 0  && arguments_received <= 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '|b' (&grow0)\n");
        #endif

        char parse_parameters_string[] = "|b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &grow0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxPickerBase::SetTextCtrlGrowable()\n\n");
                #endif

                if(current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE)
                {
                    ((wxColourPickerCtrl_php*)native_object)->SetTextCtrlGrowable();
                }
                else if(current_object_type == PHP_WXFONTPICKERCTRL_TYPE)
                {
                    ((wxFontPickerCtrl_php*)native_object)->SetTextCtrlGrowable();
                }
                else if(current_object_type == PHP_WXFILEPICKERCTRL_TYPE)
                {
                    ((wxFilePickerCtrl_php*)native_object)->SetTextCtrlGrowable();
                }
                else if(current_object_type == PHP_WXDIRPICKERCTRL_TYPE)
                {
                    ((wxDirPickerCtrl_php*)native_object)->SetTextCtrlGrowable();
                }
                else if(current_object_type == PHP_WXPICKERBASE_TYPE)
                {
                    ((wxPickerBase_php*)native_object)->SetTextCtrlGrowable();
                }


                return;
                break;
            }
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxPickerBase::SetTextCtrlGrowable(grow0)\n\n");
                #endif

                if(current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE)
                {
                    ((wxColourPickerCtrl_php*)native_object)->SetTextCtrlGrowable(grow0);
                }
                else if(current_object_type == PHP_WXFONTPICKERCTRL_TYPE)
                {
                    ((wxFontPickerCtrl_php*)native_object)->SetTextCtrlGrowable(grow0);
                }
                else if(current_object_type == PHP_WXFILEPICKERCTRL_TYPE)
                {
                    ((wxFilePickerCtrl_php*)native_object)->SetTextCtrlGrowable(grow0);
                }
                else if(current_object_type == PHP_WXDIRPICKERCTRL_TYPE)
                {
                    ((wxDirPickerCtrl_php*)native_object)->SetTextCtrlGrowable(grow0);
                }
                else if(current_object_type == PHP_WXPICKERBASE_TYPE)
                {
                    ((wxPickerBase_php*)native_object)->SetTextCtrlGrowable(grow0);
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxPickerBase::SetTextCtrlGrowable\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxPickerBase::SetTextCtrlProportion(int prop)
   Sets the proportion value of the text control. */
PHP_METHOD(php_wxPickerBase, SetTextCtrlProportion)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxPickerBase::SetTextCtrlProportion\n");
    php_printf("===========================================\n");
    #endif

    zo_wxPickerBase* current_object;
    wxphp_object_type current_object_type;
    wxPickerBase_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxPickerBase_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxPickerBase::SetTextCtrlProportion call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXPICKERBASE_TYPE){
                references = &((wxPickerBase_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxColourPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFontPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxFilePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
            if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
                references = &((wxDirPickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    long prop0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&prop0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &prop0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxPickerBase::SetTextCtrlProportion((int) prop0)\n\n");
                #endif

                if(current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE)
                {
                    ((wxColourPickerCtrl_php*)native_object)->SetTextCtrlProportion((int) prop0);
                }
                else if(current_object_type == PHP_WXFONTPICKERCTRL_TYPE)
                {
                    ((wxFontPickerCtrl_php*)native_object)->SetTextCtrlProportion((int) prop0);
                }
                else if(current_object_type == PHP_WXFILEPICKERCTRL_TYPE)
                {
                    ((wxFilePickerCtrl_php*)native_object)->SetTextCtrlProportion((int) prop0);
                }
                else if(current_object_type == PHP_WXDIRPICKERCTRL_TYPE)
                {
                    ((wxDirPickerCtrl_php*)native_object)->SetTextCtrlProportion((int) prop0);
                }
                else if(current_object_type == PHP_WXPICKERBASE_TYPE)
                {
                    ((wxPickerBase_php*)native_object)->SetTextCtrlProportion((int) prop0);
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxPickerBase::SetTextCtrlProportion\n"
        );
    }
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxTimePickerCtrl_free(void *object)
{
    zo_wxTimePickerCtrl* custom_object = (zo_wxTimePickerCtrl*) object;

    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Obviate delete call for wxTimePickerCtrl on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n\n");
    #endif

    zend_object_std_dtor(&custom_object->zo);
    efree(custom_object);
}

zend_object* php_wxTimePickerCtrl_new(zend_class_entry *class_type)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf(
        "Calling php_wxTimePickerCtrl_new on %s at line %i\n",
        zend_get_executed_filename(),
        zend_get_executed_lineno()
    );
    php_printf("===========================================\n");
    #endif

    zo_wxTimePickerCtrl* custom_object;

    custom_object = (zo_wxTimePickerCtrl*) ecalloc(
        1,
        sizeof(zo_wxTimePickerCtrl)
        + zend_object_properties_size(class_type)
    );

    zend_object_std_init(&custom_object->zo, class_type);
    object_properties_init(&custom_object->zo, class_type);

    custom_object->zo.handlers = &wxphp_wxTimePickerCtrl_object_handlers;

    custom_object->native_object = NULL;
    custom_object->object_type = PHP_WXTIMEPICKERCTRL_TYPE;
    custom_object->is_user_initialized = 0;

    return &custom_object->zo;
}
END_EXTERN_C()

/* {{{ proto  wxTimePickerCtrl::wxTimePickerCtrl()
   Default constructor. */
PHP_METHOD(php_wxTimePickerCtrl, __construct)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxTimePickerCtrl::__construct\n");
    php_printf("===========================================\n");
    #endif

    zo_wxTimePickerCtrl* current_object;
    wxTimePickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    int arguments_received = ZEND_NUM_ARGS();


    //Parameters for overload 0
    bool overload0_called = false;

    //Parameters for overload 1
    zval* parent1;
    wxWindow* object_pointer1_0 = 0;
    long id1;
    time_t dt1;
    zval* pos1;
    wxPoint* object_pointer1_3 = 0;
    zval* size1;
    wxSize* object_pointer1_4 = 0;
    long style1;
    zval* validator1;
    wxValidator* object_pointer1_6 = 0;
    char* name1;
    size_t name_len1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 2  && arguments_received <= 8)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zl|lOOlos' (&parent1, &id1, &dt1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &validator1, &name1, &name_len1)\n");
        #endif

        char parse_parameters_string[] = "zl|lOOlos";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent1, &id1, &dt1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &validator1, &name1, &name_len1 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent1)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent1)->native_object;
                    object_pointer1_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer1_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(pos1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos1)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos1)->native_object;
                    object_pointer1_3 = (wxPoint*) argument_native_object;
                    if (!object_pointer1_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 5){
                if(Z_TYPE_P(size1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size1)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size1)->native_object;
                    object_pointer1_4 = (wxSize*) argument_native_object;
                    if (!object_pointer1_4 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 7){
                if(Z_TYPE_P(validator1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxValidator_P(validator1)->object_type;
                    argument_native_object = (void*) Z_wxValidator_P(validator1)->native_object;
                    object_pointer1_6 = (wxValidator*) argument_native_object;
                    if (!object_pointer1_6 || (argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'validator' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(validator1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'validator' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct()\n");
                #endif

                native_object = new wxTimePickerCtrl_php();

                native_object->references.Initialize();
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1)\n");
                #endif

                native_object = new wxTimePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1);

                native_object->references.Initialize();
                ((wxTimePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxTimePickerCtrl::wxTimePickerCtrl at call 2 with 2 argument(s)");
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1))\n");
                #endif

                native_object = new wxTimePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1));

                native_object->references.Initialize();
                ((wxTimePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxTimePickerCtrl::wxTimePickerCtrl at call 2 with 3 argument(s)");
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1), *(wxPoint*) object_pointer1_3)\n");
                #endif

                native_object = new wxTimePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1), *(wxPoint*) object_pointer1_3);

                native_object->references.Initialize();
                ((wxTimePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxTimePickerCtrl::wxTimePickerCtrl at call 2 with 4 argument(s)");
                ((wxTimePickerCtrl_php*) native_object)->references.AddReference(pos1, "wxTimePickerCtrl::wxTimePickerCtrl at call 4 with 4 argument(s)");
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4)\n");
                #endif

                native_object = new wxTimePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4);

                native_object->references.Initialize();
                ((wxTimePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxTimePickerCtrl::wxTimePickerCtrl at call 2 with 5 argument(s)");
                ((wxTimePickerCtrl_php*) native_object)->references.AddReference(pos1, "wxTimePickerCtrl::wxTimePickerCtrl at call 4 with 5 argument(s)");
                ((wxTimePickerCtrl_php*) native_object)->references.AddReference(size1, "wxTimePickerCtrl::wxTimePickerCtrl at call 4 with 5 argument(s)");
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1)\n");
                #endif

                native_object = new wxTimePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1);

                native_object->references.Initialize();
                ((wxTimePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxTimePickerCtrl::wxTimePickerCtrl at call 2 with 6 argument(s)");
                ((wxTimePickerCtrl_php*) native_object)->references.AddReference(pos1, "wxTimePickerCtrl::wxTimePickerCtrl at call 4 with 6 argument(s)");
                ((wxTimePickerCtrl_php*) native_object)->references.AddReference(size1, "wxTimePickerCtrl::wxTimePickerCtrl at call 4 with 6 argument(s)");
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, *(wxValidator*) object_pointer1_6)\n");
                #endif

                native_object = new wxTimePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, *(wxValidator*) object_pointer1_6);

                native_object->references.Initialize();
                ((wxTimePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxTimePickerCtrl::wxTimePickerCtrl at call 2 with 7 argument(s)");
                ((wxTimePickerCtrl_php*) native_object)->references.AddReference(pos1, "wxTimePickerCtrl::wxTimePickerCtrl at call 4 with 7 argument(s)");
                ((wxTimePickerCtrl_php*) native_object)->references.AddReference(size1, "wxTimePickerCtrl::wxTimePickerCtrl at call 4 with 7 argument(s)");
                ((wxTimePickerCtrl_php*) native_object)->references.AddReference(validator1, "wxTimePickerCtrl::wxTimePickerCtrl at call 4 with 7 argument(s)");
                break;
            }
            case 8:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, *(wxValidator*) object_pointer1_6, wxString(name1, wxConvUTF8))\n");
                #endif

                native_object = new wxTimePickerCtrl_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxDateTime(dt1), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, *(wxValidator*) object_pointer1_6, wxString(name1, wxConvUTF8));

                native_object->references.Initialize();
                ((wxTimePickerCtrl_php*) native_object)->references.AddReference(parent1, "wxTimePickerCtrl::wxTimePickerCtrl at call 2 with 8 argument(s)");
                ((wxTimePickerCtrl_php*) native_object)->references.AddReference(pos1, "wxTimePickerCtrl::wxTimePickerCtrl at call 4 with 8 argument(s)");
                ((wxTimePickerCtrl_php*) native_object)->references.AddReference(size1, "wxTimePickerCtrl::wxTimePickerCtrl at call 4 with 8 argument(s)");
                ((wxTimePickerCtrl_php*) native_object)->references.AddReference(validator1, "wxTimePickerCtrl::wxTimePickerCtrl at call 4 with 8 argument(s)");
                break;
            }
        }
    }

    
    if(already_called)
    {
        native_object->phpObj = *getThis();


        current_object = Z_wxTimePickerCtrl_P(getThis());

        current_object->native_object = native_object;

        current_object->is_user_initialized = 1;
    }
    else
    {
        zend_error(
            E_ERROR,
            "Abstract class or wrong type/count of parameters "
            "passed to: wxTimePickerCtrl::__construct\n"
        );
    }

    #ifdef USE_WXPHP_DEBUG
        php_printf("===========================================\n\n");
    #endif
}
/* }}} */

/* {{{ proto bool wxTimePickerCtrl::Create(wxWindow &parent, int id, timestamp dt, wxPoint pos, wxSize size, int style, wxValidator validator, string name)
   Create the control window. */
PHP_METHOD(php_wxTimePickerCtrl, Create)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxTimePickerCtrl::Create\n");
    php_printf("===========================================\n");
    #endif

    zo_wxTimePickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxTimePickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxTimePickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxTimePickerCtrl::Create call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXTIMEPICKERCTRL_TYPE){
                references = &((wxTimePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    zval* parent0;
    wxWindow* object_pointer0_0 = 0;
    long id0;
    time_t dt0;
    zval* pos0;
    wxPoint* object_pointer0_3 = 0;
    zval* size0;
    wxSize* object_pointer0_4 = 0;
    long style0;
    zval* validator0;
    wxValidator* object_pointer0_6 = 0;
    char* name0;
    size_t name_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 2  && arguments_received <= 8)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zl|lOOlos' (&parent0, &id0, &dt0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &validator0, &name0, &name_len0)\n");
        #endif

        char parse_parameters_string[] = "zl|lOOlos";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent0, &id0, &dt0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &validator0, &name0, &name_len0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(pos0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos0)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos0)->native_object;
                    object_pointer0_3 = (wxPoint*) argument_native_object;
                    if (!object_pointer0_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 5){
                if(Z_TYPE_P(size0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxSize_P(size0)->object_type;
                    argument_native_object = (void*) Z_wxSize_P(size0)->native_object;
                    object_pointer0_4 = (wxSize*) argument_native_object;
                    if (!object_pointer0_4 )
                    {
                        zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(size0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 7){
                if(Z_TYPE_P(validator0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxValidator_P(validator0)->object_type;
                    argument_native_object = (void*) Z_wxValidator_P(validator0)->native_object;
                    object_pointer0_6 = (wxValidator*) argument_native_object;
                    if (!object_pointer0_6 || (argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'validator' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(validator0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'validator' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxTimePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0))\n\n");
                #endif

                RETVAL_BOOL(((wxTimePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0));

                references->AddReference(parent0, "wxTimePickerCtrl::Create at call 1 with 2 argument(s)");

                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxTimePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0)))\n\n");
                #endif

                RETVAL_BOOL(((wxTimePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0)));

                references->AddReference(parent0, "wxTimePickerCtrl::Create at call 1 with 3 argument(s)");

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxTimePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0), *(wxPoint*) object_pointer0_3))\n\n");
                #endif

                RETVAL_BOOL(((wxTimePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0), *(wxPoint*) object_pointer0_3));

                references->AddReference(parent0, "wxTimePickerCtrl::Create at call 1 with 4 argument(s)");
                references->AddReference(pos0, "wxTimePickerCtrl::Create at call 3 with 4 argument(s)");

                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxTimePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4))\n\n");
                #endif

                RETVAL_BOOL(((wxTimePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4));

                references->AddReference(parent0, "wxTimePickerCtrl::Create at call 1 with 5 argument(s)");
                references->AddReference(pos0, "wxTimePickerCtrl::Create at call 3 with 5 argument(s)");
                references->AddReference(size0, "wxTimePickerCtrl::Create at call 3 with 5 argument(s)");

                return;
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxTimePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0))\n\n");
                #endif

                RETVAL_BOOL(((wxTimePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0));

                references->AddReference(parent0, "wxTimePickerCtrl::Create at call 1 with 6 argument(s)");
                references->AddReference(pos0, "wxTimePickerCtrl::Create at call 3 with 6 argument(s)");
                references->AddReference(size0, "wxTimePickerCtrl::Create at call 3 with 6 argument(s)");

                return;
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxTimePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, *(wxValidator*) object_pointer0_6))\n\n");
                #endif

                RETVAL_BOOL(((wxTimePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, *(wxValidator*) object_pointer0_6));

                references->AddReference(parent0, "wxTimePickerCtrl::Create at call 1 with 7 argument(s)");
                references->AddReference(pos0, "wxTimePickerCtrl::Create at call 3 with 7 argument(s)");
                references->AddReference(size0, "wxTimePickerCtrl::Create at call 3 with 7 argument(s)");
                references->AddReference(validator0, "wxTimePickerCtrl::Create at call 3 with 7 argument(s)");

                return;
                break;
            }
            case 8:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(wxTimePickerCtrl::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, *(wxValidator*) object_pointer0_6, wxString(name0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(((wxTimePickerCtrl_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxDateTime(dt0), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, *(wxValidator*) object_pointer0_6, wxString(name0, wxConvUTF8)));

                references->AddReference(parent0, "wxTimePickerCtrl::Create at call 1 with 8 argument(s)");
                references->AddReference(pos0, "wxTimePickerCtrl::Create at call 3 with 8 argument(s)");
                references->AddReference(size0, "wxTimePickerCtrl::Create at call 3 with 8 argument(s)");
                references->AddReference(validator0, "wxTimePickerCtrl::Create at call 3 with 8 argument(s)");

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxTimePickerCtrl::Create\n"
        );
    }
}
/* }}} */

/* {{{ proto timestamp wxTimePickerCtrl::GetValue()
   Returns the currently entered time. */
PHP_METHOD(php_wxTimePickerCtrl, GetValue)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxTimePickerCtrl::GetValue\n");
    php_printf("===========================================\n");
    #endif

    zo_wxTimePickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxTimePickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxTimePickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxTimePickerCtrl::GetValue call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXTIMEPICKERCTRL_TYPE){
                references = &((wxTimePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxTimePickerCtrl::GetValue() to return timestamp\n\n");
                #endif

                time_t value_to_return0;
                value_to_return0 = ((wxTimePickerCtrl_php*)native_object)->GetValue().GetTicks();
                RETVAL_LONG(value_to_return0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxTimePickerCtrl::GetValue\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxTimePickerCtrl::SetValue(timestamp dt)
   Changes the current value of the control. */
PHP_METHOD(php_wxTimePickerCtrl, SetValue)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking wxTimePickerCtrl::SetValue\n");
    php_printf("===========================================\n");
    #endif

    zo_wxTimePickerCtrl* current_object;
    wxphp_object_type current_object_type;
    wxTimePickerCtrl_php* native_object;
    void* argument_native_object = NULL;

    //Other variables used thru the code
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    wxPHPObjectReferences* references;
    int arguments_received = ZEND_NUM_ARGS();
    bool return_is_user_initialized = false;

    //Get native object of the php object that called the method
    if(getThis() != NULL)
    {
        current_object = Z_wxTimePickerCtrl_P(getThis());

        if(current_object->native_object == NULL)
        {
            zend_error(
                E_ERROR,
                "Failed to get the native object for "
                "wxTimePickerCtrl::SetValue call\n"
            );

            return;
        }
        else
        {
            native_object = current_object->native_object;
            current_object_type = current_object->object_type;

            bool reference_type_found = false;

            if(current_object_type == PHP_WXTIMEPICKERCTRL_TYPE){
                references = &((wxTimePickerCtrl_php*)native_object)->references;
                reference_type_found = true;
            }
        }
    }
    #ifdef USE_WXPHP_DEBUG
    else
    {
        php_printf("Processing the method call as static\n");
    }
    #endif

    //Parameters for overload 0
    time_t dt0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&dt0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dt0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing wxTimePickerCtrl::SetValue(wxDateTime(dt0))\n\n");
                #endif

                ((wxTimePickerCtrl_php*)native_object)->SetValue(wxDateTime(dt0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to: "
            "wxTimePickerCtrl::SetValue\n"
        );
    }
}
/* }}} */

